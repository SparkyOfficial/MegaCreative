package com.megacreative.gui.coding;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import com.megacreative.services.BlockConfigService;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.BlockPlacementHandler;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;

import java.util.*;

/**
 * üéÜ –£–õ–£–ß–®–ï–ù–ù–´–ô –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
 * —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–±–æ—Ä–æ–º –∏ —É–º–Ω—ã–º–∏ —Ç–∞–±–ª–∏—á–∫–∞–º–∏ –Ω–∞ –±–ª–æ–∫–∞—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
 *
 * üéÜ ENHANCED GUI for selecting conditions for code blocks.
 * 
 * Implements reference system-style: universal blocks with GUI configuration
 * with categories, beautiful selection, and smart signs on blocks with information.
 *
 * üéÜ ERWEITERT GUI zur Auswahl von Bedingungen f√ºr Codebl√∂cke.
 * 
 * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-Konfiguration
 * mit Kategorien, sch√∂ner Auswahl und intelligenten Schildern an Bl√∂cken mit Informationen.
 */
public class ConditionSelectionGUI implements GUIManager.ManagedGUIInterface {
    
    private final MegaCreative plugin;
    private final Player player;
    private final Location blockLocation;
    private final Material blockMaterial;
    private final Inventory inventory;
    private final GUIManager guiManager;
    private final BlockConfigService blockConfigService;
    
    
    private static final Map<String, String> CATEGORY_NAMES = new LinkedHashMap<>();
    private static final Map<String, Material> CATEGORY_MATERIALS = new HashMap<>();
    
    static {
        
        CATEGORY_NAMES.put("PLAYER", "üë§ –ò–≥—Ä–æ–∫");
        CATEGORY_NAMES.put("WORLD", "üåç –ú–∏—Ä");
        CATEGORY_NAMES.put("ITEM", "üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã");
        CATEGORY_NAMES.put("VARIABLE", "üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ");
        CATEGORY_NAMES.put("ENTITY", "üßü –°—É—â–µ—Å—Ç–≤–∞");
        CATEGORY_NAMES.put("GAME", "üéÆ –ò–≥—Ä–∞");
        
        
        CATEGORY_MATERIALS.put("PLAYER", Material.PLAYER_HEAD);
        CATEGORY_MATERIALS.put("WORLD", Material.GRASS_BLOCK);
        CATEGORY_MATERIALS.put("ITEM", Material.CHEST);
        CATEGORY_MATERIALS.put("VARIABLE", Material.NAME_TAG);
        CATEGORY_MATERIALS.put("ENTITY", Material.ZOMBIE_SPAWN_EGG);
        CATEGORY_MATERIALS.put("GAME", Material.COMMAND_BLOCK);
    }
    
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π
     * @param plugin –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
     * @param player –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     * @param blockLocation –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param blockMaterial –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    public ConditionSelectionGUI(MegaCreative plugin, Player player, Location blockLocation, Material blockMaterial) {
        this.plugin = plugin;
        this.player = player;
        this.blockLocation = blockLocation;
        this.blockMaterial = blockMaterial;
        this.guiManager = plugin.getServiceRegistry().getGuiManager();
        
        // Initialize block config service directly since plugin is never null
        this.blockConfigService = plugin.getServiceRegistry().getBlockConfigService();
        
        this.inventory = Bukkit.createInventory(null, 54, "¬ß8–í—ã–±–æ—Ä —É—Å–ª–æ–≤–∏—è: " + getBlockDisplayName());
        
        setupInventory();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –±–ª–æ–∫–∞
     */
    private String getBlockDisplayName() {
        
        BlockConfigService.BlockConfig config = blockConfigService.getBlockConfigByMaterial(blockMaterial);
        return config != null ? config.getDisplayName() : blockMaterial.name();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    private void setupInventory() {
        inventory.clear();
        
        
        ItemStack borderItem = new ItemStack(Material.BLACK_STAINED_GLASS_PANE);
        ItemMeta borderMeta = borderItem.getItemMeta();
        borderMeta.setDisplayName(" ");
        borderItem.setItemMeta(borderMeta);
        
        
        for (int i = 0; i < 54; i++) {
            if (i < 9 || i >= 45 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, borderItem);
            }
        }
        
        
        ItemStack infoItem = new ItemStack(blockMaterial);
        ItemMeta infoMeta = infoItem.getItemMeta();
        infoMeta.setDisplayName("¬ße¬ßl" + getBlockDisplayName());
        List<String> infoLore = new ArrayList<>();
        infoLore.add("¬ß7–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª–æ–≤–∏–π");
        infoLore.add("");
        infoLore.add("¬ßa–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á—Ç–æ–±—ã");
        infoLore.add("¬ßa–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª–æ–≤–∏—è");
        infoLore.add("");
        infoLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        infoLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        infoMeta.setLore(infoLore);
        infoItem.setItemMeta(infoMeta);
        inventory.setItem(4, infoItem);
        
        
        int slot = 10;
        for (Map.Entry<String, String> category : CATEGORY_NAMES.entrySet()) {
            String categoryKey = category.getKey();
            String categoryName = category.getValue();
            
            ItemStack categoryItem = new ItemStack(CATEGORY_MATERIALS.getOrDefault(categoryKey, Material.PAPER));
            ItemMeta categoryMeta = categoryItem.getItemMeta();
            categoryMeta.setDisplayName("¬ß6" + categoryName);
            
            List<String> categoryLore = new ArrayList<>();
            categoryLore.add("¬ß7–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + categoryKey);
            categoryLore.add("");
            categoryLore.add("¬ße‚ö° –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å");
            categoryMeta.setLore(categoryLore);
            
            categoryItem.setItemMeta(categoryMeta);
            inventory.setItem(slot, categoryItem);
            
            slot += 2; 
            if (slot >= 44) break; 
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);
        
        
        player.playSound(player.getLocation(), org.bukkit.Sound.UI_BUTTON_CLICK, 0.7f, 1.2f);
        
        
        player.spawnParticle(org.bukkit.Particle.ENCHANTMENT_TABLE, 
            player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 1);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @return –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    @Override
    public String getGUITitle() {
        return "Condition Selection GUI for " + blockMaterial.name();
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     * @param event –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     */
    @Override
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;
        
        event.setCancelled(true); 
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        ItemMeta meta = clicked.getItemMeta();
        String displayName = meta.getDisplayName();
        
        
        for (Map.Entry<String, String> category : CATEGORY_NAMES.entrySet()) {
            String categoryName = category.getValue();
            if (displayName.contains(categoryName)) {
                
                openCategorySelectionGUI(category.getKey());
                return;
            }
        }
        
        
        List<String> lore = meta.getLore();
        if (lore != null) {
            
            String conditionId = null;
            for (String line : lore) {
                if (line.startsWith("¬ß8ID: ")) {
                    conditionId = line.substring(5).trim(); 
                    break;
                }
            }
            
            if (conditionId != null && !conditionId.isEmpty()) {
                selectCondition(conditionId);
            } else {
                player.sendMessage("¬ße‚Ñπ –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —É—Å–ª–æ–≤–∏—é –Ω–∏–∂–µ.");
                player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_PLING, 0.5f, 0.8f);
            }
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param category –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private void openCategorySelectionGUI(String category) {
        
        Inventory categoryInventory = Bukkit.createInventory(null, 54, "¬ß8" + CATEGORY_NAMES.getOrDefault(category, category));
        
        
        ItemStack borderItem = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta borderMeta = borderItem.getItemMeta();
        borderMeta.setDisplayName(" ");
        borderItem.setItemMeta(borderMeta);
        
        
        for (int i = 0; i < 54; i++) {
            if (i < 9 || i >= 45 || i % 9 == 0 || i % 9 == 8) {
                categoryInventory.setItem(i, borderItem);
            }
        }
        
        
        ItemStack backButton = new ItemStack(Material.ARROW);
        ItemMeta backMeta = backButton.getItemMeta();
        backMeta.setDisplayName("¬ßc‚¨Ö –ù–∞–∑–∞–¥");
        List<String> backLore = new ArrayList<>();
        backLore.add("¬ß7–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        backMeta.setLore(backLore);
        backButton.setItemMeta(backMeta);
        categoryInventory.setItem(49, backButton);
        
        
        loadConditionsForCategory(categoryInventory, category);
        
        
        player.openInventory(categoryInventory);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param inventory –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param category –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    private void loadConditionsForCategory(Inventory inventory, String category) {
        
        if (blockConfigService == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
            return;
        }
        
        
        List<String> availableConditions = blockConfigService.getActionsForMaterial(blockMaterial);
        
        
        List<String> categoryConditions = new ArrayList<>();
        for (String conditionId : availableConditions) {
            String conditionCategory = getConditionCategory(conditionId);
            if (category.equals(conditionCategory)) {
                categoryConditions.add(conditionId);
            }
        }
        
        
        int slot = 10;
        for (String conditionId : categoryConditions) {
            if (slot >= 44) break; 
            
            ItemStack conditionItem = createConditionItem(conditionId);
            inventory.setItem(slot, conditionItem);
            
            slot++;
            if (slot % 9 == 8) slot += 2; 
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—è
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     * @return ItemStack —ç–ª–µ–º–µ–Ω—Ç —É—Å–ª–æ–≤–∏—è
     */
    private ItemStack createConditionItem(String conditionId) {
        
        Material material = getConditionMaterial(conditionId);
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        
        
        meta.setDisplayName("¬ßa¬ßl" + getConditionDisplayName(conditionId));
        
        
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7" + getConditionDescription(conditionId));
        lore.add("");
        lore.add("¬ß8‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + getConditionCategoryName(conditionId));
        lore.add("");
        lore.add("¬ße‚ö° –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å");
        lore.add("¬ß8ID: " + conditionId);
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        meta.setLore(lore);
        
        item.setItemMeta(meta);
        return item;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É—Å–ª–æ–≤–∏—è
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     * @return –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private String getConditionCategoryName(String conditionId) {
        String category = getConditionCategory(conditionId);
        return CATEGORY_NAMES.getOrDefault(category, category);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É—Å–ª–æ–≤–∏—è
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     * @return –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª–æ–≤–∏—è
     */
    private String getConditionCategory(String conditionId) {
        switch (conditionId.toLowerCase()) {
            case "hasitem":
            case "removeitems":
            case "isplayerholding":
            case "hasarmor":
            case "checkplayerinventory":
                return "ITEM";
            case "isop":
            case "playergamemode":
            case "playerhealth":
            case "isriding":
            case "checkplayerstats":
                return "PLAYER";
            case "isinworld":
            case "worldtime":
            case "isnight":
            case "checkworldweather":
            case "isblocktype":
            case "isnearblock":
                return "WORLD";
            case "ifvarequals":
            case "ifvargreater":
            case "ifvarless":
            case "comparevariable":
            case "setvar":
            case "getvar":
            case "addvar":
            case "subvar":
            case "mulvar":
            case "divvar":
                return "VARIABLE";
            case "mobnear":
                return "ENTITY";
            case "checkserveronline":
                return "GAME";
            default:
                return "PLAYER";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É—Å–ª–æ–≤–∏—è
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     * @return –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É—Å–ª–æ–≤–∏—è
     */
    private Material getConditionMaterial(String conditionId) {
        
        switch (conditionId.toLowerCase()) {
            case "hasitem":
            case "checkplayerinventory":
                return Material.CHEST;
            case "isop":
                return Material.COMMAND_BLOCK;
            case "playergamemode":
                return Material.GRASS_BLOCK;
            case "playerhealth":
                return Material.GOLDEN_APPLE;
            case "isnight":
                return Material.BLACK_WOOL;
            case "isriding":
                return Material.SADDLE;
            case "isinworld":
                return Material.NETHER_STAR;
            case "worldtime":
                return Material.CLOCK;
            case "isnearblock":
                return Material.STONE;
            case "mobnear":
                return Material.ZOMBIE_SPAWN_EGG;
            case "ifvarequals":
            case "ifvargreater":
            case "ifvarless":
            case "comparevariable":
                return Material.COMPARATOR;
            case "checkplayerstats":
                return Material.OAK_SIGN;
            case "checkserveronline":
                return Material.REDSTONE_LAMP;
            case "checkworldweather":
                return Material.SNOWBALL;
            case "worldguardregioncheck":
                return Material.BRICKS;
            case "isblocktype":
                return Material.COBBLESTONE;
            case "isplayerholding":
                return Material.WOODEN_SWORD;
            case "hasarmor":
                return Material.DIAMOND_CHESTPLATE;
            default:
                return Material.STONE;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å–ª–æ–≤–∏—è
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     * @return –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å–ª–æ–≤–∏—è
     */
    private String getConditionDisplayName(String conditionId) {
        
        switch (conditionId.toLowerCase()) {
            case "hasitem": return "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç";
            case "isop": return "–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä";
            case "playergamemode": return "–ï—Å–ª–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã";
            case "playerhealth": return "–ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ";
            case "isnight": return "–ï—Å–ª–∏ –Ω–æ—á—å";
            case "isriding": return "–ï—Å–ª–∏ –µ–¥–µ—Ç";
            case "isinworld": return "–ï—Å–ª–∏ –≤ –º–∏—Ä–µ";
            case "worldtime": return "–ï—Å–ª–∏ –≤—Ä–µ–º—è –º–∏—Ä–∞";
            case "isnearblock": return "–ï—Å–ª–∏ —Ä—è–¥–æ–º –±–ª–æ–∫";
            case "mobnear": return "–ï—Å–ª–∏ —Ä—è–¥–æ–º –º–æ–±";
            case "ifvarequals": return "–ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞";
            case "ifvargreater": return "–ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–æ–ª—å—à–µ";
            case "ifvarless": return "–ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–Ω—å—à–µ";
            case "comparevariable": return "–°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            case "checkplayerstats": return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É";
            case "checkserveronline": return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä";
            case "checkworldweather": return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É";
            case "worldguardregioncheck": return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏–æ–Ω";
            case "isblocktype": return "–ï—Å–ª–∏ —Ç–∏–ø –±–ª–æ–∫–∞";
            case "isplayerholding": return "–ï—Å–ª–∏ –¥–µ—Ä–∂–∏—Ç";
            case "hasarmor": return "–ï—Å–ª–∏ –µ—Å—Ç—å –±—Ä–æ–Ω—è";
            case "setvar": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "getvar": return "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "addvar": return "–î–æ–±–∞–≤–∏—Ç—å –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "subvar": return "–í—ã—á–µ—Å—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            default: return conditionId;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     * @return –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
     */
    private String getConditionDescription(String conditionId) {
        
        switch (conditionId.toLowerCase()) {
            case "hasitem": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É –∏–≥—Ä–æ–∫–∞";
            case "isop": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º";
            case "playergamemode": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞";
            case "playerhealth": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞";
            case "isnight": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ—á—å –ª–∏ —Å–µ–π—á–∞—Å";
            case "isriding": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–¥–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫";
            case "isinworld": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –º–∏—Ä–µ";
            case "worldtime": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏—Ä–µ";
            case "isnearblock": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä—è–¥–æ–º –±–ª–æ–∫";
            case "mobnear": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä—è–¥–æ–º –º–æ–±";
            case "ifvarequals": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "ifvargreater": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–æ–ª—å—à–µ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case "ifvarless": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ–Ω—å—à–µ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case "comparevariable": return "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            case "checkplayerstats": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞";
            case "checkserveronline": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞";
            case "checkworldweather": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ –º–∏—Ä–µ";
            case "worldguardregioncheck": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–µ–≥–∏–æ–Ω–µ";
            case "isblocktype": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø –±–ª–æ–∫–∞";
            case "isplayerholding": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–µ—Ä–∂–∏—Ç –∏–≥—Ä–æ–∫";
            case "hasarmor": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –±—Ä–æ–Ω—è —É –∏–≥—Ä–æ–∫–∞";
            case "setvar": return "–°–æ–∑–¥–∞–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "getvar": return "–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "addvar": return "–î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "subvar": return "–í—ã—á–∏—Ç–∞–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            default: return "–£—Å–ª–æ–≤–∏–µ " + conditionId;
        }
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–ª—è –±–ª–æ–∫–∞
     * @param conditionId ID —É—Å–ª–æ–≤–∏—è
     */
    private void selectCondition(String conditionId) {
        
        BlockPlacementHandler placementHandler = plugin.getServiceRegistry().getBlockPlacementHandler();
        if (placementHandler == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤");
            return;
        }
        
        CodeBlock codeBlock = placementHandler.getCodeBlock(blockLocation);
        if (codeBlock == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        
        codeBlock.setAction(conditionId);
        
        
        var creativeWorld = plugin.getServiceRegistry().getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (creativeWorld != null) {
            plugin.getServiceRegistry().getWorldManager().saveWorld(creativeWorld);
        }
        
        
        player.sendMessage("¬ßa‚úì –£—Å–ª–æ–≤–∏–µ '" + getConditionDisplayName(conditionId) + "' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        player.sendMessage("¬ße–ö–ª–∏–∫–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ –±–ª–æ–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.");
        
        
        player.spawnParticle(org.bukkit.Particle.VILLAGER_HAPPY, 
            player.getLocation().add(0, 1, 0), 15, 0.5, 0.5, 0.5, 1);
        player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);
        
        
        player.closeInventory();
    }
}