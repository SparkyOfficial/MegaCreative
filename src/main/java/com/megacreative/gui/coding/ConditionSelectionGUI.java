package com.megacreative.gui.coding;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import com.megacreative.services.BlockConfigService;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.BlockPlacementHandler;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;

import java.util.*;

/**
 * üéÜ Enhanced Condition Selection GUI for Code Blocks
 * 
 * Provides a categorized interface for selecting conditions for code blocks.
 * Implements Reference System-style: universal blocks with GUI configuration.
 *
 * üéÜ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å Reference System: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI.
 *
 * üéÜ Erweiterte Bedingungsauswahl-GUI f√ºr Codebl√∂cke
 * 
 * Bietet eine kategorisierte Schnittstelle zur Auswahl von Bedingungen f√ºr Codebl√∂cke.
 * Implementiert Reference System-Stil: universelle Bl√∂cke mit GUI-Konfiguration.
 */
public class ConditionSelectionGUI implements GUIManager.ManagedGUIInterface {
    
    private final MegaCreative plugin;
    private final Player player;
    private final Location blockLocation;
    private final Material blockMaterial;
    private final Inventory inventory;
    private final GUIManager guiManager;
    private final BlockConfigService blockConfigService;
    
    /**
     * Initializes condition selection GUI
     * @param plugin Reference to main plugin
     * @param player Player who will use the interface
     * @param blockLocation Location of block to configure
     * @param blockMaterial Material of block to configure
     */
    public ConditionSelectionGUI(MegaCreative plugin, Player player, Location blockLocation, Material blockMaterial) {
        this.plugin = plugin;
        this.player = player;
        this.blockLocation = blockLocation;
        this.blockMaterial = blockMaterial;
        this.guiManager = plugin.getGuiManager();
        this.blockConfigService = plugin.getServiceRegistry().getBlockConfigService();
        
        // Create inventory with appropriate size
        this.inventory = Bukkit.createInventory(null, 54, "¬ß8–í—ã–±–æ—Ä —É—Å–ª–æ–≤–∏—è: " + getBlockDisplayName());
        
        setupInventory();
    }
    
    /**
     * Gets display name for block
     */
    private String getBlockDisplayName() {
        // Get display name from block config service
        BlockConfigService.BlockConfig config = blockConfigService.getBlockConfigByMaterial(blockMaterial);
        return config != null ? config.getDisplayName() : blockMaterial.name();
    }
    
    /**
     * Sets up the GUI inventory
     */
    private void setupInventory() {
        inventory.clear();
        
        // Add background glass panes
        ItemStack glassPane = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta glassMeta = glassPane.getItemMeta();
        glassMeta.setDisplayName(" ");
        glassPane.setItemMeta(glassMeta);
        
        // Fill border slots
        for (int i = 0; i < 54; i++) {
            if (i < 9 || i >= 45 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, glassPane);
            }
        }
        
        // Add info item
        ItemStack infoItem = new ItemStack(blockMaterial);
        ItemMeta infoMeta = infoItem.getItemMeta();
        infoMeta.setDisplayName("¬ße¬ßl" + getBlockDisplayName());
        List<String> infoLore = new ArrayList<>();
        infoLore.add("¬ß7–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞");
        infoLore.add("");
        infoLore.add("¬ßa–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É—Å–ª–æ–≤–∏–µ —á—Ç–æ–±—ã");
        infoLore.add("¬ß–∞–Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –±–ª–æ–∫—É");
        infoLore.add("");
        infoLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        infoLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        infoMeta.setLore(infoLore);
        infoItem.setItemMeta(infoMeta);
        inventory.setItem(4, infoItem);
        
        // Load available conditions for this block type
        loadAvailableConditions();
    }
    
    /**
     * Loads available conditions for this block type
     */
    private void loadAvailableConditions() {
        // Debug logging
        player.sendMessage("¬ßeDebug: Checking material " + blockMaterial.name());
        
        // Get available conditions for this block material using BlockConfigService
        List<String> availableConditions = blockConfigService.getActionsForMaterial(blockMaterial);
        
        player.sendMessage("¬ßeDebug: Available conditions count: " + (availableConditions != null ? availableConditions.size() : "null"));
        
        // üîß FIX: Enhanced condition loading logic
        if (availableConditions == null || availableConditions.isEmpty()) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –±–ª–æ–∫–∞ " + blockMaterial.name());
            
            // Try to get all block configs for debugging
            var allConfigs = blockConfigService.getAllBlockConfigs();
            player.sendMessage("¬ßeDebug: Total block configs: " + allConfigs.size());
            
            // Check if this material is recognized as a code block
            boolean isCodeBlock = blockConfigService.isCodeBlock(blockMaterial);
            player.sendMessage("¬ßeDebug: Is code block: " + isCodeBlock);
            
            // Try to get block config by material
            var blockConfig = blockConfigService.getBlockConfigByMaterial(blockMaterial);
            if (blockConfig != null) {
                player.sendMessage("¬ßeDebug: Block config found: " + blockConfig.getId() + " - " + blockConfig.getDisplayName());
                player.sendMessage("¬ßeDebug: Block type: " + blockConfig.getType());
                player.sendMessage("¬ßeDebug: Default condition: " + blockConfig.getDefaultAction());
                
                // üîß FIX: Load conditions from the block configuration's actions list
                List<String> conditions = new ArrayList<>();
                
                // First, try to get actions directly from the block config
                if (blockConfig.getParameters().containsKey("actions")) {
                    // This is for backward compatibility with old config format
                    Object actionsObj = blockConfig.getParameters().get("actions");
                    if (actionsObj instanceof List) {
                        conditions.addAll((List<String>) actionsObj);
                        player.sendMessage("¬ßaDebug: Found conditions from block config parameters: " + conditions.size());
                    }
                }
                
                // Try to get actions from the YAML configuration file
                // Conditions are stored in the same "actions" list in the config
                conditions = blockConfigService.getActionsForMaterial(blockMaterial);
                
                // Fallback to getting conditions from material mapping
                if (conditions.isEmpty()) {
                    conditions = blockConfigService.getActionsForMaterial(blockMaterial);
                }
                
                if (conditions != null && !conditions.isEmpty()) {
                    availableConditions = conditions;
                    player.sendMessage("¬ßaDebug: Found conditions after re-check: " + conditions.size());
                }
            } else {
                player.sendMessage("¬ßeDebug: No block config found for material");
                
                // List all available materials for debugging
                Set<Material> codeBlockMaterials = blockConfigService.getCodeBlockMaterials();
                player.sendMessage("¬ßeDebug: Available code block materials (" + codeBlockMaterials.size() + "):");
                int count = 0;
                for (Material mat : codeBlockMaterials) {
                    player.sendMessage("¬ß7- " + mat.name());
                    count++;
                    if (count >= 10) {
                        player.sendMessage("¬ß7... and " + (codeBlockMaterials.size() - 10) + " more");
                        break;
                    }
                }
            }
            
            // If we still don't have conditions, use default conditions as fallback
            // üîß FIX: Use only appropriate default conditions for this block type
            if (availableConditions == null || availableConditions.isEmpty()) {
                // üîß FIX: Add default conditions based on block type
                availableConditions = new ArrayList<>();
                
                // Get the block config to determine appropriate default conditions
                var defaultBlockConfig = blockConfigService.getBlockConfigByMaterial(blockMaterial);
                if (defaultBlockConfig != null) {
                    String blockType = defaultBlockConfig.getType();
                    
                    // Add appropriate default conditions based on block type
                    switch (blockType) {
                        case "CONDITION":
                            // For variable condition blocks (OBSIDIAN), add variable-related default conditions
                            if (blockMaterial == Material.OBSIDIAN) {
                                availableConditions.add("ifVarEquals");
                                availableConditions.add("ifVarGreater");
                                availableConditions.add("ifVarLess");
                                player.sendMessage("¬ß6Using variable condition defaults as fallback");
                            } 
                            // For other condition blocks, use general defaults
                            else {
                                availableConditions.add("hasItem");
                                availableConditions.add("isOp");
                                availableConditions.add("hasPermission");
                                player.sendMessage("¬ß6Using general condition defaults as fallback");
                            }
                            break;
                        default:
                            availableConditions.add("hasItem");
                            availableConditions.add("isOp");
                            availableConditions.add("hasPermission");
                            player.sendMessage("¬ß6Using general condition defaults as fallback");
                            break;
                    }
                } else {
                    // Fallback to general defaults
                    availableConditions.add("hasItem");
                    availableConditions.add("isOp");
                    availableConditions.add("hasPermission");
                    player.sendMessage("¬ß6Using general condition defaults as fallback");
                }
            }
        }
        
        // üéÜ ENHANCED: Group conditions by category for better organization
        Map<String, List<String>> categorizedConditions = categorizeConditions(availableConditions);
        
        // Create condition items with visual categorization
        int slot = 10; // Start from first available slot
        
        for (Map.Entry<String, List<String>> category : categorizedConditions.entrySet()) {
            String categoryName = category.getKey();
            List<String> conditionsInCategory = category.getValue();
            
            // Add category separator if we have multiple categories
            if (categorizedConditions.size() > 1) {
                ItemStack categoryItem = createCategoryItem(categoryName, conditionsInCategory.size());
                if (slot < 44) {
                    inventory.setItem(slot, categoryItem);
                    slot++;
                    if (slot % 9 == 8) slot += 2; // Skip border
                }
            }
            
            // Add conditions in this category
            for (String conditionId : conditionsInCategory) {
                if (slot >= 44) break; // Don't go into border area
                
                ItemStack conditionItem = createConditionItem(conditionId, categoryName);
                inventory.setItem(slot, conditionItem);
                
                // Move to next slot, skipping border slots
                slot++;
                if (slot % 9 == 8) slot += 2; // Skip right border and left border of next row
            }
            
            // Add spacing between categories
            if (slot < 44 && categorizedConditions.size() > 1) {
                slot++;
                if (slot % 9 == 8) slot += 2;
            }
        }
    }
    
    /**
     * üéÜ ENHANCED: Categorizes conditions for better organization
     * Implements reference system-style: universal blocks with GUI configuration
     */
    private Map<String, List<String>> categorizeConditions(List<String> conditions) {
        Map<String, List<String>> categories = new LinkedHashMap<>();
        
        for (String condition : conditions) {
            String category = getConditionCategory(condition);
            categories.computeIfAbsent(category, k -> new ArrayList<>()).add(condition);
        }
        
        return categories;
    }
    
    /**
     * üéÜ ENHANCED: Get category for a condition
     * Implements reference system-style: universal blocks with GUI configuration
     */
    private String getConditionCategory(String conditionId) {
        switch (conditionId.toLowerCase()) {
            case "isop":
            case "haspermission":
            case "playergamemode":
                return "üë§ –ò–≥—Ä–æ–∫";
            
            case "hasitem":
            case "isplayerholding":
            case "hasarmor":
                return "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å";
            
            case "isnearblock":
            case "isblocktype":
                return "üß± –ë–ª–æ–∫–∏";
            
            case "mobnear":
            case "isnearentity":
            case "isriding":
                return "üßü –°—É—â–µ—Å—Ç–≤–∞";
            
            case "isnight":
            case "isinday":
            case "israining":
            case "worldtime":
                return "üåç –ú–∏—Ä –∏ –≤—Ä–µ–º—è";
            
            case "ifvarequals":
            case "ifvargreater":
            case "ifvarless":
            case "comparevariable":
                return "üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            
            case "checkplayerstats":
            case "checkplayerinventory":
                return "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞";
            
            case "checkserveronline":
            case "checkworldweather":
                return "üåê –°–µ—Ä–≤–µ—Ä";
            
            case "worldguardregioncheck":
                return "üõ°Ô∏è –ó–∞—â–∏—Ç–∞";
            
            default:
                return "üîß –û—Å–Ω–æ–≤–Ω—ã–µ";
        }
    }
    
    /**
     * üéÜ ENHANCED: Create category header item
     * Implements reference system-style: universal blocks with GUI configuration
     */
    private ItemStack createCategoryItem(String categoryName, int conditionCount) {
        ItemStack item = new ItemStack(Material.ORANGE_STAINED_GLASS_PANE);
        ItemMeta meta = item.getItemMeta();
        
        meta.setDisplayName("¬ße¬ßl" + categoryName);
        
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7–î–æ—Å—Ç—É–ø–Ω–æ —É—Å–ª–æ–≤–∏–π: " + conditionCount);
        lore.add("¬ß8–ö–∞—Ç–µ–≥–æ—Ä–∏—è");
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        meta.setLore(lore);
        
        item.setItemMeta(meta);
        return item;
    }
    
    /**
     * üéÜ ENHANCED: Create condition item
     * Implements reference system-style: universal blocks with GUI configuration
     */
    private ItemStack createConditionItem(String conditionId, String category) {
        // Create appropriate material for condition type
        Material material = getConditionMaterial(conditionId);
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        
        // Set display name
        meta.setDisplayName("¬ßa¬ßl" + getConditionDisplayName(conditionId));
        
        // Set lore with description and category
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7" + getConditionDescription(conditionId));
        lore.add("");
        lore.add("¬ß8‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category);
        lore.add("");
        lore.add("¬ße‚ö° –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å");
        lore.add("¬ß8ID: " + conditionId);
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        meta.setLore(lore);
        
        item.setItemMeta(meta);
        return item;
    }
    
    /**
     * Gets material for condition
     */
    private Material getConditionMaterial(String conditionId) {
        // Return appropriate materials based on condition type
        switch (conditionId.toLowerCase()) {
            case "isop":
            case "haspermission":
                return Material.GOLD_INGOT;
            case "hasitem":
            case "isplayerholding":
                return Material.CHEST;
            case "isnearblock":
            case "isblocktype":
                return Material.STONE;
            case "mobnear":
            case "isnearentity":
                return Material.ZOMBIE_HEAD;
            case "playergamemode":
                return Material.GRASS_BLOCK;
            case "playerhealth":
                return Material.RED_DYE;
            case "isinday":
            case "isnight":
                return Material.CLOCK;
            case "israining":
                return Material.WATER_BUCKET;
            case "worldtime":
                return Material.SUNFLOWER;
            case "ifvarequals":
            case "ifvargreater":
            case "ifvarless":
            case "comparevariable":
                return Material.NAME_TAG;
            case "hasarmor":
                return Material.DIAMOND_CHESTPLATE;
            case "isriding":
                return Material.SADDLE;
            case "checkplayerstats":
                return Material.PAPER;
            case "checkplayerinventory":
                return Material.ENDER_CHEST;
            case "checkserveronline":
                return Material.COMMAND_BLOCK;
            case "checkworldweather":
                return Material.SNOWBALL;
            case "worldguardregioncheck":
                return Material.BARRIER;
            default:
                return Material.STONE;
        }
    }
    
    /**
     * Gets display name for condition
     */
    private String getConditionDisplayName(String conditionId) {
        // Return user-friendly names for conditions
        switch (conditionId.toLowerCase()) {
            case "isop": return "–ò–≥—Ä–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä";
            case "haspermission": return "–ï—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ";
            case "isnearblock": return "–†—è–¥–æ–º —Å –±–ª–æ–∫–æ–º";
            case "mobnear": return "–†—è–¥–æ–º —Å –º–æ–±–æ–º";
            case "playergamemode": return "–†–µ–∂–∏–º –∏–≥—Ä—ã";
            case "playerhealth": return "–ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞";
            case "hasitem": return "–ï—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç";
            case "isinday": return "–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è";
            case "isnight": return "–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è";
            case "israining": return "–ò–¥–µ—Ç –¥–æ–∂–¥—å";
            case "worldtime": return "–í—Ä–µ–º—è –º–∏—Ä–∞";
            case "ifvarequals": return "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞";
            case "ifvargreater": return "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–æ–ª—å—à–µ";
            case "ifvarless": return "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–Ω—å—à–µ";
            case "comparevariable": return "–°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            case "isblocktype": return "–¢–∏–ø –±–ª–æ–∫–∞";
            case "isplayerholding": return "–ò–≥—Ä–æ–∫ –¥–µ—Ä–∂–∏—Ç";
            case "isnearentity": return "–†—è–¥–æ–º —Å —Å—É—â–µ—Å—Ç–≤–æ–º";
            case "hasarmor": return "–ï—Å—Ç—å –±—Ä–æ–Ω—è";
            case "isriding": return "–ò–≥—Ä–æ–∫ –µ–¥–µ—Ç";
            case "checkplayerstats": return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É";
            case "checkplayerinventory": return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å";
            case "checkserveronline": return "–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω";
            case "checkworldweather": return "–ü–æ–≥–æ–¥–∞ –≤ –º–∏—Ä–µ";
            case "worldguardregioncheck": return "–í —Ä–µ–≥–∏–æ–Ω–µ WorldGuard";
            default: return conditionId;
        }
    }
    
    /**
     * Gets description for condition
     */
    private String getConditionDescription(String conditionId) {
        // Return descriptions for conditions
        switch (conditionId.toLowerCase()) {
            case "isop": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º";
            case "haspermission": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ";
            case "isnearblock": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ä—è–¥–æ–º —Å –±–ª–æ–∫–æ–º";
            case "mobnear": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä—è–¥–æ–º –º–æ–±";
            case "playergamemode": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞";
            case "playerhealth": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞";
            case "hasitem": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç";
            case "isinday": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –¥–µ–Ω—å";
            case "isnight": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –Ω–æ—á—å";
            case "israining": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å";
            case "worldtime": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏—Ä–µ";
            case "ifvarequals": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–≤–Ω–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–Ω–∞—á–µ–Ω–∏—é";
            case "ifvargreater": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–æ–ª—å—à–µ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–Ω–∞—á–µ–Ω–∏—è";
            case "ifvarless": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–µ–Ω—å—à–µ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–Ω–∞—á–µ–Ω–∏—è";
            case "comparevariable": return "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            case "isblocktype": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø –±–ª–æ–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏";
            case "isplayerholding": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–µ–¥–º–µ—Ç";
            case "isnearentity": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ä—è–¥–æ–º —Å—É—â–µ—Å—Ç–≤–æ";
            case "hasarmor": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞–¥–µ—Ç–∞ –ª–∏ –±—Ä–æ–Ω—è";
            case "isriding": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ–¥–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–µ";
            case "checkplayerstats": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞";
            case "checkplayerinventory": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞";
            case "checkserveronline": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞";
            case "checkworldweather": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ –º–∏—Ä–µ";
            case "worldguardregioncheck": return "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–µ–≥–∏–æ–Ω–µ WorldGuard";
            default: return "–£—Å–ª–æ–≤–∏–µ " + conditionId;
        }
    }
    
    /**
     * Opens the GUI for the player
     * Implements reference system-style: universal blocks with GUI configuration
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);
        
        // Audio feedback when opening GUI
        player.playSound(player.getLocation(), org.bukkit.Sound.UI_BUTTON_CLICK, 0.7f, 1.2f);
        
        // Add visual effects for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.ENCHANTMENT_TABLE, 
            player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 1);
    }
    
    @Override
    /**
     * Gets the GUI title
     */
    public String getGUITitle() {
        return "Condition Selection GUI for " + blockMaterial.name();
    }
    
    @Override
    /**
     * Handles inventory click events
     */
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;
        
        event.setCancelled(true); // Cancel all clicks by default
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        ItemMeta meta = clicked.getItemMeta();
        List<String> lore = meta.getLore();
        if (lore == null) return;
        
        // Find condition ID in lore
        String conditionId = null;
        boolean isCategoryItem = false;
        for (String line : lore) {
            if (line.startsWith("¬ß8ID: ")) {
                conditionId = line.substring(5); // Remove "¬ß8ID: " prefix
                break;
            }
            if (line.contains("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")) {
                isCategoryItem = true;
                break;
            }
        }
        
        if (isCategoryItem) {
            // üéÜ ENHANCED: Handle category item click with helpful message
            player.sendMessage("¬ße‚Ñπ –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —É—Å–ª–æ–≤–∏—é –Ω–∏–∂–µ.");
            player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_PLING, 0.5f, 0.8f);
            return;
        }
        
        if (conditionId != null) {
            selectCondition(conditionId);
        }
    }
    
    /**
     * üéÜ ENHANCED: Select condition for the block
     * Implements reference system-style: universal blocks with GUI configuration
     */
    private void selectCondition(String conditionId) {
        // Get the code block
        BlockPlacementHandler placementHandler = plugin.getBlockPlacementHandler();
        if (placementHandler == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤");
            return;
        }
        
        CodeBlock codeBlock = placementHandler.getCodeBlock(blockLocation);
        if (codeBlock == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        // Set the condition
        codeBlock.setAction(conditionId);
        
        // Save the world
        var creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (creativeWorld != null) {
            plugin.getWorldManager().saveWorld(creativeWorld);
        }
        
        // Notify player
        player.sendMessage("¬ßa‚úì –£—Å–ª–æ–≤–∏–µ '" + getConditionDisplayName(conditionId) + "' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        player.sendMessage("¬ße–ö–ª–∏–∫–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ –±–ª–æ–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.");
        
        // Add visual feedback for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.VILLAGER_HAPPY, 
            player.getLocation().add(0, 1, 0), 15, 0.5, 0.5, 0.5, 1);
        player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);
        
        // Close this GUI
        player.closeInventory();
    }
    
    @Override
    /**
     * Handles inventory close events
     */
    public void onInventoryClose(InventoryCloseEvent event) {
        // Optional cleanup when GUI is closed
        // GUIManager handles automatic unregistration
    }
    
    @Override
    /**
     * Performs resource cleanup when interface is closed
     */
    public void onCleanup() {
        // Called when GUI is being cleaned up by GUIManager
        // No special cleanup needed for this GUI
    }
}