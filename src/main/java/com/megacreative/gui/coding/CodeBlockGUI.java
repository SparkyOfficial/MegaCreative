package com.megacreative.gui.coding;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import com.megacreative.services.BlockConfigService;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.BlockPlacementHandler;
import com.megacreative.coding.values.DataValue;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;

import java.util.*;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

/**
 * üéÜ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô CodeBlockGUI - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† –ò–ù–¢–ï–†–§–ï–ô–°–ê
 *
 * –≠—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö GUI –∫–ª–∞—Å—Å–æ–≤
 * –æ–¥–Ω–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º. GUI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –∏–∑ coding_blocks.yml, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≥–∏–±–∫–æ–π –∏ —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–π.
 *
 * üéÜ UNIVERSAL CodeBlockGUI - DYNAMIC INTERFACE GENERATOR
 *
 * This is a revolutionary system that replaces multiple specialized GUI classes
 * with one universal solution. GUI is generated dynamically based on configuration
 * from coding_blocks.yml, making the system maximally flexible and extensible.
 *
 * üéÜ UNIVERSALER CodeBlockGUI - DYNAMISCHER INTERFACE GENERATOR
 *
 * Dies ist ein revolution√§res System, das mehrere spezialisierte GUI-Klassen
 * durch eine universelle L√∂sung ersetzt. GUI wird dynamisch basierend auf Konfiguration
 * aus coding_blocks.yml generiert, was das System maximal flexibel und erweiterbar macht.
 */
public class CodeBlockGUI implements GUIManager.ManagedGUIInterface {

    private final MegaCreative plugin;
    private final Player player;
    private final Location blockLocation;
    private final String blockId; 
    private final String blockType; 
    private final Inventory inventory;
    private final GUIManager guiManager;
    private final BlockConfigService blockConfigService;

    
    private boolean hasUnsavedChanges = false;
    
    
    
    
    private final Map<String, String> blockParameters = new HashMap<>();

    
    private static final Map<String, String> TYPE_COLORS = new HashMap<>();
    private static final Map<String, Material> TYPE_MATERIALS = new HashMap<>();

    static {
        
        TYPE_COLORS.put("EVENT", "¬ße");      
        TYPE_COLORS.put("ACTION", "¬ßa");     
        TYPE_COLORS.put("CONDITION", "¬ß6");   
        TYPE_COLORS.put("CONTROL", "¬ßc");    
        TYPE_COLORS.put("FUNCTION", "¬ßd");   
        TYPE_COLORS.put("VARIABLE", "¬ßb");   

        
        TYPE_MATERIALS.put("EVENT", Material.NETHER_STAR);
        TYPE_MATERIALS.put("ACTION", Material.REDSTONE);
        TYPE_MATERIALS.put("CONDITION", Material.COMPARATOR);
        TYPE_MATERIALS.put("CONTROL", Material.REPEATER);
        TYPE_MATERIALS.put("FUNCTION", Material.WRITABLE_BOOK);
        TYPE_MATERIALS.put("VARIABLE", Material.NAME_TAG);
    }

    /**
     * üéÜ –ö–û–ù–°–¢–†–£–ö–¢–û–† –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û GUI
     * @param plugin –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
     * @param player –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     * @param blockLocation –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param blockId ID –±–ª–æ–∫–∞ (actionId, eventId, conditionId –∏ —Ç.–¥.)
     * @param blockType –¢–∏–ø –±–ª–æ–∫–∞ (EVENT, ACTION, CONDITION, CONTROL, FUNCTION, VARIABLE)
     */
    public CodeBlockGUI(MegaCreative plugin, Player player, Location blockLocation, String blockId, String blockType) {
        this.plugin = plugin;
        this.player = player;
        this.blockLocation = blockLocation;
        this.blockId = blockId;
        this.blockType = blockType;
        this.guiManager = plugin.getServiceRegistry().getGuiManager();

        
        // Condition plugin != null is always true
        // Removed redundant null check since plugin is already checked in constructor
        this.blockConfigService = plugin.getServiceRegistry().getBlockConfigService();

        
        String guiTitle = createGUITitle();
        this.inventory = Bukkit.createInventory(null, calculateInventorySize(), guiTitle);

        setupInventory();
    }

    /**
     * üéÜ –°–û–ó–î–ê–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–ê GUI
     */
    private String createGUITitle() {
        String color = TYPE_COLORS.getOrDefault(blockType, "¬ßf");
        String typeName = getLocalizedTypeName(blockType);
        String blockName = getBlockDisplayName(blockId);

        return String.format("¬ß8–ù–∞—Å—Ç—Ä–æ–π–∫–∞ %s%s: %s", color, typeName, blockName);
    }

    /**
     * üéÜ –ü–û–õ–£–ß–ï–ù–ò–ï –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–û–ì–û –ò–ú–ï–ù–ò –¢–ò–ü–ê –ë–õ–û–ö–ê
     */
    private String getLocalizedTypeName(String type) {
        switch (type) {
            case "EVENT": return "–°–æ–±—ã—Ç–∏—è";
            case "ACTION": return "–î–µ–π—Å—Ç–≤–∏—è";
            case "CONDITION": return "–£—Å–ª–æ–≤–∏—è";
            case "CONTROL": return "–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è";
            case "FUNCTION": return "–§—É–Ω–∫—Ü–∏–∏";
            case "VARIABLE": return "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            default: return type;
        }
    }

    /**
     * üéÜ –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ê–ï–ú–û–ì–û –ò–ú–ï–ù–ò –ë–õ–û–ö–ê
     */
    private String getBlockDisplayName(String blockId) {
        if (blockConfigService != null) {
            BlockConfigService.BlockConfig config = blockConfigService.getBlockConfig(blockId);
            if (config != null) {
                return config.getDisplayName();
            }
        }

        
        switch (blockId.toLowerCase()) {
            case "sendmessage": return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ";
            case "teleport": return "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å";
            case "giveitem": return "–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç";
            case "onjoin": return "–ü—Ä–∏ –≤—Ö–æ–¥–µ";
            case "onchat": return "–ü—Ä–∏ —á–∞—Ç–µ";
            case "hasitem": return "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç";
            case "ifvarequals": return "–ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞";
            default: return blockId;
        }
    }

    /**
     * üéÜ –†–ê–°–ß–ï–¢ –†–ê–ó–ú–ï–†–ê –ò–ù–í–ï–ù–¢–ê–†–Ø
     */
    private int calculateInventorySize() {
        
        var actionConfigurations = blockConfigService.getActionConfigurations();
        if (actionConfigurations != null) {
            var actionConfig = actionConfigurations.getConfigurationSection(blockId);
            if (actionConfig != null && actionConfig.contains("slots")) {
                
                var slotsSection = actionConfig.getConfigurationSection("slots");
                if (slotsSection != null) {
                    Set<String> slotKeys = slotsSection.getKeys(false);
                    int maxSlots = slotKeys.stream().mapToInt(Integer::parseInt).max().orElse(0);

                    
                    int requiredRows = (int) Math.ceil((maxSlots + 10) / 9.0); 
                    return Math.max(27, Math.min(54, requiredRows * 9));
                }
            }
        }

        return 45; 
    }

    /**
     * üéÜ –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–í–ï–ù–¢–ê–†–Ø
     */
    private void setupInventory() {
        inventory.clear();

        
        addDecorativeBorder();

        
        addInfoItem();

        
        loadActionConfiguration();

        
        loadExistingParameters();

        
        addControlButtons();
    }

    /**
     * üéÜ –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ï–ö–û–†–ê–¢–ò–í–ù–û–ô –†–ê–ú–ö–ò
     */
    private void addDecorativeBorder() {
        Material borderMaterial = Material.BLACK_STAINED_GLASS_PANE;
        ItemStack borderItem = new ItemStack(borderMaterial);
        ItemMeta borderMeta = borderItem.getItemMeta();
        borderMeta.setDisplayName(" ");
        borderItem.setItemMeta(borderMeta);

        
        for (int i = 0; i < inventory.getSize(); i++) {
            if (i < 9 || i >= inventory.getSize() - 9 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, borderItem);
            }
        }
    }

    /**
     * üéÜ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê
     */
    private void addInfoItem() {
        Material typeMaterial = TYPE_MATERIALS.getOrDefault(blockType, Material.STONE);
        ItemStack infoItem = new ItemStack(typeMaterial);
        ItemMeta infoMeta = infoItem.getItemMeta();
        infoMeta.setDisplayName(createGUITitle());

        List<String> infoLore = new ArrayList<>();
        infoLore.add("¬ß7–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–ª–æ–∫–∞");
        infoLore.add("");
        infoLore.add("¬ßa–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–ª–æ—Ç—ã");
        infoLore.add("¬ßa–¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
        infoLore.add("");
        infoLore.add("¬ßf‚ú® –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        infoLore.add("¬ß7‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è");
        infoLore.add("¬ß7‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏");
        infoLore.add("¬ß7‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏");
        infoMeta.setLore(infoLore);

        infoItem.setItemMeta(infoMeta);
        inventory.setItem(4, infoItem);
    }

    /**
     * üéÜ –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –î–ï–ô–°–¢–í–ò–Ø
     */
    private void loadActionConfiguration() {
        var actionConfigurations = blockConfigService.getActionConfigurations();
        if (actionConfigurations == null) {
            player.sendMessage("¬ße–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è " + blockId);
            setupGenericSlots();
            return;
        }

        var actionConfig = actionConfigurations.getConfigurationSection(blockId);
        if (actionConfig == null) {
            player.sendMessage("¬ße–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è " + blockId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            setupGenericSlots();
            return;
        }

        
        if (actionConfig.contains("slots")) {
            var slotsSection = actionConfig.getConfigurationSection("slots");
            if (slotsSection != null) {
                Set<String> slotKeys = slotsSection.getKeys(false);

                for (String slotKey : slotKeys) {
                    try {
                        int slot = Integer.parseInt(slotKey);
                        var slotConfig = slotsSection.getConfigurationSection(slotKey);

                        if (slotConfig != null) {
                            createSlotItem(slot, slotConfig);
                        }
                    } catch (NumberFormatException e) {
                        player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞: " + slotKey);
                    }
                }
            }
        } else {
            
            setupGenericSlots();
        }
    }

    /**
     * üéÜ –°–û–ó–î–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–ê –°–õ–û–¢–ê
     */
    private void createSlotItem(int slot, org.bukkit.configuration.ConfigurationSection slotConfig) {
        String name = slotConfig.getString("name", "¬ßc–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä");
        String description = slotConfig.getString("description", "¬ß7–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
        String placeholderItemName = slotConfig.getString("placeholder_item", "PAPER");
        String slotName = slotConfig.getString("slot_name", "param_" + slot);
        String validation = slotConfig.getString("validation", "");
        String hint = slotConfig.getString("hint", "");

        
        Material placeholderMaterial = getMaterialByName(placeholderItemName);

        ItemStack slotItem = new ItemStack(placeholderMaterial);
        ItemMeta slotMeta = slotItem.getItemMeta();
        slotMeta.setDisplayName(name);

        List<String> slotLore = new ArrayList<>();
        slotLore.add(description);

        if (!validation.isEmpty()) {
            slotLore.add("¬ß8–í–∞–ª–∏–¥–∞—Ü–∏—è: " + validation);
        }

        if (!hint.isEmpty()) {
            slotLore.add("¬ß7–ü–æ–¥—Å–∫–∞–∑–∫–∞: " + hint);
        }

        slotLore.add("");
        slotLore.add("¬ße–ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å");

        slotMeta.setLore(slotLore);
        slotItem.setItemMeta(slotMeta);

        inventory.setItem(slot, slotItem);

        
    }

    /**
     * üéÜ –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–û–í–´–• –°–õ–û–¢–û–í (FALLBACK)
     */
    private void setupGenericSlots() {
        
        createGenericParameterSlot(10, "–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä", "PAPER", "main_param");
        createGenericParameterSlot(12, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", "PAPER", "extra_param");
    }

    /**
     * üéÜ –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –ü–ê–†–ê–ú–ï–¢–†–ê
     */
    private void createGenericParameterSlot(int slot, String name, String material, String slotName) {
        Material mat = getMaterialByName(material);
        ItemStack item = new ItemStack(mat);
        ItemMeta meta = item.getItemMeta();
        meta.setDisplayName(name);

        List<String> lore = new ArrayList<>();
        lore.add("¬ß7–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä");
        lore.add("");
        lore.add("¬ße–ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å");
        meta.setLore(lore);

        item.setItemMeta(meta);
        inventory.setItem(slot, item);
    }

    /**
     * üéÜ –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê –ü–û –ò–ú–ï–ù–ò
     */
    private Material getMaterialByName(String name) {
        try {
            return Material.valueOf(name.toUpperCase());
        } catch (IllegalArgumentException e) {
            return Material.PAPER; 
        }
    }

    /**
     * üéÜ –ó–ê–ì–†–£–ó–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í
     */
    private void loadExistingParameters() {
        if (plugin.getServiceRegistry().getBlockPlacementHandler() == null) {
            return;
        }

        CodeBlock codeBlock = plugin.getServiceRegistry().getBlockPlacementHandler().getCodeBlock(blockLocation);
        if (codeBlock != null) {
            
            Map<String, DataValue> parameters = codeBlock.getParameters();
            if (parameters != null) {
                
                for (Map.Entry<String, DataValue> entry : parameters.entrySet()) {
                    blockParameters.put(entry.getKey(), entry.getValue().asString());
                }
            }
        }
    }

    /**
     * üéÜ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø
     */
    private void addControlButtons() {
        
        ItemStack backButton = new ItemStack(Material.ARROW);
        ItemMeta backMeta = backButton.getItemMeta();
        backMeta.setDisplayName("¬ßc‚¨Ö –ù–∞–∑–∞–¥");
        List<String> backLore = new ArrayList<>();
        backLore.add("¬ß7–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π");
        backMeta.setLore(backLore);
        backButton.setItemMeta(backMeta);
        inventory.setItem(inventory.getSize() - 5, backButton);

        
        ItemStack saveButton = new ItemStack(Material.EMERALD_BLOCK);
        ItemMeta saveMeta = saveButton.getItemMeta();
        saveMeta.setDisplayName("¬ßa‚úì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å");
        List<String> saveLore = new ArrayList<>();
        saveLore.add("¬ß7–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
        if (hasUnsavedChanges) {
            saveLore.add("¬ße–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
        }
        saveMeta.setLore(saveLore);
        saveButton.setItemMeta(saveMeta);
        inventory.setItem(inventory.getSize() - 4, saveButton);
    }

    /**
     * üéÜ –û–¢–ö–†–´–¢–ò–ï GUI
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);

        
        player.playSound(player.getLocation(), org.bukkit.Sound.UI_BUTTON_CLICK, 0.7f, 1.2f);

        
        player.spawnParticle(org.bukkit.Particle.ENCHANTMENT_TABLE,
            player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 1);
    }

    @Override
    public String getGUITitle() {
        return createGUITitle();
    }

    @Override
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;

        event.setCancelled(true);

        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;

        ItemMeta meta = clicked.getItemMeta();
        String displayName = meta.getDisplayName();

        
        if (displayName.contains("–ù–∞–∑–∞–¥")) {
            handleBackButton();
            return;
        }

        
        if (displayName.contains("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")) {
            handleSaveButton();
            return;
        }

        
        handleParameterSlotClick(event.getSlot(), clicked);
    }

    /**
     * üéÜ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î"
     */
    private void handleBackButton() {
        if (hasUnsavedChanges) {
            
            player.sendMessage("¬ße‚ö† –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!");
            player.sendMessage("¬ß7–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.");
            return;
        }

        
        ActionSelectionGUI selectionGUI = new ActionSelectionGUI(plugin, player, blockLocation,
            getBlockMaterial());
        selectionGUI.open();
    }

    /**
     * üéÜ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–°–û–•–†–ê–ù–ò–¢–¨"
     */
    private void handleSaveButton() {
        if (saveParameters()) {
            hasUnsavedChanges = false;
            player.sendMessage("¬ßa‚úì –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");

            
            updateBlockSign();

            
            player.spawnParticle(org.bukkit.Particle.VILLAGER_HAPPY,
                player.getLocation().add(0, 1, 0), 15, 0.5, 0.5, 0.5, 1);
            player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);

            
            addControlButtons();
        }
    }

    /**
     * üéÜ –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–ê –ü–û –°–õ–û–¢–£ –ü–ê–†–ê–ú–ï–¢–†–ê
     */
    private void handleParameterSlotClick(int slot, ItemStack clicked) {
        
        
        player.sendMessage("¬ß7–ö–ª–∏–∫ –ø–æ —Å–ª–æ—Ç—É " + slot + ": " + clicked.getItemMeta().getDisplayName());

        
        
    }

    /**
     * üéÜ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í
     */
    private boolean saveParameters() {
        try {
            if (plugin.getServiceRegistry().getBlockPlacementHandler() == null) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤");
                return false;
            }

            CodeBlock codeBlock = plugin.getServiceRegistry().getBlockPlacementHandler().getCodeBlock(blockLocation);
            if (codeBlock == null) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return false;
            }

            
            
            Map<String, DataValue> dataValueParameters = new HashMap<>();
            for (Map.Entry<String, String> entry : blockParameters.entrySet()) {
                dataValueParameters.put(entry.getKey(), DataValue.fromObject(entry.getValue()));
            }
            
            codeBlock.setParameters(dataValueParameters);

            
            // Condition blockType.equals("CONDITION") is always true
            // Removed redundant check and fixed logic
            if ("ACTION".equals(blockType)) {
                codeBlock.setAction(blockId);
            } else if ("EVENT".equals(blockType)) {
                codeBlock.setEvent(blockId);
            } else if ("CONDITION".equals(blockType)) {
                codeBlock.setParameter("condition", DataValue.fromObject(blockId));
            }

            
            var creativeWorld = plugin.getServiceRegistry().getWorldManager().findCreativeWorldByBukkit(player.getWorld());
            if (creativeWorld != null) {
                plugin.getServiceRegistry().getWorldManager().saveWorld(creativeWorld);
            }

            return true;
        } catch (Exception e) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e.getMessage());
            return false;
        }
    }

    /**
     * üéÜ –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–ß–ö–ò –ë–õ–û–ö–ê
     */
    private void updateBlockSign() {
        if (plugin.getServiceRegistry().getBlockPlacementHandler() != null) {
            CodeBlock codeBlock = plugin.getServiceRegistry().getBlockPlacementHandler().getCodeBlock(blockLocation);
            if (codeBlock != null) {

            }
        }
    }

    /**
     * üéÜ –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ê–¢–ï–†–ò–ê–õ–ê –ë–õ–û–ö–ê
     */
    private Material getBlockMaterial() {
        
        return blockLocation.getBlock().getType();
    }

    @Override
    public void onInventoryClose(InventoryCloseEvent event) {
        
        
    }

    @Override
    public void onCleanup() {
        
        
    }
}