package com.megacreative.gui.coding.game_event;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import com.megacreative.services.BlockConfigService;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.BlockPlacementHandler;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;

import java.util.*;

/**
 * üéÜ –£–õ–£–ß–®–ï–ù–ù–´–ô –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
 * —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–±–æ—Ä–æ–º –∏ —É–º–Ω—ã–º–∏ —Ç–∞–±–ª–∏—á–∫–∞–º–∏ –Ω–∞ –±–ª–æ–∫–∞—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
 *
 * üéÜ ENHANCED Game Event Block GUI
 * 
 * Implements reference system-style: universal blocks with GUI configuration
 * with categories, beautiful selection, and smart signs on blocks with information.
 *
 * üéÜ ERWEITERT Spielereignis-Block-GUI
 * 
 * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-Konfiguration
 * mit Kategorien, sch√∂ner Auswahl und intelligenten Schildern an Bl√∂cken mit Informationen.
 */
public class GameEventBlockGUI implements GUIManager.ManagedGUIInterface {
    
    private final MegaCreative plugin;
    private final Player player;
    private final Location blockLocation;
    private final Material blockMaterial;
    private final Inventory inventory;
    private final GUIManager guiManager;
    private final BlockConfigService blockConfigService;
    
    // Categories for different types of game events
    private static final Map<String, String> CATEGORY_NAMES = new LinkedHashMap<>();
    private static final Map<String, Material> CATEGORY_MATERIALS = new HashMap<>();
    
    static {
        // Define category names and their display names
        CATEGORY_NAMES.put("SERVER", "üñ•Ô∏è –°–µ—Ä–≤–µ—Ä");
        CATEGORY_NAMES.put("WORLD", "üåç –ú–∏—Ä");
        CATEGORY_NAMES.put("BLOCK", "üß± –ë–ª–æ–∫–∏");
        CATEGORY_NAMES.put("ENTITY", "üßü –°—É—â–µ—Å—Ç–≤–∞");
        CATEGORY_NAMES.put("REDSTONE", "‚öôÔ∏è –†–µ–¥—Å—Ç–æ—É–Ω");
        CATEGORY_NAMES.put("MISC", "üîß –î—Ä—É–≥–æ–µ");
        
        // Define materials for category items
        CATEGORY_MATERIALS.put("SERVER", Material.COMMAND_BLOCK);
        CATEGORY_MATERIALS.put("WORLD", Material.GRASS_BLOCK);
        CATEGORY_MATERIALS.put("BLOCK", Material.COBBLESTONE);
        CATEGORY_MATERIALS.put("ENTITY", Material.ZOMBIE_SPAWN_EGG);
        CATEGORY_MATERIALS.put("REDSTONE", Material.REDSTONE);
        CATEGORY_MATERIALS.put("MISC", Material.NETHER_STAR);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
     * @param plugin –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
     * @param player –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     * @param blockLocation –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param blockMaterial –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    public GameEventBlockGUI(MegaCreative plugin, Player player, Location blockLocation, Material blockMaterial) {
        this.plugin = plugin;
        this.player = player;
        this.blockLocation = blockLocation;
        this.blockMaterial = blockMaterial;
        this.guiManager = plugin.getServiceRegistry().getGuiManager();
        
        // Add null check for service registry
        if (plugin != null && plugin.getServiceRegistry() != null) {
            this.blockConfigService = plugin.getServiceRegistry().getBlockConfigService();
        } else {
            this.blockConfigService = null;
            player.sendMessage("¬ßcBlock configuration service not available!");
        }
        
        // Create inventory with appropriate size
        this.inventory = Bukkit.createInventory(null, 54, "¬ß8–ò–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: " + getBlockDisplayName());
        
        setupInventory();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –±–ª–æ–∫–∞
     */
    private String getBlockDisplayName() {
        // Get display name from block config service
        BlockConfigService.BlockConfig config = blockConfigService.getBlockConfigByMaterial(blockMaterial);
        return config != null ? config.getDisplayName() : blockMaterial.name();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    private void setupInventory() {
        inventory.clear();
        
        // Add decorative border
        ItemStack borderItem = new ItemStack(Material.BLACK_STAINED_GLASS_PANE);
        ItemMeta borderMeta = borderItem.getItemMeta();
        borderMeta.setDisplayName(" ");
        borderItem.setItemMeta(borderMeta);
        
        // Fill border slots
        for (int i = 0; i < 54; i++) {
            if (i < 9 || i >= 45 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, borderItem);
            }
        }
        
        // Add info item in the center
        ItemStack infoItem = new ItemStack(blockMaterial);
        ItemMeta infoMeta = infoItem.getItemMeta();
        infoMeta.setDisplayName("¬ße¬ßl" + getBlockDisplayName());
        List<String> infoLore = new ArrayList<>();
        infoLore.add("¬ß7–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π");
        infoLore.add("");
        infoLore.add("¬ßa–ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á—Ç–æ–±—ã");
        infoLore.add("¬ßa–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è");
        infoLore.add("");
        infoLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        infoLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        infoMeta.setLore(infoLore);
        infoItem.setItemMeta(infoMeta);
        inventory.setItem(4, infoItem);
        
        // Add category items
        int slot = 10;
        for (Map.Entry<String, String> category : CATEGORY_NAMES.entrySet()) {
            String categoryKey = category.getKey();
            String categoryName = category.getValue();
            
            ItemStack categoryItem = new ItemStack(CATEGORY_MATERIALS.getOrDefault(categoryKey, Material.PAPER));
            ItemMeta categoryMeta = categoryItem.getItemMeta();
            categoryMeta.setDisplayName("¬ß6" + categoryName);
            
            List<String> categoryLore = new ArrayList<>();
            categoryLore.add("¬ß7–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + categoryKey);
            categoryLore.add("");
            categoryLore.add("¬ße‚ö° –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å");
            categoryMeta.setLore(categoryLore);
            
            categoryItem.setItemMeta(categoryMeta);
            inventory.setItem(slot, categoryItem);
            
            slot += 2; // Space out categories
            if (slot >= 44) break; // Don't go into border area
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);
        
        // –ê—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ GUI
        player.playSound(player.getLocation(), org.bukkit.Sound.UI_BUTTON_CLICK, 0.7f, 1.2f);
        
        // Add visual effects for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.ENCHANTMENT_TABLE, 
            player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 1);
    }
    
    @Override
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @return –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    public String getGUITitle() {
        return "Game Event Block GUI for " + blockMaterial.name();
    }
    
    @Override
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     * @param event –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     */
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;
        
        event.setCancelled(true); // Cancel all clicks by default
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        ItemMeta meta = clicked.getItemMeta();
        String displayName = meta.getDisplayName();
        
        // Check if it's a category item
        for (Map.Entry<String, String> category : CATEGORY_NAMES.entrySet()) {
            String categoryName = category.getValue();
            if (displayName.contains(categoryName)) {
                // Open category selection GUI
                openCategorySelectionGUI(category.getKey());
                return;
            }
        }
        
        // Handle other clicks
        List<String> lore = meta.getLore();
        if (lore != null) {
            // Find event ID in lore
            String eventId = null;
            for (String line : lore) {
                if (line.startsWith("¬ß8ID: ")) {
                    eventId = line.substring(5).trim(); // Remove "¬ß8ID: " prefix
                    break;
                }
            }
            
            if (eventId != null && !eventId.isEmpty()) {
                selectEvent(eventId);
            } else {
                player.sendMessage("¬ße‚Ñπ –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Å–æ–±—ã—Ç–∏—é –Ω–∏–∂–µ.");
                player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_PLING, 0.5f, 0.8f);
            }
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param category –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private void openCategorySelectionGUI(String category) {
        // Create new inventory for category selection
        Inventory categoryInventory = Bukkit.createInventory(null, 54, "¬ß8" + CATEGORY_NAMES.getOrDefault(category, category));
        
        // Add decorative border
        ItemStack borderItem = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta borderMeta = borderItem.getItemMeta();
        borderMeta.setDisplayName(" ");
        borderItem.setItemMeta(borderMeta);
        
        // Fill border slots
        for (int i = 0; i < 54; i++) {
            if (i < 9 || i >= 45 || i % 9 == 0 || i % 9 == 8) {
                categoryInventory.setItem(i, borderItem);
            }
        }
        
        // Add back button
        ItemStack backButton = new ItemStack(Material.ARROW);
        ItemMeta backMeta = backButton.getItemMeta();
        backMeta.setDisplayName("¬ßc‚¨Ö –ù–∞–∑–∞–¥");
        List<String> backLore = new ArrayList<>();
        backLore.add("¬ß7–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        backMeta.setLore(backLore);
        backButton.setItemMeta(backMeta);
        categoryInventory.setItem(49, backButton);
        
        // Load events for this category
        loadEventsForCategory(categoryInventory, category);
        
        // Open the category inventory
        player.openInventory(categoryInventory);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param inventory –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param category –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    private void loadEventsForCategory(Inventory inventory, String category) {
        // Check if blockConfigService is available
        if (blockConfigService == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
            return;
        }
        
        // Get available events for this block material
        List<String> availableEvents = blockConfigService.getActionsForMaterial(blockMaterial);
        
        // Filter events by category
        List<String> categoryEvents = new ArrayList<>();
        for (String eventId : availableEvents) {
            String eventCategory = getGameEventCategory(eventId);
            if (category.equals(eventCategory)) {
                categoryEvents.add(eventId);
            }
        }
        
        // Create event items
        int slot = 10;
        for (String eventId : categoryEvents) {
            if (slot >= 44) break; // Don't go into border area
            
            ItemStack eventItem = createEventItem(eventId);
            inventory.setItem(slot, eventItem);
            
            slot++;
            if (slot % 9 == 8) slot += 2; // Skip border slots
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     * @return ItemStack —ç–ª–µ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è
     */
    private ItemStack createEventItem(String eventId) {
        // Create appropriate material for event type
        Material material = getEventMaterial(eventId);
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        
        // Set display name
        meta.setDisplayName("¬ßa¬ßl" + getEventDisplayName(eventId));
        
        // Set lore with description and category
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7" + getEventDescription(eventId));
        lore.add("");
        lore.add("¬ß8‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + getEventCategoryName(eventId));
        lore.add("");
        lore.add("¬ße‚ö° –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å");
        lore.add("¬ß8ID: " + eventId);
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        meta.setLore(lore);
        
        item.setItemMeta(meta);
        return item;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     * @return –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private String getEventCategoryName(String eventId) {
        String category = getGameEventCategory(eventId);
        return CATEGORY_NAMES.getOrDefault(category, category);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     * @return –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    private String getGameEventCategory(String eventId) {
        switch (eventId.toLowerCase()) {
            case "onserverstart":
            case "onserverstop":
                return "SERVER";
            case "ontimechange":
            case "onweatherchange":
            case "isnight":
                return "WORLD";
            case "onblockburn":
            case "onblockfade":
            case "onblockform":
                return "BLOCK";
            case "onentityspawn":
            case "onentitydeath":
            case "onentitydamage":
                return "ENTITY";
            case "onredstonesignal":
            case "onpistonmove":
                return "REDSTONE";
            default:
                return "MISC";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏—è
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     * @return –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏—è
     */
    private Material getEventMaterial(String eventId) {
        // Return appropriate materials based on event type
        switch (eventId.toLowerCase()) {
            case "onserverstart":
            case "onserverstop":
                return Material.COMMAND_BLOCK;
            case "ontimechange":
                return Material.CLOCK;
            case "onweatherchange":
                return Material.WATER_BUCKET;
            case "onblockburn":
                return Material.FLINT_AND_STEEL;
            case "onblockfade":
                return Material.DEAD_BUSH;
            case "onentityspawn":
                return Material.EGG;
            case "onentitydeath":
                return Material.SKELETON_SKULL;
            case "onentitydamage":
                return Material.RED_DYE;
            case "onredstonesignal":
                return Material.REDSTONE;
            case "onpistonmove":
                return Material.PISTON;
            default:
                return Material.STONE;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     * @return –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è
     */
    private String getEventDisplayName(String eventId) {
        // Return user-friendly names for events
        switch (eventId.toLowerCase()) {
            case "onserverstart": return "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞";
            case "onserverstop": return "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
            case "ontimechange": return "–°–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏";
            case "onweatherchange": return "–°–º–µ–Ω–∞ –ø–æ–≥–æ–¥—ã";
            case "onblockburn": return "–ì–æ—Ä–µ–Ω–∏–µ –±–ª–æ–∫–∞";
            case "onblockfade": return "–ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –±–ª–æ–∫–∞";
            case "onblockform": return "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞";
            case "onentityspawn": return "–ü–æ—è–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏";
            case "onentitydeath": return "–°–º–µ—Ä—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏";
            case "onentitydamage": return "–£—Ä–æ–Ω —Å—É—â–Ω–æ—Å—Ç–∏";
            case "onredstonesignal": return "–°–∏–≥–Ω–∞–ª —Ä–µ–¥—Å—Ç–æ—É–Ω–∞";
            case "onpistonmove": return "–î–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Ä—à–Ω—è";
            default: return eventId;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     * @return –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    private String getEventDescription(String eventId) {
        // Return descriptions for events
        switch (eventId.toLowerCase()) {
            case "onserverstart": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞";
            case "onserverstop": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞";
            case "ontimechange": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫";
            case "onweatherchange": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–≥–æ–¥—ã";
            case "onblockburn": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –≥–æ—Ä–µ—Ç—å";
            case "onblockfade": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –±–ª–æ–∫ –∏—Å—á–µ–∑–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ–¥ —Ç–∞–µ—Ç)";
            case "onblockform": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –±–ª–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ–¥ –æ–±—Ä–∞–∑—É–µ—Ç—Å—è)";
            case "onentityspawn": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –º–∏—Ä–µ";
            case "onentitydeath": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Å—É—â–Ω–æ—Å—Ç—å —É–º–∏—Ä–∞–µ—Ç";
            case "onentitydamage": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω";
            case "onredstonesignal": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ —Ä–µ–¥—Å—Ç–æ—É–Ω–∞";
            case "onpistonmove": return "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä—à–Ω—è";
            default: return "–ò–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ " + eventId;
        }
    }
    
    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –±–ª–æ–∫–∞
     * @param eventId ID —Å–æ–±—ã—Ç–∏—è
     */
    private void selectEvent(String eventId) {
        // Get the code block
        BlockPlacementHandler placementHandler = plugin.getServiceRegistry().getBlockPlacementHandler();
        if (placementHandler == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤");
            return;
        }
        
        CodeBlock codeBlock = placementHandler.getCodeBlock(blockLocation);
        if (codeBlock == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        // Set the event
        codeBlock.setAction(eventId);
        
        // Save the world
        var creativeWorld = plugin.getServiceRegistry().getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (creativeWorld != null) {
            plugin.getServiceRegistry().getWorldManager().saveWorld(creativeWorld);
        }
        
        // Notify player
        player.sendMessage("¬ßa‚úì –°–æ–±—ã—Ç–∏–µ '" + getEventDisplayName(eventId) + "' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        player.sendMessage("¬ße–ö–ª–∏–∫–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ –±–ª–æ–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.");
        
        // Add visual feedback for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.VILLAGER_HAPPY, 
            player.getLocation().add(0, 1, 0), 15, 0.5, 0.5, 0.5, 1);
        player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);
        
        // Close this GUI
        player.closeInventory();
    }
    
    @Override
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     * @param event –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    public void onInventoryClose(InventoryCloseEvent event) {
        // Optional cleanup when GUI is closed
        // GUIManager handles automatic unregistration
    }
    
    @Override
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    public void onCleanup() {
        // Called when GUI is being cleaned up by GUIManager
        // No special cleanup needed for this GUI
    }
}