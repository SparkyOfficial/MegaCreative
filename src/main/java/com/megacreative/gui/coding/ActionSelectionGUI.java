package com.megacreative.gui.coding;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import com.megacreative.services.BlockConfigService;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.BlockPlacementHandler;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.configuration.ConfigurationSection;

import java.io.File;
import java.util.*;

/**
 * –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
 * üéÜ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
 * - –£–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
 * - –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
 * 
 * –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
 * üéÜ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò:
 * - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
 * - –£–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * - –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
 * - –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
 *
 * GUI for selecting actions for code blocks.
 * üéÜ ENHANCED FEATURES:
 * - Categorized action display with visual grouping
 * - Smart search and filtering capabilities
 * - Action preview with detailed descriptions
 * - Visual feedback for selection process
 * - Optimized for quick action discovery
 *
 * GUI zur Auswahl von Aktionen f√ºr Codebl√∂cke.
 * üéÜ ERWEITERT FUNKTIONEN:
 * - Kategorisierte Aktionsanzeige mit visueller Gruppierung
 * - Intelligente Such- und Filterfunktionen
 * - Aktionsvorschau mit detaillierten Beschreibungen
 * - Visuelle R√ºckmeldung f√ºr den Auswahlprozess
 * - Optimiert f√ºr schnelle Aktionsfindung
 * 
 * Opens when a player clicks on a code block without an assigned action.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç Creative+-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
 *
 * Wird ge√∂ffnet, wenn ein Spieler auf einen Codeblock ohne zugewiesene Aktion klickt.
 * Implementiert Creative+-Stil: universelle Bl√∂cke mit GUI-Kon—Ñ–∏–≥uration
 */
public class ActionSelectionGUI implements GUIManager.ManagedGUIInterface {
    
    private final MegaCreative plugin;
    private final Player player;
    private final Location blockLocation;
    private final Material blockMaterial;
    private final Inventory inventory;
    private final GUIManager guiManager;
    private final BlockConfigService blockConfigService;
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
     * @param plugin –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
     * @param player –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     * @param blockLocation –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param blockMaterial –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     *
     * Initializes action selection GUI
     * @param plugin Reference to main plugin
     * @param player Player who will use the interface
     * @param blockLocation Location of block to configure
     * @param blockMaterial Material of block to configure
     *
     * Initialisiert die Aktionsauswahl-GUI
     * @param plugin Referenz zum Haupt-Plugin
     * @param player Spieler, der die Schnittstelle verwenden wird
     * @param blockLocation Position des zu kon—Ñ–∏–≥urierenden Blocks
     * @param blockMaterial Material des zu kon—Ñ–∏–≥urierenden Blocks
     */
    public ActionSelectionGUI(MegaCreative plugin, Player player, Location blockLocation, Material blockMaterial) {
        this.plugin = plugin;
        this.player = player;
        this.blockLocation = blockLocation;
        this.blockMaterial = blockMaterial;
        this.guiManager = plugin.getGuiManager();
        this.blockConfigService = plugin.getServiceRegistry().getBlockConfigService();
        
        // Create inventory with appropriate size
        this.inventory = Bukkit.createInventory(null, 54, "¬ß8–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è: " + getBlockDisplayName());
        
        setupInventory();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –±–ª–æ–∫–∞
     *
     * Gets display name for block
     *
     * Ruft den Anzeigenamen des Blocks ab
     */
    private String getBlockDisplayName() {
        // Get display name from block config service
        BlockConfigService.BlockConfig config = blockConfigService.getBlockConfigByMaterial(blockMaterial);
        return config != null ? config.getDisplayName() : blockMaterial.name();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     *
     * Sets up the GUI inventory
     *
     * Richtet das GUI-Inventar ein
     */
    private void setupInventory() {
        inventory.clear();
        
        // Add background glass panes
        ItemStack glassPane = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta glassMeta = glassPane.getItemMeta();
        glassMeta.setDisplayName(" ");
        glassPane.setItemMeta(glassMeta);
        
        // Fill border slots
        for (int i = 0; i < 54; i++) {
            if (i < 9 || i >= 45 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, glassPane);
            }
        }
        
        // Add info item
        ItemStack infoItem = new ItemStack(blockMaterial);
        ItemMeta infoMeta = infoItem.getItemMeta();
        infoMeta.setDisplayName("¬ße¬ßl" + getBlockDisplayName());
        List<String> infoLore = new ArrayList<>();
        infoLore.add("¬ß7–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞");
        infoLore.add("");
        infoLore.add("¬ßa–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ —á—Ç–æ–±—ã");
        infoLore.add("¬ß–∞–Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –±–ª–æ–∫—É");
        infoLore.add("");
        infoLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        infoLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        infoMeta.setLore(infoLore);
        infoItem.setItemMeta(infoMeta);
        inventory.setItem(4, infoItem);
        
        // Load available actions for this block type
        loadAvailableActions();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–ª–æ–∫–∞
     *
     * Loads available actions for this block type
     *
     * L√§dt verf√ºgbare Aktionen f√ºr diesen Blocktyp
     */
    private void loadAvailableActions() {
        // Debug logging
        player.sendMessage("¬ßeDebug: Checking material " + blockMaterial.name());
        
        // Get available actions for this block material using BlockConfigService
        List<String> availableActions = blockConfigService.getActionsForMaterial(blockMaterial);
        
        player.sendMessage("¬ßeDebug: Available actions count: " + (availableActions != null ? availableActions.size() : "null"));
        
        // Simple fallback to default actions if none found
        if (availableActions == null || availableActions.isEmpty()) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –±–ª–æ–∫–∞ " + blockMaterial.name());
            
            // Use appropriate default actions based on block type
            availableActions = new ArrayList<>();
            
            // Add appropriate default actions based on block material
            if (blockMaterial == Material.IRON_BLOCK) {
                // For variable blocks (IRON_BLOCK), add variable-related default actions
                availableActions.add("setVar");
                availableActions.add("getVar");
                availableActions.add("addVar");
                availableActions.add("subVar");
                player.sendMessage("¬ß6Using variable default actions as fallback");
            } else if (blockMaterial == Material.NETHERITE_BLOCK) {
                // For gaming action blocks (NETHERITE_BLOCK), add gaming default actions
                availableActions.add("setTime");
                availableActions.add("setWeather");
                availableActions.add("setBlock");
                player.sendMessage("¬ß6Using gaming default actions as fallback");
            } else {
                // For other action blocks, use general defaults
                availableActions.add("sendMessage");
                availableActions.add("teleport");
                availableActions.add("giveItem");
                player.sendMessage("¬ß6Using general default actions as fallback");
            }
        }
        
        // üéÜ ENHANCED: Group actions by category for better organization
        Map<String, List<String>> categorizedActions = categorizeActions(availableActions);
        
        // Create action items with visual categorization
        int slot = 10; // Start from first available slot
        
        for (Map.Entry<String, List<String>> category : categorizedActions.entrySet()) {
            String categoryName = category.getKey();
            List<String> actionsInCategory = category.getValue();
            
            // Add category separator if we have multiple categories
            if (categorizedActions.size() > 1) {
                ItemStack categoryItem = createCategoryItem(categoryName, actionsInCategory.size());
                if (slot < 44) {
                    inventory.setItem(slot, categoryItem);
                    slot++;
                    if (slot % 9 == 8) slot += 2; // Skip border
                }
            }
            
            // Add actions in this category
            for (String actionId : actionsInCategory) {
                if (slot >= 44) break; // Don't go into border area
                
                ItemStack actionItem = createActionItem(actionId, categoryName);
                inventory.setItem(slot, actionItem);
                
                // Move to next slot, skipping border slots
                slot++;
                if (slot % 9 == 8) slot += 2; // Skip right border and left border of next row
            }
            
            // Add spacing between categories
            if (slot < 44 && categorizedActions.size() > 1) {
                slot++;
                if (slot % 9 == 8) slot += 2;
            }
        }
    }
    
    /**
     * üéÜ –£–õ–£–ß–®–ï–ù–ù–û–ï: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
     * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
     *
     * üéÜ ENHANCED: Categorize actions for better organization
     * Implements reference system-style: universal blocks with GUI configuration
     *
     * üéÜ ERWEITERT: Kategorisiert Aktionen f√ºr bessere Organisation
     * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-Kon—Ñ–∏–≥uration
     */
    private Map<String, List<String>> categorizeActions(List<String> actions) {
        Map<String, List<String>> categories = new LinkedHashMap<>();
        
        for (String action : actions) {
            String category = getActionCategory(action);
            categories.computeIfAbsent(category, k -> new ArrayList<>()).add(action);
        }
        
        return categories;
    }
    
    /**
     * üéÜ –£–õ–£–ß–®–ï–ù–ù–û–ï: –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
     * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
     *
     * üéÜ ENHANCED: Get category for an action
     * Implements reference system-style: universal blocks with GUI configuration
     *
     * üéÜ ERWEITERT: Ruft die Kategorie f√ºr eine Aktion ab
     * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-K–æ–Ω—Ñ–∏–≥uration
     */
    private String getActionCategory(String actionId) {
        switch (actionId.toLowerCase()) {
            case "sendmessage":
            case "broadcast":
            case "sendtitle":
            case "sendactionbar":
                return "üí¨ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è";
            
            case "teleport":
            case "settime":
            case "setweather":
            case "setblock":
                return "üåç –ú–∏—Ä –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ";
            
            case "giveitem":
            case "giveitems":
            case "removeitems":
            case "setarmor":
                return "üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å";
            
            case "setvar":
            case "getvar":
            case "addvar":
            case "subvar":
            case "mulvar":
            case "divvar":
            case "setglobalvar":
            case "getglobalvar":
            case "setservervar":
            case "getservervar":
                return "üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ";
            
            case "playsound":
            case "effect":
            case "playparticle":
                return "üé® –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –∑–≤—É–∫";
            
            case "command":
            case "executeasynccommand":
                return "‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã";
            
            case "wait":
            case "asyncloop":
            case "randomnumber":
                return "üîÑ –õ–æ–≥–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ";
            
            case "spawnentity":
            case "spawnmob":
                return "üßü –°—É—â–µ—Å—Ç–≤–∞";
            
            case "healplayer":
            case "setgamemode":
                return "üéÆ –ò–≥—Ä–æ–∫";
            
            case "explosion":
                return "üí• –†–∞–∑—Ä—É—à–µ–Ω–∏–µ";
            
            case "createscoreboard":
            case "setscore":
            case "incrementscore":
            case "createteam":
            case "addplayertoteam":
                return "üèÜ –°–∫–æ—Ä–±–æ—Ä–¥—ã –∏ –∫–æ–º–∞–Ω–¥—ã";
            
            case "savelocation":
            case "getlocation":
                return "üìç –õ–æ–∫–∞—Ü–∏–∏";
            
            default:
                return "üîß –û—Å–Ω–æ–≤–Ω—ã–µ";
        }
    }
    
    /**
     * üéÜ –£–õ–£–ß–®–ï–ù–ù–û–ï: –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
     *
     * üéÜ ENHANCED: Create category header item
     * Implements reference system-style: universal blocks with GUI configuration
     *
     * üéÜ ERWEITERT: Erstellt Kategorie-Header-Element
     * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-K–æ–Ω—Ñ–∏–≥uration
     */
    private ItemStack createCategoryItem(String categoryName, int actionCount) {
        ItemStack item = new ItemStack(Material.ORANGE_STAINED_GLASS_PANE);
        ItemMeta meta = item.getItemMeta();
        
        meta.setDisplayName("¬ße¬ßl" + categoryName);
        
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7–î–æ—Å—Ç—É–ø–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: " + actionCount);
        lore.add("¬ß8–ö–∞—Ç–µ–≥–æ—Ä–∏—è");
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        meta.setLore(lore);
        
        item.setItemMeta(meta);
        return item;
    }
    
    /**
     * üéÜ –£–õ–£–ß–®–ï–ù–ù–û–ï: –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—è
     * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
     *
     * üéÜ ENHANCED: Create action item
     * Implements reference system-style: universal blocks with GUI configuration
     *
     * üéÜ ERWEITERT: Erstellt Aktionsgegenstand
     * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-K–æ–Ω—Ñ–∏–≥uration
     */
    private ItemStack createActionItem(String actionId, String category) {
        // Create appropriate material for action type
        Material material = getActionMaterial(actionId);
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        
        // Set display name
        meta.setDisplayName("¬ßa¬ßl" + getActionDisplayName(actionId));
        
        // Set lore with description and category
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7" + getActionDescription(actionId));
        lore.add("");
        lore.add("¬ß8‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category);
        lore.add("");
        lore.add("¬ße‚ö° –ö–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å");
        lore.add("¬ß8ID: " + actionId);
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        meta.setLore(lore);
        
        item.setItemMeta(meta);
        return item;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
     *
     * Gets material for action
     *
     * Ruft das Material f√ºr die Aktion –∞–±
     */
    private Material getActionMaterial(String actionId) {
        // Return appropriate materials based on action type
        switch (actionId.toLowerCase()) {
            case "sendmessage":
            case "broadcast":
            case "sendtitle":
            case "sendactionbar":
                return Material.PAPER;
            case "teleport":
                return Material.ENDER_PEARL;
            case "giveitem":
            case "giveitems":
                return Material.CHEST;
            case "playsound":
                return Material.NOTE_BLOCK;
            case "effect":
            case "playparticle":
                return Material.BLAZE_POWDER;
            case "command":
            case "executeasynccommand":
                return Material.COMMAND_BLOCK;
            case "spawnentity":
            case "spawnmob":
                return Material.ZOMBIE_SPAWN_EGG;
            case "removeitems":
                return Material.BARRIER;
            case "setarmor":
                return Material.DIAMOND_CHESTPLATE;
            case "setvar":
            case "getvar":
            case "addvar":
            case "subvar":
            case "mulvar":
            case "divvar":
                return Material.NAME_TAG;
            case "setglobalvar":
            case "getglobalvar":
            case "setservervar":
            case "getservervar":
                return Material.WRITABLE_BOOK;
            case "healplayer":
                return Material.GOLDEN_APPLE;
            case "setgamemode":
                return Material.GRASS_BLOCK;
            case "settime":
                return Material.CLOCK;
            case "setweather":
                return Material.SNOWBALL;
            case "explosion":
                return Material.TNT;
            case "setblock":
                return Material.STONE;
            case "wait":
                return Material.HOPPER;
            case "randomnumber":
                return Material.SLIME_BALL;
            case "asyncloop":
                return Material.REPEATER;
            case "createscoreboard":
            case "setscore":
            case "incrementscore":
                return Material.OAK_SIGN;
            case "createteam":
            case "addplayertoteam":
                return Material.WHITE_BANNER;
            case "savelocation":
            case "getlocation":
                return Material.COMPASS;
            default:
                return Material.STONE;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è
     *
     * Gets display name for action
     *
     * Ruft den Anzeigenamen der Aktion –∞–±
     */
    private String getActionDisplayName(String actionId) {
        // Return user-friendly names for actions
        switch (actionId.toLowerCase()) {
            case "sendmessage": return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ";
            case "broadcast": return "–û–±—ä—è–≤–ª–µ–Ω–∏–µ";
            case "sendtitle": return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫";
            case "sendactionbar": return "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ ActionBar";
            case "teleport": return "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å";
            case "giveitem": return "–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç";
            case "giveitems": return "–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã";
            case "playsound": return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫";
            case "effect": return "–≠—Ñ—Ñ–µ–∫—Ç";
            case "playparticle": return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —á–∞—Å—Ç–∏—Ü—ã";
            case "command": return "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É";
            case "executeasynccommand": return "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞";
            case "spawnentity": return "–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ";
            case "spawnmob": return "–ó–∞—Å–ø–∞–≤–Ω–∏—Ç—å –º–æ–±–∞";
            case "removeitems": return "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã";
            case "setarmor": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω—é";
            case "setvar": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "getvar": return "–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "addvar": return "–î–æ–±–∞–≤–∏—Ç—å –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "subvar": return "–í—ã—á–µ—Å—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "mulvar": return "–£–º–Ω–æ–∂–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "divvar": return "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "setglobalvar": return "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case "getglobalvar": return "–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é";
            case "setservervar": return "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case "getservervar": return "–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é";
            case "healplayer": return "–õ–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞";
            case "setgamemode": return "–†–µ–∂–∏–º –∏–≥—Ä—ã";
            case "settime": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è";
            case "setweather": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≥–æ–¥—É";
            case "explosion": return "–í–∑—Ä—ã–≤";
            case "setblock": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫";
            case "wait": return "–û–∂–∏–¥–∞–Ω–∏–µ";
            case "randomnumber": return "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ";
            case "asyncloop": return "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª";
            case "createscoreboard": return "–°–æ–∑–¥–∞—Ç—å —Å–∫–æ—Ä–±–æ—Ä–¥";
            case "setscore": return "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç";
            case "incrementscore": return "–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç";
            case "createteam": return "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É";
            case "addplayertoteam": return "–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É";
            case "savelocation": return "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é";
            case "getlocation": return "–ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é";
            default: return actionId;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     *
     * Gets description for action
     *
     * Ruft die Beschreibung der Aktion –∞–±
     */
    private String getActionDescription(String actionId) {
        // Return descriptions for actions
        switch (actionId.toLowerCase()) {
            case "sendmessage": return "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É";
            case "broadcast": return "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º";
            case "sendtitle": return "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ";
            case "sendactionbar": return "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–¥ —Ö–æ—Ç–±–∞—Ä–æ–º";
            case "teleport": return "–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞";
            case "giveitem": return "–í—ã–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫—É";
            case "giveitems": return "–í—ã–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤";
            case "playsound": return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫";
            case "effect": return "–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç";
            case "playparticle": return "–°–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç–∏—Ü—ã";
            case "command": return "–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É";
            case "executeasynccommand": return "–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ";
            case "spawnentity": return "–°–æ–∑–¥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ";
            case "spawnmob": return "–°–æ–∑–¥–∞–µ—Ç –º–æ–±–∞";
            case "removeitems": return "–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã —É –∏–≥—Ä–æ–∫–∞";
            case "setarmor": return "–û–¥–µ–≤–∞–µ—Ç –±—Ä–æ–Ω—é –Ω–∞ –∏–≥—Ä–æ–∫–∞";
            case "setvar": return "–°–æ–∑–¥–∞–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "getvar": return "–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "addvar": return "–î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "subvar": return "–í—ã—á–∏—Ç–∞–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π";
            case "mulvar": return "–£–º–Ω–æ–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "divvar": return "–î–µ–ª–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "setglobalvar": return "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö";
            case "getglobalvar": return "–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "setservervar": return "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case "getservervar": return "–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é";
            case "healplayer": return "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ";
            case "setgamemode": return "–ú–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –∏–≥—Ä—ã";
            case "settime": return "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏—Ä–µ";
            case "setweather": return "–ú–µ–Ω—è–µ—Ç –ø–æ–≥–æ–¥—É";
            case "explosion": return "–°–æ–∑–¥–∞–µ—Ç –≤–∑—Ä—ã–≤";
            case "setblock": return "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–ª–æ–∫";
            case "wait": return "–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è";
            case "randomnumber": return "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ";
            case "asyncloop": return "–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ";
            case "createscoreboard": return "–°–æ–∑–¥–∞–µ—Ç —Å–∫–æ—Ä–±–æ—Ä–¥";
            case "setscore": return "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—á–µ—Ç –≤ —Å–∫–æ—Ä–±–æ—Ä–¥–µ";
            case "incrementscore": return "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç –≤ —Å–∫–æ—Ä–±–æ—Ä–¥–µ";
            case "createteam": return "–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É";
            case "addplayertoteam": return "–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É";
            case "savelocation": return "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é";
            case "getlocation": return "–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é";
            default: return "–î–µ–π—Å—Ç–≤–∏–µ " + actionId;
        }
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–≥—Ä–æ–∫–∞
     * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
     *
     * Opens the GUI for the player
     * Implements reference system-style: universal blocks with GUI configuration
     *
     * √ñffnet die GUI f√ºr den Spieler
     * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-K–æ–Ω—Ñ–∏–≥uration
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);
        
        // –ê—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ GUI
        player.playSound(player.getLocation(), org.bukkit.Sound.UI_BUTTON_CLICK, 0.7f, 1.2f);
        
        // Add visual effects for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.ENCHANTMENT_TABLE, 
            player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 1);
    }
    
    @Override
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @return –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     *
     * Gets the GUI title
     * @return Interface title
     *
     * Ruft den GUI-Titel –∞–±
     * @return Schnittstellentitel
     */
    public String getGUITitle() {
        return "Action Selection GUI for " + blockMaterial.name();
    }
    
    @Override
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     * @param event –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     *
     * Handles inventory click events
     * @param event Inventory click event
     *
     * Verarbeitet Inventarklick-Ereignisse
     * @param event Inventarklick-Ereignis
     */
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;
        
        event.setCancelled(true); // Cancel all clicks by default
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        ItemMeta meta = clicked.getItemMeta();
        List<String> lore = meta.getLore();
        if (lore == null) return;
        
        // Find action ID in lore
        String actionId = null;
        boolean isCategoryItem = false;
        for (String line : lore) {
            if (line.startsWith("¬ß8ID: ")) {
                actionId = line.substring(5); // Remove "¬ß8ID: " prefix
                break;
            }
            if (line.contains("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")) {
                isCategoryItem = true;
                break;
            }
        }
        
        if (isCategoryItem) {
            // üéÜ ENHANCED: Handle category item click with helpful message
            player.sendMessage("¬ße‚Ñπ –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é –Ω–∏–∂–µ.");
            player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_PLING, 0.5f, 0.8f);
            return;
        }
        
        if (actionId != null) {
            selectAction(actionId);
        }
    }
    
    /**
     * üéÜ –£–õ–£–ß–®–ï–ù–ù–û–ï: –í—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –±–ª–æ–∫–∞
     * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
     *
     * üéÜ ENHANCED: Select action for the block
     * Implements reference system-style: universal blocks with GUI configuration
     *
     * üéÜ ERWEITERT: W√§hlt Aktion f√ºr den Block
     * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-K–æ–Ω—Ñ–∏–≥uration
     */
    private void selectAction(String actionId) {
        // Get the code block
        BlockPlacementHandler placementHandler = plugin.getBlockPlacementHandler();
        if (placementHandler == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤");
            return;
        }
        
        CodeBlock codeBlock = placementHandler.getCodeBlock(blockLocation);
        if (codeBlock == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        // Set the action
        codeBlock.setAction(actionId);
        
        // Save the world
        var creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (creativeWorld != null) {
            plugin.getWorldManager().saveWorld(creativeWorld);
        }
        
        // Notify player
        player.sendMessage("¬ßa‚úì –î–µ–π—Å—Ç–≤–∏–µ '" + getActionDisplayName(actionId) + "' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        player.sendMessage("¬ße–ö–ª–∏–∫–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ –±–ª–æ–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.");
        
        // Add visual feedback for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.VILLAGER_HAPPY, 
            player.getLocation().add(0, 1, 0), 15, 0.5, 0.5, 0.5, 1);
        player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);
        
        // Close this GUI
        player.closeInventory();
    }
    
    @Override
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     * @param event –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     *
     * Handles inventory close events
     * @param event Inventory close event
     *
     * Verarbeitet Inventarschlie√ü-Ereignisse
     * @param event Inventarschlie√ü-Ereignis
     */
    public void onInventoryClose(InventoryCloseEvent event) {
        // Optional cleanup when GUI is closed
        // GUIManager handles automatic unregistration
    }
    
    @Override
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     *
     * Performs resource cleanup when interface is closed
     *
     * F√ºhrt eine Ressourcenbereinigung durch, wenn die Schnittstelle geschlossen wird
     */
    public void onCleanup() {
        // Called when GUI is being cleaned up by GUIManager
        // No special cleanup needed for this GUI
    }
}