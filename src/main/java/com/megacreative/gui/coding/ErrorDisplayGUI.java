package com.megacreative.gui.coding;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;

/**
 * üéÜ Enhanced Error Display GUI
 * 
 * Implements Reference System-style: universal blocks with GUI configuration
 * with categories, beautiful selection, and smart signs on blocks with information.
 *
 * üéÜ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç–∏–ª—å reference system: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI
 * —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –∫—Ä–∞—Å–∏–≤—ã–º –≤—ã–±–æ—Ä–æ–º –∏ —É–º–Ω—ã–º–∏ —Ç–∞–±–ª–∏—á–∫–∞–º–∏ –Ω–∞ –±–ª–æ–∫–∞—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
 *
 * üéÜ Erweitertes Fehleranzeige-GUI
 * 
 * Implementiert Reference-System-Stil: universelle Bl√∂cke mit GUI-Konfiguration
 * mit Kategorien, sch√∂ner Auswahl und intelligenten Schildern an Bl√∂cken mit Informationen.
 */
public class ErrorDisplayGUI implements GUIManager.ManagedGUIInterface {
    
    private final MegaCreative plugin;
    private final Player player;
    private final String errorTitle;
    private final List<ErrorInfo> errors;
    private final Inventory inventory;
    private final GUIManager guiManager;
    
    public static class ErrorInfo {
        private final String message;
        private final ErrorSeverity severity;
        private final String suggestion;
        private final Runnable quickFix;
        
        public ErrorInfo(String message, ErrorSeverity severity, String suggestion) {
            this(message, severity, suggestion, null);
        }
        
        public ErrorInfo(String message, ErrorSeverity severity, String suggestion, Runnable quickFix) {
            this.message = message;
            this.severity = severity;
            this.suggestion = suggestion;
            this.quickFix = quickFix;
        }
        
        public String getMessage() { return message; }
        public ErrorSeverity getSeverity() { return severity; }
        public String getSuggestion() { return suggestion; }
        public Runnable getQuickFix() { return quickFix; }
        public boolean hasQuickFix() { return quickFix != null; }
    }
    
    public enum ErrorSeverity {
        ERROR("¬ßc‚ùå", "¬ßc–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"),
        WARNING("¬ße‚ö†", "¬ße–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"),
        INFO("¬ßbüìù", "¬ßb–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
        
        private final String icon;
        private final String displayName;
        
        ErrorSeverity(String icon, String displayName) {
            this.icon = icon;
            this.displayName = displayName;
        }
        
        public String getIcon() { return icon; }
        public String getDisplayName() { return displayName; }
    }
    
    /**
     * Initializes error display GUI
     * @param plugin Reference to main plugin
     * @param player Player who will use the interface
     * @param errorTitle Error title
     * @param errors List of errors to display
     */
    public ErrorDisplayGUI(MegaCreative plugin, Player player, String errorTitle, List<ErrorInfo> errors) {
        this.plugin = plugin;
        this.player = player;
        this.errorTitle = errorTitle;
        this.errors = errors;
        this.guiManager = plugin.getServiceRegistry().getGuiManager();
        
        // Calculate inventory size based on number of errors (54 slots max for double chest)
        int size = Math.min(54, Math.max(27, ((errors.size() + 2) / 7 + 1) * 9));
        this.inventory = Bukkit.createInventory(null, size, "¬ß8–û—à–∏–±–∫–∏: " + errorTitle);
        
        setupInventory();
    }
    
    /**
     * Sets up the GUI inventory with enhanced design
     */
    private void setupInventory() {
        inventory.clear();
        
        // Add decorative border with category-specific materials
        ItemStack borderItem = new ItemStack(Material.BLACK_STAINED_GLASS_PANE);
        ItemMeta borderMeta = borderItem.getItemMeta();
        borderMeta.setDisplayName(" ");
        borderItem.setItemMeta(borderMeta);
        
        // Fill border slots
        for (int i = 0; i < inventory.getSize(); i++) {
            if (i < 9 || i >= inventory.getSize() - 9 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, borderItem);
            }
        }
        
        // Add title item with enhanced visual design
        ItemStack titleItem = new ItemStack(Material.REDSTONE_BLOCK);
        ItemMeta titleMeta = titleItem.getItemMeta();
        titleMeta.setDisplayName("¬ßc¬ßl" + errorTitle);
        List<String> titleLore = new ArrayList<>();
        titleLore.add("¬ß7–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        titleLore.add("");
        titleLore.add("¬ße–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        titleLore.add("");
        titleLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        titleLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        titleMeta.setLore(titleLore);
        titleItem.setItemMeta(titleMeta);
        inventory.setItem(4, titleItem);
        
        // Add error items with enhanced design
        int slot = 10;
        for (int i = 0; i < errors.size() && slot < inventory.getSize() - 9; i++) {
            ErrorInfo error = errors.get(i);
            ItemStack errorItem = createErrorItem(error, i + 1);
            
            inventory.setItem(slot, errorItem);
            
            // Move to next slot, skipping borders
            slot++;
            if (slot % 9 == 8) slot += 2; // Skip border
        }
        
        // Add control buttons with enhanced design
        addControlButtons();
    }
    
    /**
     * Adds control buttons with enhanced design
     */
    private void addControlButtons() {
        // Close button with enhanced visual design
        ItemStack closeItem = new ItemStack(Material.BARRIER);
        ItemMeta closeMeta = closeItem.getItemMeta();
        closeMeta.setDisplayName("¬ßc¬ßl–ó–∞–∫—Ä—ã—Ç—å");
        List<String> closeLore = new ArrayList<>();
        closeLore.add("¬ß7–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –æ—à–∏–±–æ–∫");
        closeLore.add("");
        closeLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        closeLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        closeMeta.setLore(closeLore);
        closeItem.setItemMeta(closeMeta);
        inventory.setItem(inventory.getSize() - 5, closeItem);
        
        // Add back button
        ItemStack backButton = new ItemStack(Material.ARROW);
        ItemMeta backMeta = backButton.getItemMeta();
        backMeta.setDisplayName("¬ßc‚¨Ö –ù–∞–∑–∞–¥");
        List<String> backLore = new ArrayList<>();
        backLore.add("¬ß7–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é");
        backLore.add("");
        backLore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        backLore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        backMeta.setLore(backLore);
        backButton.setItemMeta(backMeta);
        inventory.setItem(inventory.getSize() - 6, backButton);
    }
    
    /**
     * Creates error item with enhanced design
     */
    private ItemStack createErrorItem(ErrorInfo error, int number) {
        Material material = getErrorMaterial(error.getSeverity());
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        
        meta.setDisplayName(error.getSeverity().getIcon() + " ¬ßf–û—à–∏–±–∫–∞ #" + number);
        
        List<String> lore = new ArrayList<>();
        lore.add("¬ß7" + error.getMessage());
        lore.add("");
        lore.add("¬ßeüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:");
        lore.add("¬ß7" + error.getSuggestion());
        lore.add("");
        lore.add(error.getSeverity().getDisplayName());
        lore.add("");
        lore.add("¬ßf‚ú® Reference system-—Å—Ç–∏–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏");
        lore.add("¬ßf—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —á–µ—Ä–µ–∑ GUI");
        
        if (error.hasQuickFix()) {
            lore.add("");
            lore.add("¬ßa‚ö° –ö–ª–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        }
        
        meta.setLore(lore);
        item.setItemMeta(meta);
        
        return item;
    }
    
    /**
     * Gets material for error
     */
    private Material getErrorMaterial(ErrorSeverity severity) {
        switch (severity) {
            case ERROR:
                return Material.RED_WOOL;
            case WARNING:
                return Material.YELLOW_WOOL;
            case INFO:
                return Material.LIGHT_BLUE_WOOL;
            default:
                return Material.WHITE_WOOL;
        }
    }
    
    /**
     * Opens the GUI for the player
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);
        
        // Audio feedback when opening GUI
        player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_BASS, 0.8f, 0.5f);
        
        // Add visual effects for reference system-style magic
        player.spawnParticle(org.bukkit.Particle.ENCHANTMENT_TABLE, 
            player.getLocation().add(0, 1, 0), 10, 0.5, 0.5, 0.5, 1);
    }
    
    @Override
    /**
     * Gets the GUI title
     * @return Interface title
     */
    public String getGUITitle() {
        return "Error Display GUI for " + errorTitle;
    }
    
    @Override
    /**
     * Handles inventory click events
     * @param event Inventory click event
     */
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;
        
        event.setCancelled(true); // Cancel all clicks by default
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        String displayName = clicked.getItemMeta().getDisplayName();
        int slot = event.getSlot();
        
        // Handle back button
        if (slot == inventory.getSize() - 6) {
            player.closeInventory();
            return;
        }
        
        // Handle close button
        if (displayName.contains("–ó–∞–∫—Ä—ã—Ç—å")) {
            player.closeInventory();
            return;
        }
        
        // Handle error items with quick fixes
        if (displayName.contains("–û—à–∏–±–∫–∞ #")) {
            String numberStr = displayName.replaceAll(".*#(\\d+).*", "$1");
            try {
                int errorNumber = Integer.parseInt(numberStr) - 1;
                if (errorNumber >= 0 && errorNumber < errors.size()) {
                    ErrorInfo error = errors.get(errorNumber);
                    if (error.hasQuickFix()) {
                        player.sendMessage("¬ßa‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
                        player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.2f);
                        
                        // Execute quick fix
                        Bukkit.getScheduler().runTask(plugin, () -> {
                            try {
                                error.getQuickFix().run();
                                player.sendMessage("¬ßa‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
                                player.closeInventory();
                            } catch (Exception e) {
                                player.sendMessage("¬ßc‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: " + e.getMessage());
                            }
                        });
                    } else {
                        player.sendMessage("¬ßeüí° " + error.getSuggestion());
                        player.playSound(player.getLocation(), org.bukkit.Sound.BLOCK_NOTE_BLOCK_PLING, 0.7f, 1.2f);
                    }
                }
            } catch (NumberFormatException e) {
                // Ignore invalid number
            }
        }
    }
    
    @Override
    /**
     * Handles inventory close events
     * @param event Inventory close event
     */
    public void onInventoryClose(InventoryCloseEvent event) {
        // Optional cleanup when GUI is closed
        // GUIManager handles automatic unregistration
    }
    
    @Override
    /**
     * Performs resource cleanup when interface is closed
     */
    public void onCleanup() {
        // Called when GUI is being cleaned up by GUIManager
        // No special cleanup needed for this GUI
    }
}