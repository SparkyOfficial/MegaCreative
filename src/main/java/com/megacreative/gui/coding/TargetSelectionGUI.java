package com.megacreative.gui.coding;

import com.megacreative.MegaCreative;
import com.megacreative.managers.GUIManager;
import com.megacreative.services.BlockConfigService;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.BlockPlacementHandler;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.Location;

import java.util.*;

/**
 * GUI for selecting targets for actions (@p, @a, victim, attacker, etc.)
 * üéÜ ENHANCED FEATURES:
 * - Intuitive target visualization with player heads
 * - Real-time target validation and preview
 * - Smart target recommendations based on action type
 * - Visual feedback for selection process
 * - OpenCreative-style target selection system with modern enhancements
 */
public class TargetSelectionGUI implements GUIManager.ManagedGUIInterface {
    
    private final MegaCreative plugin;
    private final Player player;
    private final Location blockLocation;
    private final Material blockMaterial;
    private final Inventory inventory;
    private final GUIManager guiManager;
    
    // Target types available in the system
    public enum TargetType {
        PLAYER("@p", "¬ßa–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫", Material.PLAYER_HEAD, "–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª —Å–∫—Ä–∏–ø—Ç"),
        ALL_PLAYERS("@a", "¬ß6–í—Å–µ –∏–≥—Ä–æ–∫–∏", Material.GOLDEN_HELMET, "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"),
        RANDOM_PLAYER("@r", "¬ßc–°–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫", Material.COMPASS, "–°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫"),
        NEAREST_PLAYER("@n", "¬ße–ë–ª–∏–∂–∞–π—à–∏–π –∏–≥—Ä–æ–∫", Material.ENDER_EYE, "–ë–ª–∏–∂–∞–π—à–∏–π –∫ –±–ª–æ–∫—É –∏–≥—Ä–æ–∫"),
        VICTIM("VICTIM", "¬ß4–ñ–µ—Ä—Ç–≤–∞", Material.SKELETON_SKULL, "–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç—Ä–∞–¥–∞–ª –≤ —Å–æ–±—ã—Ç–∏–∏"),
        ATTACKER("ATTACKER", "¬ßc–ê—Ç–∞–∫—É—é—â–∏–π", Material.DIAMOND_SWORD, "–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∞—Ç–∞–∫–æ–≤–∞–ª"),
        KILLER("KILLER", "¬ß8–£–±–∏–π—Ü–∞", Material.NETHERITE_SWORD, "–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–±–∏–ª"),
        DEFAULT("DEFAULT", "¬ß7–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", Material.GRAY_STAINED_GLASS, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"),
        CUSTOM("CUSTOM", "¬ße–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è", Material.NAME_TAG, "–í–≤–µ—Å—Ç–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –≤—Ä—É—á–Ω—É—é");
        
        private final String selector;
        private final String displayName;
        private final Material icon;
        private final String description;
        
        TargetType(String selector, String displayName, Material icon, String description) {
            this.selector = selector;
            this.displayName = displayName;
            this.icon = icon;
            this.description = description;
        }
        
        public String getSelector() { return selector; }
        public String getDisplayName() { return displayName; }
        public Material getIcon() { return icon; }
        public String getDescription() { return description; }
    }
    
    public TargetSelectionGUI(MegaCreative plugin, Player player, Location blockLocation, Material blockMaterial) {
        this.plugin = plugin;
        this.player = player;
        this.blockLocation = blockLocation;
        this.blockMaterial = blockMaterial;
        this.guiManager = plugin.getGuiManager();
        
        // Create inventory with appropriate size
        this.inventory = Bukkit.createInventory(null, 45, "¬ß8–í—ã–±–æ—Ä —Ü–µ–ª–∏: " + getBlockDisplayName());
        
        setupInventory();
    }
    
    private String getBlockDisplayName() {
        BlockConfigService blockConfigService = plugin.getServiceRegistry().getBlockConfigService();
        BlockConfigService.BlockConfig config = blockConfigService.getBlockConfigByMaterial(blockMaterial);
        return config != null ? config.getDisplayName() : blockMaterial.name();
    }
    
    private void setupInventory() {
        inventory.clear();
        
        // Add background glass panes
        ItemStack glassPane = new ItemStack(Material.GRAY_STAINED_GLASS_PANE);
        ItemMeta glassMeta = glassPane.getItemMeta();
        glassMeta.setDisplayName(" ");
        glassPane.setItemMeta(glassMeta);
        
        // Fill border slots
        for (int i = 0; i < 45; i++) {
            if (i < 9 || i >= 36 || i % 9 == 0 || i % 9 == 8) {
                inventory.setItem(i, glassPane);
            }
        }
        
        // Add title item
        ItemStack titleItem = new ItemStack(blockMaterial);
        ItemMeta titleMeta = titleItem.getItemMeta();
        titleMeta.setDisplayName("¬ße¬ßl" + getBlockDisplayName());
        List<String> titleLore = new ArrayList<>();
        titleLore.add("¬ß7–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è");
        titleLore.add("");
        titleLore.add("¬ßa–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–ª—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
        titleLore.add("¬ßa–≤ –±–ª–æ–∫–µ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä 'target'");
        titleMeta.setLore(titleLore);
        titleItem.setItemMeta(titleMeta);
        inventory.setItem(4, titleItem);
        
        // Add target options
        loadTargetOptions();
    }
    
    private void loadTargetOptions() {
        // Place target options in a nice grid layout
        int[] slots = {10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34};
        int slotIndex = 0;
        
        for (TargetType targetType : TargetType.values()) {
            if (slotIndex >= slots.length) break;
            
            ItemStack targetItem = createTargetItem(targetType);
            inventory.setItem(slots[slotIndex], targetItem);
            slotIndex++;
        }
    }
    
    private ItemStack createTargetItem(TargetType targetType) {
        ItemStack item = new ItemStack(targetType.getIcon());
        ItemMeta meta = item.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName(targetType.getDisplayName());
            
            List<String> lore = new ArrayList<>();
            lore.add("¬ß7" + targetType.getDescription());
            lore.add("");
            
            // üéÜ ENHANCED: Add usage examples and context
            switch (targetType) {
                case PLAYER:
                    lore.add("¬ßa‚úì –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
                    lore.add("¬ß7  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π");
                    lore.add("¬ß7  ‚Ä¢ –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è");
                    lore.add("¬ß7  ‚Ä¢ –í—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
                    break;
                case ALL_PLAYERS:
                    lore.add("¬ßa‚úì –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
                    lore.add("¬ß7  ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞");
                    lore.add("¬ß7  ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã");
                    break;
                case RANDOM_PLAYER:
                    lore.add("¬ßa‚úì –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
                    lore.add("¬ß7  ‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã");
                    lore.add("¬ß7  ‚Ä¢ –ú–∏–Ω–∏-–∏–≥—Ä—ã");
                    break;
                case NEAREST_PLAYER:
                    lore.add("¬ßa‚úì –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
                    lore.add("¬ß7  ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è");
                    lore.add("¬ß7  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏");
                    break;
            }
            lore.add("");
            
            if (!targetType.getSelector().equals("DEFAULT")) {
                lore.add("¬ße–°–µ–ª–µ–∫—Ç–æ—Ä: ¬ßf" + targetType.getSelector());
            }
            
            lore.add("");
            lore.add("¬ßa–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞");
            lore.add("¬ß8ID: " + targetType.name());
            
            meta.setLore(lore);
            item.setItemMeta(meta);
        }
        
        return item;
    }
    
    /**
     * Opens the GUI for the player
     */
    public void open() {
        guiManager.registerGUI(player, this, inventory);
        player.openInventory(inventory);
        
        // –ê—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ GUI
        player.playSound(player.getLocation(), org.bukkit.Sound.UI_BUTTON_CLICK, 0.7f, 0.8f);
    }
    
    @Override
    public String getGUITitle() {
        return "Target Selection GUI for " + blockMaterial.name();
    }
    
    @Override
    public void onInventoryClick(InventoryClickEvent event) {
        if (!player.equals(event.getWhoClicked())) return;
        if (!inventory.equals(event.getInventory())) return;
        
        event.setCancelled(true); // Cancel all clicks by default
        
        ItemStack clicked = event.getCurrentItem();
        if (clicked == null || !clicked.hasItemMeta()) return;
        
        ItemMeta meta = clicked.getItemMeta();
        List<String> lore = meta.getLore();
        if (lore == null) return;
        
        // Find target ID in lore
        String targetId = null;
        for (String line : lore) {
            if (line.startsWith("¬ß8ID: ")) {
                targetId = line.substring(6); // Remove "¬ß8ID: " prefix
                break;
            }
        }
        
        if (targetId != null) {
            selectTarget(targetId);
        }
    }
    
    private void selectTarget(String targetId) {
        try {
            TargetType selectedTarget = TargetType.valueOf(targetId);
            
            // Get the code block
            BlockPlacementHandler placementHandler = plugin.getBlockPlacementHandler();
            if (placementHandler == null) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤");
                return;
            }
            
            CodeBlock codeBlock = placementHandler.getCodeBlock(blockLocation);
            if (codeBlock == null) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }
            
            // Set the target parameter
            codeBlock.setParameter("target", selectedTarget.getSelector());
            
            // Save the world
            var creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(player.getWorld());
            if (creativeWorld != null) {
                plugin.getWorldManager().saveWorld(creativeWorld);
            }
            
            // Notify player with enhanced feedback
            player.sendMessage("¬ßa‚úì –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + selectedTarget.getDisplayName());
            player.sendMessage("¬ß7¬ª –°–µ–ª–µ–∫—Ç–æ—Ä: ¬ßf" + selectedTarget.getSelector());
            player.sendMessage("¬ße‚ö° –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –±–ª–æ–∫–∞.");
            
            // Close this GUI
            player.closeInventory();
            
            // Play success sound
            player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.5f);
            
            // Open ActionSelectionGUI next
            openActionSelectionGUI();
            
        } catch (IllegalArgumentException e) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏");
        }
    }
    
    private void openActionSelectionGUI() {
        // Open ActionSelectionGUI after target selection
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            ActionSelectionGUI actionGUI = new ActionSelectionGUI(plugin, player, blockLocation, blockMaterial);
            actionGUI.open();
        }, 5L); // Small delay to ensure smooth transition
    }
    
    @Override
    public void onInventoryClose(InventoryCloseEvent event) {
        // Optional cleanup when GUI is closed
        // GUIManager handles automatic unregistration
    }
    
    @Override
    public void onCleanup() {
        // Called when GUI is being cleaned up by GUIManager
        // No special cleanup needed for this GUI
    }
}