package com.megacreative.models;

import com.megacreative.MegaCreative;
import com.megacreative.coding.CodeHandler;
import com.megacreative.coding.CodeScript;
import com.megacreative.coding.ScriptEngine;
import org.bukkit.entity.Player;
import java.util.*;
import java.util.Objects;

/**
 * Represents a creative world in the plugin with all its properties and settings.
 *
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –º–∏—Ä –≤ –ø–ª–∞–≥–∏–Ω–µ —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
 *
 * Stellt eine kreative Welt im Plugin mit all ihren Eigenschaften und Einstellungen dar.
 */
public class CreativeWorld {
    
    private String id;
    private String name;
    private String description;
    private UUID ownerId;
    private String ownerName;
    private CreativeWorldType worldType;
    private WorldMode mode;
    private boolean isPrivate;
    private long createdTime;
    private long lastActivity;
    
    /**
     * World settings
     *
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏—Ä–∞
     *
     * Welteinstellungen
     */
    private WorldFlags flags;
    
    /**
     * Trusted players
     *
     * –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
     *
     * Vertrauensw√ºrdige Spieler
     */
    private Set<UUID> trustedBuilders;
    private Set<UUID> trustedCoders;
    private Set<UUID> trustedAdmins = new HashSet<>();
    
    /**
     * Statistics
     *
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     *
     * Statistiken
     */
    private int likes;
    private int dislikes;
    private Set<UUID> likedBy;
    private Set<UUID> dislikedBy;
    private Set<UUID> favoriteBy;
    
    /**
     * Comments
     *
     * –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
     *
     * Kommentare
     */
    private List<WorldComment> comments;

    /**
     * üéÜ ENHANCED: Reference system-style dual world support
     *
     * üéÜ ENHANCED: Reference system-style: –î–≤–æ–π–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∏—Ä–æ–≤
     *
     * üéÜ ENHANCED: Reference system-style: Duale Weltunterst√ºtzung
     */
    private String pairedWorldId; // ID of the paired world (dev/play)
    // ID –ø–∞—Ä–Ω–æ–≥–æ –º–∏—Ä–∞ (dev/play)
    // ID der gekoppelten Welt (dev/play)
    private WorldDualMode dualMode; // Whether this is dev or play world
    // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–∏—Ä–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∏–≥—Ä—ã
    // Ob es sich um eine Entwicklungs- oder Spielwelt handelt
    
    /**
     * üéÜ ENHANCED: Advanced permission system
     *
     * üéÜ ENHANCED: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     *
     * üéÜ ENHANCED: Erweitertes Berechtigungssystem
     */
    private WorldPermissions permissions;
    
    /**
     * Scripts
     *
     * –°–∫—Ä–∏–ø—Ç—ã
     *
     * Skripte
     */
    private List<CodeScript> scripts;
    
    /**
     * Code handler for managing script execution
     *
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–∫—Ä–∏–ø—Ç–æ–≤
     *
     * Code-Handler zur Verwaltung der Skriptausf√ºhrung
     */
    private CodeHandler codeHandler;
    
    /**
     * Online players
     *
     * –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏
     *
     * Online-Spieler
     */
    private Set<UUID> onlinePlayers;
    
    /**
     * üéÜ ENHANCED: World dual mode enum
     *
     * üéÜ ENHANCED: –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–∏—Ä–∞
     *
     * üéÜ ENHANCED: Welt-Dualmodus-Enum
     */
    public enum WorldDualMode {
        DEV("code", "¬ßeüîß Development"),
        // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
        // Entwicklung
        PLAY("world", "¬ßaüéÆ Play"),
        // –ò–≥—Ä–∞
        // Spielen
        STANDALONE("single", "¬ß7üì¶ Standalone");
        // –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π
        // Eigenst√§ndig
        
        private final String suffix;
        private final String displayName;
        
        /**
         * Creates a WorldDualMode
         * @param suffix Mode suffix
         * @param displayName Display name
         *
         * –°–æ–∑–¥–∞–µ—Ç WorldDualMode
         * @param suffix –°—É—Ñ—Ñ–∏–∫—Å —Ä–µ–∂–∏–º–∞
         * @param displayName –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
         *
         * Erstellt einen WorldDualMode
         * @param suffix Modus-Suffix
         * @param displayName Anzeigename
         */
        WorldDualMode(String suffix, String displayName) {
            this.suffix = suffix;
            this.displayName = displayName;
        }
        
        /**
         * Gets the suffix
         * @return Mode suffix
         *
         * –ü–æ–ª—É—á–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å
         * @return –°—É—Ñ—Ñ–∏–∫—Å —Ä–µ–∂–∏–º–∞
         *
         * Ruft das Suffix ab
         * @return Modus-Suffix
         */
        public String getSuffix() { return suffix; }
        
        /**
         * Gets the display name
         * @return Display name
         *
         * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
         * @return –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
         *
         * Ruft den Anzeigenamen ab
         * @return Anzeigename
         */
        public String getDisplayName() { return displayName; }
    }
    
    /**
     * Default constructor
     *
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     *
     * Standardkonstruktor
     */
    public CreativeWorld() {
        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        // Default constructor for deserialization
        // Standardkonstruktor f√ºr Deserialisierung
        this.flags = new WorldFlags();
        this.trustedBuilders = new HashSet<>();
        this.trustedAdmins = new HashSet<>();
        this.trustedCoders = new HashSet<>();
        this.trustedAdmins = new HashSet<>();
        this.comments = new ArrayList<>();
        this.scripts = new ArrayList<>();
        this.onlinePlayers = new HashSet<>();
        this.likedBy = new HashSet<>();
        this.dislikedBy = new HashSet<>();
        this.favoriteBy = new HashSet<>();
        this.createdTime = System.currentTimeMillis();
        this.lastActivity = System.currentTimeMillis();
        this.likes = 0;
        this.dislikes = 0;
    }
    
    /**
     * Constructor with parameters
     * @param id World ID
     * @param name World name
     * @param ownerId Owner ID
     * @param ownerName Owner name
     * @param worldType World type
     *
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     * @param id ID –º–∏—Ä–∞
     * @param name –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞
     * @param ownerId ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
     * @param ownerName –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
     * @param worldType –¢–∏–ø –º–∏—Ä–∞
     *
     * Konstruktor mit Parametern
     * @param id Welt-ID
     * @param name Weltname
     * @param ownerId Besitzer-ID
     * @param ownerName Besitzername
     * @param worldType Welttyp
     */
    public CreativeWorld(String id, String name, UUID ownerId, String ownerName, CreativeWorldType worldType) {
        this.id = id;
        this.name = name;
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.worldType = worldType;
        this.mode = WorldMode.BUILD;
        this.isPrivate = false;
        this.createdTime = System.currentTimeMillis();
        this.lastActivity = System.currentTimeMillis();
        
        this.flags = new WorldFlags();
        this.trustedBuilders = new HashSet<>();
        this.trustedCoders = new HashSet<>();
        this.likes = 0;
        this.dislikes = 0;
        this.likedBy = new HashSet<>();
        this.dislikedBy = new HashSet<>();
        this.favoriteBy = new HashSet<>();
        this.comments = new ArrayList<>();
        this.scripts = new ArrayList<>();
        this.onlinePlayers = new HashSet<>();
        
        // üéÜ ENHANCED: Initialize dual world support
        // üéÜ ENHANCED: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–≤–æ–π–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–∏—Ä–æ–≤
        // üéÜ ENHANCED: Duale Weltunterst√ºtzung initialisieren
        this.dualMode = WorldDualMode.STANDALONE;
        this.pairedWorldId = null;
        
        // üéÜ ENHANCED: Initialize advanced permissions
        // üéÜ ENHANCED: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        // üéÜ ENHANCED: Erweiterte Berechtigungen initialisieren
        this.permissions = new WorldPermissions();
    }
    
    /**
     * üéÜ ENHANCED: Reference system-style world naming with dual mode support
     *
     * üéÜ ENHANCED: Reference system-style: –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤–æ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     *
     * üéÜ ENHANCED: Reference system-style: Weltbenennung mit Dualmodus-Unterst√ºtzung
     */
    public String getWorldName() {
        if (dualMode == WorldDualMode.STANDALONE) {
            return "megacreative_" + id;
        }
        return "megacreative_" + id + "-" + dualMode.getSuffix();
    }
    
    /**
     * Gets the Bukkit World instance for this CreativeWorld
     * @return The Bukkit World or null if not loaded
     *
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Bukkit World –¥–ª—è —ç—Ç–æ–≥–æ CreativeWorld
     * @return Bukkit World –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
     *
     * Ruft die Bukkit-Weltinstanz f√ºr diese CreativeWorld ab
     * @return Die Bukkit-Welt oder null, wenn nicht geladen
     */
    public org.bukkit.World getBukkitWorld() {
        return org.bukkit.Bukkit.getWorld(getWorldName());
    }
    
    /**
     * Gets the base name of the world (without suffixes)
     * @return The base world name
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏–º—è –º–∏—Ä–∞ (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤)
     * @return –ë–∞–∑–æ–≤–æ–µ –∏–º—è –º–∏—Ä–∞
     *
     * Ruft den Basisnamen der Welt ab (ohne Suffixe)
     * @return Der Basisweltname
     */
    public String getBaseName() {
        return name != null ? name : "World_" + id;
    }
    
    /**
     * Gets the development world name
     * @return Development world name
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –º–∏—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     * @return –ò–º—è –º–∏—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     *
     * Ruft den Entwicklungs-Weltnamen ab
     * @return Entwicklungs-Weltname
     */
    public String getDevWorldName() {
        // Legacy support - now returns the dev mode world name
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –≤–µ—Ä—Å–∏–π - —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–∏—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        // Legacy-Unterst√ºtzung - gibt jetzt den Entwicklungsmodus-Weltnamen zur√ºck
        if (dualMode == WorldDualMode.DEV) {
            return getWorldName();
        }
        return "megacreative_" + id + "-code";
    }
    
    /**
     * Gets the play world name
     * @return Play world name
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –º–∏—Ä–∞ –∏–≥—Ä—ã
     * @return –ò–º—è –º–∏—Ä–∞ –∏–≥—Ä—ã
     *
     * Ruft den Spiel-Weltnamen ab
     * @return Spiel-Weltname
     */
    public String getPlayWorldName() {
        if (dualMode == WorldDualMode.PLAY) {
            return getWorldName();
        }
        return "megacreative_" + id + "-world";
    }
    
    /**
     * Gets the paired world name
     * @return Paired world name or null
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–∞—Ä–Ω–æ–≥–æ –º–∏—Ä–∞
     * @return –ò–º—è –ø–∞—Ä–Ω–æ–≥–æ –º–∏—Ä–∞ –∏–ª–∏ null
     *
     * Ruft den gekoppelten Weltnamen ab
     * @return Gekoppelter Weltname oder null
     */
    public String getPairedWorldName() {
        if (pairedWorldId != null) {
            switch (dualMode) {
                case DEV:
                    return "megacreative_" + pairedWorldId + "-world";
                case PLAY:
                    return "megacreative_" + pairedWorldId + "-code";
                default:
                    return null;
            }
        }
        return null;
    }
    
    /**
     * Checks if player is the owner
     * @param player Player to check
     * @return true if player is owner
     *
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
     *
     * Pr√ºft, ob der Spieler der Besitzer ist
     * @param player Zu pr√ºfender Spieler
     * @return true, wenn der Spieler der Besitzer ist
     */
    public boolean isOwner(Player player) {
        return player.getUniqueId().equals(ownerId);
    }
    
    /**
     * Checks if player is a trusted builder
     * @param player Player to check
     * @return true if player is trusted builder
     *
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–º
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–º
     *
     * Pr√ºft, ob der Spieler ein vertrauensw√ºrdiger Baumeister ist
     * @param player Zu pr√ºfender Spieler
     * @return true, wenn der Spieler ein vertrauensw√ºrdiger Baumeister ist
     */
    public boolean isTrustedBuilder(Player player) {
        if (trustedBuilders == null) {
            trustedBuilders = new HashSet<>();
        }
        return trustedBuilders.contains(player.getUniqueId()) || isOwner(player);
    }
    
    /**
     * Checks if player is a trusted coder
     * @param player Player to check
     * @return true if player is trusted coder
     *
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∫–æ–¥–µ—Ä–æ–º
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∫–æ–¥–µ—Ä–æ–º
     *
     * Pr√ºft, ob der Spieler ein vertrauensw√ºrdiger Coder ist
     * @param player Zu pr√ºfender Spieler
     * @return true, wenn der Spieler ein vertrauensw√ºrdiger Coder ist
     */
    public boolean isTrustedCoder(Player player) {
        if (trustedCoders == null) {
            trustedCoders = new HashSet<>();
        }
        return trustedCoders.contains(player.getUniqueId()) || isOwner(player);
    }
    
    /**
     * Checks if player can edit the world
     * @param player Player to check
     * @return true if player can edit
     *
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏—Ä
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
     *
     * Pr√ºft, ob der Spieler die Welt bearbeiten kann
     * @param player Zu pr√ºfender Spieler
     * @return true, wenn der Spieler bearbeiten kann
     */
    public boolean canEdit(Player player) {
        // üéÜ ENHANCED: Use advanced permission system with fallback to legacy
        // üéÜ ENHANCED: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –æ—Ç–∫–∞—Ç–æ–º –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
        // üéÜ ENHANCED: Erweitertes Berechtigungssystem mit Fallback zur Legacy-Version verwenden
        if (permissions != null) {
            return isOwner(player) || 
                   permissions.canAccess(player, dualMode) && 
                   permissions.canPerform(player, "build", dualMode);
        }
        // Legacy fallback
        // –û—Ç–∫–∞—Ç –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–∏
        // Legacy-Fallback
        return isOwner(player) || isTrustedBuilder(player);
    }
    
    /**
     * Checks if player can code in the world
     * @param player Player to check
     * @return true if player can code
     *
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –≤ –º–∏—Ä–µ
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å
     *
     * Pr√ºft, ob der Spieler in der Welt codieren kann
     * @param player Zu pr√ºfender Spieler
     * @return true, wenn der Spieler codieren kann
     */
    public boolean canCode(Player player) {
        // üéÜ ENHANCED: Use advanced permission system with fallback to legacy
        // üéÜ ENHANCED: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –æ—Ç–∫–∞—Ç–æ–º –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
        // üéÜ ENHANCED: Erweitertes Berechtigungssystem mit Fallback zur Legacy-Version verwenden
        if (permissions != null) {
            return isOwner(player) || 
                   permissions.canAccess(player, dualMode) && 
                   permissions.canPerform(player, "code", dualMode);
        }
        // Legacy fallback
        // –û—Ç–∫–∞—Ç –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–∏
        // Legacy-Fallback
        return isOwner(player) || isTrustedCoder(player);
    }
    
    /**
     * üéÜ ENHANCED: Checks if player can access the world in specific mode
     *
     * üéÜ ENHANCED: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏—Ä—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
     *
     * üéÜ ENHANCED: Pr√ºft, ob der Spieler auf die Welt im bestimmten Modus zugreifen kann
     */
    public boolean canAccess(Player player, WorldDualMode mode) {
        if (permissions != null) {
            return isOwner(player) || permissions.canAccess(player, mode);
        }
        // Legacy fallback - public access
        // –û—Ç–∫–∞—Ç –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–∏ - –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
        // Legacy-Fallback - √∂ffentlicher Zugriff
        return !isPrivate || isOwner(player) || isTrustedBuilder(player);
    }
    
    /**
     * üéÜ ENHANCED: Checks if player can perform a specific action
     *
     * üéÜ ENHANCED: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     *
     * üéÜ ENHANCED: Pr√ºft, ob der Spieler eine bestimmte Aktion durchf√ºhren kann
     */
    public boolean canPerform(Player player, String action) {
        if (permissions != null) {
            return isOwner(player) || permissions.canPerform(player, action, dualMode);
        }
        // Legacy fallback
        // –û—Ç–∫–∞—Ç –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –≤–µ—Ä—Å–∏–∏
        // Legacy-Fallback
        switch (action.toLowerCase()) {
            case "build":
            case "edit":
                return canEdit(player);
            case "code":
                return canCode(player);
            default:
                return !isPrivate || isOwner(player);
        }
    }
    
    /**
     * Adds a player to online players
     * @param playerId Player ID to add
     *
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
     * @param playerId ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     *
     * F√ºgt einen Spieler zu den Online-Spielern hinzu
     * @param playerId Spieler-ID zum Hinzuf√ºgen
     */
    public void addOnlinePlayer(UUID playerId) {
        if (onlinePlayers == null) {
            onlinePlayers = new HashSet<>();
        }
        onlinePlayers.add(playerId);
        updateActivity();
    }
    
    /**
     * Removes a player from online players
     * @param playerId Player ID to remove
     *
     * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
     * @param playerId ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     *
     * Entfernt einen Spieler von den Online-Spielern
     * @param playerId Spieler-ID zum Entfernen
     */
    public void removeOnlinePlayer(UUID playerId) {
        if (onlinePlayers == null) {
            onlinePlayers = new HashSet<>();
        }
        onlinePlayers.remove(playerId);
    }
    
    /**
     * Gets the online player count
     * @return Number of online players
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
     * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
     *
     * Ruft die Anzahl der Online-Spieler ab
     * @return Anzahl der Online-Spieler
     */
    public int getOnlineCount() {
        if (onlinePlayers == null) {
            onlinePlayers = new HashSet<>();
        }
        return onlinePlayers.size();
    }
    
    /**
     * Updates the last activity time
     *
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     *
     * Aktualisiert die letzte Aktivit√§tszeit
     */
    public void updateActivity() {
        this.lastActivity = System.currentTimeMillis();
    }
    
    /**
     * Gets the code handler for this world
     * @return The code handler
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞
     * @return –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞
     *
     * Ruft den Code-Handler f√ºr diese Welt ab
     * @return Der Code-Handler
     */
    public CodeHandler getCodeHandler() {
        return codeHandler;
    }
    
    /**
     * Sets the code handler for this world
     * @param codeHandler The code handler to set
     *
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞
     * @param codeHandler –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
     *
     * Setzt den Code-Handler f√ºr diese Welt
     * @param codeHandler Der zu setzende Code-Handler
     */
    public void setCodeHandler(CodeHandler codeHandler) {
        this.codeHandler = codeHandler;
    }
    
    /**
     * Gets the script engine for this world
     * @return The script engine
     *
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–≤–∏–∂–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–∏—Ä–∞
     * @return –î–≤–∏–∂–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
     *
     * Ruft die Skript-Engine f√ºr diese Welt ab
     * @return Die Skript-Engine
     */
    public ScriptEngine getScriptEngine() {
        // Get the script engine from the plugin's service registry
        return MegaCreative.getInstance().getServiceRegistry().getScriptEngine();
    }
    
    /**
     * Adds a like from a player
     * @param playerId Player ID who liked
     * @return true if like was added, false if already liked
     *
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –æ—Ç –∏–≥—Ä–æ–∫–∞
     * @param playerId ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
     * @return true, –µ—Å–ª–∏ –ª–∞–π–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, false, –µ—Å–ª–∏ —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
     *
     * F√ºgt ein Like von einem Spieler hinzu
     * @param playerId Spieler-ID, der geliked hat
     * @return true, wenn Like hinzugef√ºgt wurde, false, wenn bereits geliked
     */
    public boolean addLike(UUID playerId) {
        if (likedBy.contains(playerId)) {
            return false;
        }
        if (dislikedBy.contains(playerId)) {
            dislikedBy.remove(playerId);
            dislikes--;
        }
        likedBy.add(playerId);
        likes++;
        return true;
    }
    
    /**
     * Adds a dislike from a player
     * @param playerId Player ID who disliked
     * @return true if dislike was added, false if already disliked
     *
     * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∑–ª–∞–π–∫ –æ—Ç –∏–≥—Ä–æ–∫–∞
     * @param playerId ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫
     * @return true, –µ—Å–ª–∏ –¥–∏–∑–ª–∞–π–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, false, –µ—Å–ª–∏ —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
     *
     * F√ºgt ein Dislike von einem Spieler hinzu
     * @param playerId Spieler-ID, der dislikt hat
     * @return true, wenn Dislike hinzugef√ºgt wurde, false, wenn bereits dislikt
     */
    public boolean addDislike(UUID playerId) {
        if (dislikedBy.contains(playerId)) {
            return false;
        }
        if (likedBy.contains(playerId)) {
            likedBy.remove(playerId);
            likes--;
        }
        dislikedBy.add(playerId);
        dislikes++;
        return true;
    }
    
    /**
     * Adds a player to favorites
     * @param playerId Player ID to add to favorites
     *
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     * @param playerId ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     *
     * F√ºgt einen Spieler zu den Favoriten hinzu
     * @param playerId Spieler-ID zum Hinzuf√ºgen zu den Favoriten
     */
    public void addToFavorites(UUID playerId) {
        favoriteBy.add(playerId);
    }
    
    /**
     * Removes a player from favorites
     * @param playerId Player ID to remove from favorites
     *
     * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     * @param playerId ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
     *
     * Entfernt einen Spieler von den Favoriten
     * @param playerId Spieler-ID zum Entfernen von den Favoriten
     */
    public void removeFromFavorites(UUID playerId) {
        favoriteBy.remove(playerId);
    }
    
    /**
     * Checks if player is in favorites
     * @param playerId Player ID to check
     * @return true if player is in favorites
     *
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
     * @param playerId ID –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
     *
     * Pr√ºft, ob der Spieler in den Favoriten ist
     * @param playerId Spieler-ID zum Pr√ºfen
     * @return true, wenn der Spieler in den Favoriten ist
     */
    public boolean isFavorite(UUID playerId) {
        return favoriteBy.contains(playerId);
    }
    
    /**
     * Adds a comment to the world
     * @param comment Comment to add
     *
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–∏—Ä—É
     * @param comment –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     *
     * F√ºgt einen Kommentar zur Welt hinzu
     * @param comment Hinzuzuf√ºgender Kommentar
     */
    public void addComment(WorldComment comment) {
        comments.add(comment);
    }
    
    /**
     * Gets the world rating (likes - dislikes)
     * @return World rating
     *
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –º–∏—Ä–∞ (–ª–∞–π–∫–∏ - –¥–∏–∑–ª–∞–π–∫–∏)
     * @return –†–µ–π—Ç–∏–Ω–≥ –º–∏—Ä–∞
     *
     * Ruft die Weltrating ab (Likes - Dislikes)
     * @return Weltrating
     */
    public int getRating() {
        return likes - dislikes;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∏—Ä–µ
     * @return –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
     *
     * Gets list of all players in the world
     * @return List of players
     *
     * Ruft Liste aller Spieler in der Welt ab
     * @return Liste der Spieler
     */
    public List<Player> getPlayers() {
        List<Player> players = new ArrayList<>();
        if (onlinePlayers != null) {
            for (UUID playerId : onlinePlayers) {
                Player player = org.bukkit.Bukkit.getPlayer(playerId);
                if (player != null && player.isOnline()) {
                    players.add(player);
                }
            }
        }
        return players;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    // Additional getters for compatibility
    // Zus√§tzliche Getter f√ºr Kompatibilit√§t
    public String getId() {
        return id;
    }
    
    /**
     * @return The world ID as a UUID
     *
     * @return ID –º–∏—Ä–∞ –∫–∞–∫ UUID
     *
     * @return Die Welt-ID als UUID
     */
    public UUID getWorldId() {
        try {
            return UUID.fromString(id);
        } catch (IllegalArgumentException e) {
            // Generate a consistent UUID from the string ID if it's not a valid UUID
            // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π UUID –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ ID, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π UUID
            // Einen konsistenten UUID aus der Zeichenfolgen-ID generieren, wenn es kein g√ºltiger UUID ist
            return UUID.nameUUIDFromBytes(id.getBytes(java.nio.charset.StandardCharsets.UTF_8));
        }
    }
    
    public String getName() {
        return name;
    }
    
    public String getDescription() {
        return description;
    }
    
    public UUID getOwnerId() {
        return ownerId;
    }
    
    public String getOwnerName() {
        return ownerName;
    }
    
    public CreativeWorldType getWorldType() {
        return worldType;
    }
    
    public WorldMode getMode() {
        return mode;
    }
    
    public boolean isPrivate() {
        return isPrivate;
    }
    
    public long getCreatedTime() {
        return createdTime;
    }
    
    public long getLastActivity() {
        return lastActivity;
    }
    
    public WorldFlags getFlags() {
        return flags;
    }
    
    public Set<UUID> getTrustedBuilders() {
        return trustedBuilders;
    }

    public void setTrustedBuilders(Set<UUID> trustedBuilders) {
        this.trustedBuilders = trustedBuilders != null ? new HashSet<>(trustedBuilders) : new HashSet<>();
    }

    public Set<UUID> getTrustedCoders() {
        return trustedCoders != null ? trustedCoders : (trustedCoders = new HashSet<>());
    }

    public void setTrustedCoders(Set<UUID> trustedCoders) {
        this.trustedCoders = trustedCoders != null ? new HashSet<>(trustedCoders) : new HashSet<>();
    }

    public Set<UUID> getTrustedAdmins() {
        return trustedAdmins != null ? trustedAdmins : (trustedAdmins = new HashSet<>());
    }

    public void setTrustedAdmins(Set<UUID> trustedAdmins) {
        this.trustedAdmins = trustedAdmins;
    }

    public int getLikes() {
        return likes;
    }

    public void setLikes(int likes) {
        this.likes = likes;
    }

    public int getDislikes() {
        return dislikes;
    }

    public void setDislikes(int dislikes) {
        this.dislikes = dislikes;
    }

    public Set<UUID> getLikedBy() {
        return likedBy;
    }

    public void setLikedBy(Set<UUID> likedBy) {
        this.likedBy = likedBy;
    }

    public Set<UUID> getDislikedBy() {
        return dislikedBy;
    }

    public void setDislikedBy(Set<UUID> dislikedBy) {
        this.dislikedBy = dislikedBy;
    }

    public Set<UUID> getFavoriteBy() {
        return favoriteBy;
    }

    public void setFavoriteBy(Set<UUID> favoriteBy) {
        this.favoriteBy = favoriteBy;
    }

    public List<WorldComment> getComments() {
        return comments;
    }
    
    public List<CodeScript> getScripts() {
        return scripts;
    }
    
    public Set<UUID> getOnlinePlayers() {
        return onlinePlayers;
    }
    
    /**
     * üéÜ ENHANCED: Dual world getters/setters
     *
     * üéÜ ENHANCED: –ì–µ—Ç—Ç–µ—Ä—ã/—Å–µ—Ç—Ç–µ—Ä—ã –¥–≤–æ–π–Ω–æ–≥–æ –º–∏—Ä–∞
     *
     * üéÜ ENHANCED: Duale Welt-Getter/Setter
     */
    public WorldDualMode getDualMode() {
        return dualMode != null ? dualMode : WorldDualMode.STANDALONE;
    }
    
    public void setDualMode(WorldDualMode dualMode) {
        this.dualMode = dualMode;
    }
    
    public String getPairedWorldId() {
        return pairedWorldId;
    }
    
    public void setPairedWorldId(String pairedWorldId) {
        this.pairedWorldId = pairedWorldId;
    }
    
    public boolean isPaired() {
        return pairedWorldId != null;
    }
    
    public boolean isDevWorld() {
        return dualMode == WorldDualMode.DEV;
    }
    
    public boolean isPlayWorld() {
        return dualMode == WorldDualMode.PLAY;
    }
    
    public void setMode(WorldMode mode) {
        this.mode = mode;
    }
    
    /**
     * üéÜ ENHANCED: Permission system getters/setters
     *
     * üéÜ ENHANCED: –ì–µ—Ç—Ç–µ—Ä—ã/—Å–µ—Ç—Ç–µ—Ä—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     *
     * üéÜ ENHANCED: Berechtigungssystem-Getter/Setter
     */
    public WorldPermissions getPermissions() {
        if (permissions == null) {
            permissions = new WorldPermissions();
        }
        return permissions;
    }
    
    public void setPermissions(WorldPermissions permissions) {
        this.permissions = permissions;
    }
    
    /**
     * Gets permission summary for display
     *
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     *
     * Ruft Berechtigungszusammenfassung f√ºr die Anzeige ab
     */
    public Map<String, Object> getPermissionsSummary() {
        return getPermissions().getPermissionsSummary();
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public void setOwnerId(UUID ownerId) {
        this.ownerId = ownerId;
    }
    
    public void setOwnerName(String ownerName) {
        this.ownerName = ownerName;
    }
    
    public void setWorldType(CreativeWorldType worldType) {
        this.worldType = worldType;
    }
    
    public void setPrivate(boolean isPrivate) {
        this.isPrivate = isPrivate;
    }
    
    public void setCreatedTime(long createdTime) {
        this.createdTime = createdTime;
    }
    
    public void setLastActivity(long lastActivity) {
        this.lastActivity = lastActivity;
    }
    
    public void setFlags(WorldFlags flags) {
        this.flags = flags;
    }
    
    public void setComments(List<WorldComment> comments) {
        this.comments = comments;
    }
    
    public void setScripts(List<CodeScript> scripts) {
        this.scripts = scripts;
    }
    
    public void setOnlinePlayers(Set<UUID> onlinePlayers) {
        this.onlinePlayers = onlinePlayers;
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CreativeWorld that = (CreativeWorld) o;
        return isPrivate == that.isPrivate &&
               createdTime == that.createdTime &&
               lastActivity == that.lastActivity &&
               likes == that.likes &&
               dislikes == that.dislikes &&
               Objects.equals(id, that.id) &&
               Objects.equals(name, that.name) &&
               Objects.equals(description, that.description) &&
               Objects.equals(ownerId, that.ownerId) &&
               Objects.equals(ownerName, that.ownerName) &&
               worldType == that.worldType &&
               mode == that.mode &&
               Objects.equals(flags, that.flags) &&
               Objects.equals(trustedBuilders, that.trustedBuilders) &&
               Objects.equals(trustedCoders, that.trustedCoders) &&
               Objects.equals(trustedAdmins, that.trustedAdmins) &&
               Objects.equals(likedBy, that.likedBy) &&
               Objects.equals(dislikedBy, that.dislikedBy) &&
               Objects.equals(favoriteBy, that.favoriteBy) &&
               Objects.equals(comments, that.comments) &&
               Objects.equals(scripts, that.scripts) &&
               Objects.equals(onlinePlayers, that.onlinePlayers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, name, description, ownerId, ownerName, worldType, mode, 
                          isPrivate, createdTime, lastActivity, flags, trustedBuilders, 
                          trustedCoders, trustedAdmins, likes, dislikes, likedBy, 
                          dislikedBy, favoriteBy, comments, scripts, onlinePlayers);
    }
    
    @Override
    public String toString() {
        return "CreativeWorld{" +
               "id='" + id + '\'' +
               ", name='" + name + '\'' +
               ", description='" + description + '\'' +
               ", ownerId=" + ownerId +
               ", ownerName='" + ownerName + '\'' +
               ", worldType=" + worldType +
               ", mode=" + mode +
               ", isPrivate=" + isPrivate +
               ", createdTime=" + createdTime +
               ", lastActivity=" + lastActivity +
               ", flags=" + flags +
               ", trustedBuilders=" + trustedBuilders.size() +
               ", trustedCoders=" + trustedCoders.size() +
               ", trustedAdmins=" + (trustedAdmins != null ? trustedAdmins.size() : 0) +
               ", likes=" + likes +
               ", dislikes=" + dislikes +
               ", likedBy=" + (likedBy != null ? likedBy.size() : 0) +
               ", dislikedBy=" + (dislikedBy != null ? dislikedBy.size() : 0) +
               ", favoriteBy=" + (favoriteBy != null ? favoriteBy.size() : 0) +
               ", comments=" + (comments != null ? comments.size() : 0) +
               ", scripts=" + (scripts != null ? scripts.size() : 0) +
               ", onlinePlayers=" + (onlinePlayers != null ? onlinePlayers.size() : 0) +
               '}';
    }
}