package com.megacreative.models;


import com.megacreative.coding.CodeScript;
import java.util.UUID;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;

/**
 * Serializable data transfer object for CreativeWorld.
 * Contains only the essential data needed for persistence, 
 * avoiding complex Bukkit objects that cause serialization issues.
 *
 * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CreativeWorld.
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è,
 * –∏–∑–±–µ–≥–∞—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ Bukkit, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
 *
 * Serialisierbares Daten√ºbertragungsobjekt f√ºr CreativeWorld.
 * Enth√§lt nur die wesentlichen Daten, die f√ºr die Persistenz ben√∂tigt werden,
 * und vermeidet komplexe Bukkit-Objekte, die Serialisierungsprobleme verursachen.
 */
public class CreativeWorldData {
    public String id;
    public String name;
    public String description;
    public UUID ownerId;
    public String ownerName;
    public CreativeWorldType worldType;
    public WorldMode mode;
    public boolean isPrivate;
    public long createdTime;
    public long lastActivity;
    public WorldFlags flags;
    public Set<UUID> trustedBuilders;
    public Set<UUID> trustedCoders;
    public int likes;
    public int dislikes;
    public Set<UUID> likedBy;
    public Set<UUID> dislikedBy;
    public Set<UUID> favoriteBy;
    public List<WorldComment> comments;
    public List<CodeScriptData> scripts;
    
    /**
     * üéÜ ENHANCED: Dual world support
     *
     * üéÜ ENHANCED: –î–≤–æ–π–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∏—Ä–æ–≤
     *
     * üéÜ ENHANCED: Duale Weltunterst√ºtzung
     */
    public String pairedWorldId;
    public CreativeWorld.WorldDualMode dualMode;
    
    /**
     * Empty constructor for Gson
     *
     * –ü—É—Å—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Gson
     *
     * Leerer Konstruktor f√ºr Gson
     */
    public CreativeWorldData() {}

    /**
     * Constructor to create from CreativeWorld
     * @param world Source CreativeWorld
     *
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ CreativeWorld
     * @param world –ò—Å—Ö–æ–¥–Ω—ã–π CreativeWorld
     *
     * Konstruktor zum Erstellen aus CreativeWorld
     * @param world Quell-CreativeWorld
     */
    public CreativeWorldData(CreativeWorld world) {
        this.id = world.getId();
        this.name = world.getName();
        this.description = world.getDescription();
        this.ownerId = world.getOwnerId();
        this.ownerName = world.getOwnerName();
        this.worldType = world.getWorldType();
        this.mode = world.getMode();
        this.isPrivate = world.isPrivate();
        this.createdTime = world.getCreatedTime();
        this.lastActivity = world.getLastActivity();
        this.flags = world.getFlags();
        this.trustedBuilders = world.getTrustedBuilders();
        this.trustedCoders = world.getTrustedCoders();
        this.likes = world.getLikes();
        this.dislikes = world.getDislikes();
        this.likedBy = world.getLikedBy();
        this.dislikedBy = world.getDislikedBy();
        this.favoriteBy = world.getFavoriteBy();
        this.comments = world.getComments();
        this.scripts = new ArrayList<>();
        if (world.getScripts() != null) {
            for (com.megacreative.coding.CodeScript script : world.getScripts()) {
                this.scripts.add(new CodeScriptData(script));
            }
        }
        
        
        
        
        this.pairedWorldId = world.getPairedWorldId();
        this.dualMode = world.getDualMode();
    }
}