package com.megacreative.interfaces;

import org.bukkit.entity.Player;

import java.util.Map;
import java.util.UUID;

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º–∏
 */
public interface IPlayerManager {
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
     */
    void initialize();
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    void registerPlayer(Player player);
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     * @param player –ò–≥—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    void unregisterPlayer(Player player);
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param playerId UUID –∏–≥—Ä–æ–∫–∞
     * @return –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    Map<String, Object> getPlayerData(UUID playerId);
    
    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
     */
    void shutdown();
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param playerId UUID –∏–≥—Ä–æ–∫–∞
     * @param data –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     */
    void setPlayerData(UUID playerId, Map<String, Object> data);
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
     * @param playerId UUID –∏–≥—Ä–æ–∫–∞
     * @return true –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
     */
    boolean isPlayerRegistered(UUID playerId);
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
     * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
     */
    int getPlayerCount();
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    void saveAllPlayerData();
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
     */
    void loadAllPlayerData();
    
    /**
     * –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
     * @param playerId UUID –∏–≥—Ä–æ–∫–∞
     */
    void clearPlayerData(UUID playerId);
    
    /**
     * –í—ã–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–≥—Ä–æ–∫—É
     * @param player –ò–≥—Ä–æ–∫
     */
    void giveStarterItems(Player player);
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã–º –¥–ª—è –∏–≥—Ä–æ–∫–∞
     * @param playerId ID –∏–≥—Ä–æ–∫–∞
     * @param worldId ID –º–∏—Ä–∞
     * @return true –µ—Å–ª–∏ –º–∏—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
     */
    boolean isFavorite(UUID playerId, String worldId);
    
    // üéÜ ENHANCED: World tracking methods for dual world architecture
    
    /**
     * Tracks player entry into a world and mode
     * @param player Player entering world
     * @param worldId World ID
     * @param mode World mode (DEV, PLAY, etc.)
     */
    void trackPlayerWorldEntry(Player player, String worldId, String mode);
    
    /**
     * Tracks player exit from a world
     * @param player Player leaving world
     * @param worldId World ID
     */
    void trackPlayerWorldExit(Player player, String worldId);
    
    /**
     * Gets the current world and mode for a player
     * @param playerId Player UUID
     * @return Map with worldId and mode, or null if not tracked
     */
    Map<String, String> getCurrentPlayerLocation(UUID playerId);
    
    /**
     * Gets all players currently in a specific world
     * @param worldId World ID
     * @return Map of player UUIDs to their modes
     */
    Map<UUID, String> getPlayersInWorld(String worldId);
    
    /**
     * Gets world statistics for analytics
     * @param worldId World ID
     * @return Statistics including unique players, time spent, etc.
     */
    Map<String, Object> getWorldStatistics(String worldId);
    
    /**
     * Gets player session time in current world
     * @param playerId Player UUID
     * @return Session time in milliseconds, or 0 if not in a world
     */
    long getPlayerSessionTime(UUID playerId);
}
