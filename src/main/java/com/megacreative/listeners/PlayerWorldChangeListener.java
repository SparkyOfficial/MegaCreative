package com.megacreative.listeners;

import com.megacreative.MegaCreative;
import com.megacreative.coding.CodingItems;
import com.megacreative.models.CreativeWorld;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerChangedWorldEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.ArrayList;
import java.util.List;

/**
 * Listener for player world change events
 *
 * –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã –º–∏—Ä–∞ –∏–≥—Ä–æ–∫–∞–º–∏
 *
 * Listener f√ºr Spieler-Weltwechsel-Ereignisse
 */
public class PlayerWorldChangeListener implements Listener {
    private final MegaCreative plugin;

    /**
     * Constructor for PlayerWorldChangeListener
     * @param plugin the main plugin
     *
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è PlayerWorldChangeListener
     * @param plugin –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
     *
     * Konstruktor f√ºr PlayerWorldChangeListener
     * @param plugin das Haupt-Plugin
     */
    public PlayerWorldChangeListener(MegaCreative plugin) {
        this.plugin = plugin;
    }

    /**
     * Handles world change events
     * @param event the player changed world event
     *
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã –º–∏—Ä–∞
     * @param event —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã –º–∏—Ä–∞ –∏–≥—Ä–æ–∫–æ–º
     *
     * Verarbeitet Weltwechsel-Ereignisse
     * @param event das Spieler-Weltwechsel-Ereignis
     */
    @EventHandler
    public void onWorldChange(PlayerChangedWorldEvent event) {
        Player player = event.getPlayer();
        World fromWorld = event.getFrom();
        World toWorld = player.getWorld();
        
        // üéÜ ENHANCED: Track world changes for analytics
        trackWorldChange(player, fromWorld, toWorld);
        
        // –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –º–µ–Ω—è–µ—Ç –º–∏—Ä, –∑–∞–Ω–æ–≤–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–º—É —Å–∫–æ—Ä–±–æ—Ä–¥
        plugin.getScoreboardManager().setScoreboard(player);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ dev-–º–∏—Ä
        if (toWorld.getName().endsWith("_dev") || toWorld.getName().endsWith("-code")) {
            List<String> missingItems = getMissingCodingItems(player);
            if (!missingItems.isEmpty()) {
                CodingItems.giveMissingItems(player, missingItems);
            }
        }
    }
    
    /**
     * Handles player join events
     * @param event the player join event
     *
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param event —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     *
     * Verarbeitet Spieler-Beitritts-Ereignisse
     * @param event das Spieler-Beitritts-Ereignis
     */
    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        World world = player.getWorld();
        
        // üéÜ ENHANCED: Track join to current world
        // üéÜ –£–°–û–í–ï–†–®–ï–ù–°–¢–í–û–í–ê–ù–ù–ê–Ø: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Ç–µ–∫—É—â–∏–π –º–∏—Ä
        // üéÜ VERBESSERTE: Verfolgung des Beitritts zur aktuellen Welt
        CreativeWorld creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(world);
        if (creativeWorld != null) {
            String mode = determineWorldMode(world, creativeWorld);
            plugin.getPlayerManager().trackPlayerWorldEntry(player, creativeWorld.getId(), mode);
        }
    }
    
    /**
     * Handles player quit events
     * @param event the player quit event
     *
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤
     * @param event —Å–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     *
     * Verarbeitet Spieler-Verlassen-Ereignisse
     * @param event das Spieler-Verlassen-Ereignis
     */
    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        Player player = event.getPlayer();
        World world = player.getWorld();
        
        // üéÜ ENHANCED: Track exit from current world
        // üéÜ –£–°–û–í–ï–†–®–ï–ù–°–¢–í–û–í–ê–ù–ù–ê–Ø: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–∏—Ä–∞
        // üéÜ VERBESSERTE: Verfolgung des Verlassens der aktuellen Welt
        CreativeWorld creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(world);
        if (creativeWorld != null) {
            plugin.getPlayerManager().trackPlayerWorldExit(player, creativeWorld.getId());
        }
    }
    
    /**
     * üéÜ ENHANCED: Tracks world changes for dual world analytics
     *
     * üéÜ –£–°–û–í–ï–†–®–ï–ù–°–¢–í–û–í–ê–ù–ù–ê–Ø: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–∞—Ä–Ω—ã—Ö –º–∏—Ä–æ–≤
     *
     * üéÜ VERBESSERTE: Verfolgt Weltwechsel f√ºr duale Welt-Analysen
     */
    private void trackWorldChange(Player player, World fromWorld, World toWorld) {
        // Track exit from previous world
        CreativeWorld fromCreativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(fromWorld);
        if (fromCreativeWorld != null) {
            plugin.getPlayerManager().trackPlayerWorldExit(player, fromCreativeWorld.getId());
        }
        
        // Track entry to new world
        CreativeWorld toCreativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(toWorld);
        if (toCreativeWorld != null) {
            String mode = determineWorldMode(toWorld, toCreativeWorld);
            plugin.getPlayerManager().trackPlayerWorldEntry(player, toCreativeWorld.getId(), mode);
        }
    }
    
    /**
     * üéÜ ENHANCED: Determines the world mode based on world name and dual architecture
     *
     * üéÜ –£–°–û–í–ï–†–®–ï–ù–°–¢–í–û–í–ê–ù–ù–ê–Ø: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º –º–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –º–∏—Ä–∞ –∏ –¥–≤–æ–π–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
     *
     * üéÜ VERBESSERTE: Bestimmt den Weltmodus basierend auf dem Weltname und der dualen Architektur
     */
    private String determineWorldMode(World world, CreativeWorld creativeWorld) {
        String worldName = world.getName();
        
        if (worldName.endsWith("-code") || worldName.endsWith("_dev")) {
            return "DEV";
        } else if (worldName.endsWith("-world")) {
            return "PLAY";
        } else if (creativeWorld.getDualMode() != null) {
            return creativeWorld.getDualMode().name();
        } else {
            return "UNKNOWN";
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫—É
     *
     * Checks which coding items are missing for the player
     *
     * Pr√ºft, welche Coding-Items dem Spieler fehlen
     */
    private List<String> getMissingCodingItems(Player player) {
        List<String> missingItems = new ArrayList<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        boolean hasEventBlock = false;
        boolean hasActionBlock = false;
        boolean hasConditionBlock = false;
        boolean hasVariableBlock = false;
        boolean hasRepeatBlock = false;
        
        for (var item : player.getInventory().getContents()) {
            if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {
                String name = item.getItemMeta().getDisplayName();

                if (name.contains("–°–æ–±—ã—Ç–∏–µ –∏–≥—Ä–æ–∫–∞")) hasEventBlock = true;
                if (name.contains("–î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞")) hasActionBlock = true;
                if (name.contains("–£—Å–ª–æ–≤–∏–µ")) hasConditionBlock = true;
                if (name.contains("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è")) hasVariableBlock = true;
                if (name.contains("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")) hasRepeatBlock = true;
            }
        }

        if (!hasEventBlock) missingItems.add("–ë–ª–æ–∫ —Å–æ–±—ã—Ç–∏—è");
        if (!hasActionBlock) missingItems.add("–ë–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è");
        if (!hasConditionBlock) missingItems.add("–ë–ª–æ–∫ —É—Å–ª–æ–≤–∏—è");
        if (!hasVariableBlock) missingItems.add("–ë–ª–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π");
        if (!hasRepeatBlock) missingItems.add("–ë–ª–æ–∫ –ø–æ–≤—Ç–æ—Ä–∞");
        
        return missingItems;
    }
}