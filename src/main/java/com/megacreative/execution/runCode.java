package com.megacreative.execution;

import com.megacreative.MegaCreative;
import com.megacreative.configs.WorldCode;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.CodeScript;
import com.megacreative.coding.ScriptEngine;
import com.megacreative.coding.executors.ExecutionResult;
import com.megacreative.models.CreativeWorld;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Chest;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.*;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.*;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

/**
 * üéÜ –î–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ —Å—Ç–∏–ª–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WorldCode, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–∏—Å—Ç–µ–º–µ runCode FrameLand.
 * –≠—Ç–æ –º–æ—Å—Ç –º–µ–∂–¥—É —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–≥—Ä—ã.
 *
 * üéÜ Reference System-Style Code Execution Engine
 * 
 * Executes compiled code strings from WorldCode configuration, similar to FrameLand's runCode system.
 * This is the bridge between compiled visual code and actual game execution.
 *
 * üéÜ Code-Ausf√ºhrungs-Engine im Referenzsystem-Stil
 * 
 * F√ºhrt kompilierte Code-Zeichenfolgen aus der WorldCode-Konfiguration aus, √§hnlich wie das runCode-System von FrameLand.
 * Dies ist die Br√ºcke zwischen kompiliertem visuellem Code und der tats√§chlichen Spielausf√ºhrung.
 */
public class runCode implements Listener {
    
    private final MegaCreative plugin;
    private final ScriptEngine scriptEngine;
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
     * @param plugin –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
     *
     * Initializes code execution engine
     * @param plugin Main plugin instance
     *
     * Initialisiert die Code-Ausf√ºhrungs-Engine
     * @param plugin Hauptplugin-Instanz
     */
    public runCode(MegaCreative plugin) {
        this.plugin = plugin;
        this.scriptEngine = plugin.getServiceRegistry().getService(ScriptEngine.class);
        plugin.getLogger().info("üéÜ runCode execution engine initialized");
        // üéÜ –î–≤–∏–∂–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ runCode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        // üéÜ runCode-Ausf√ºhrungs-Engine initialisiert
    }
    
    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ===
    // === Event Handlers ===
    // === Ereignis-Handler ===
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     * @param event –°–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     *
     * Handles player join event
     * @param event Player join event
     *
     * Behandelt das Spieler-Beitrittsereignis
     * @param event Spieler-Beitrittsereignis
     */
    @EventHandler
    public void joinEvent(PlayerJoinEvent event) {
        executeWorldCode(event.getPlayer(), "joinEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     * @param event –°–æ–±—ã—Ç–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
     *
     * Handles player quit event
     * @param event Player quit event
     *
     * Behandelt das Spieler-Austrittsereignis
     * @param event Spieler-Austrittsereignis
     */
    @EventHandler
    public void quitEvent(PlayerQuitEvent event) {
        executeWorldCode(event.getPlayer(), "quitEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–∞
     * @param event –°–æ–±—ã—Ç–∏–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–∞
     *
     * Handles block break event
     * @param event Block break event
     *
     * Behandelt das Block-Zerst√∂rungsereignis
     * @param event Block-Zerst√∂rungsereignis
     */
    @EventHandler
    public void breakEvent(BlockBreakEvent event) {
        executeWorldCode(event.getPlayer(), "breakEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–∞
     * @param event –°–æ–±—ã—Ç–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–∞
     *
     * Handles block place event
     * @param event Block place event
     *
     * Behandelt das Block-Platzierungsereignis
     * @param event Block-Platzierungsereignis
     */
    @EventHandler
    public void placeEvent(BlockPlaceEvent event) {
        executeWorldCode(event.getPlayer(), "placeEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     * @param event –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
     *
     * Handles player move event
     * @param event Player move event
     *
     * Behandelt das Spieler-Bewegungsereignis
     * @param event Spieler-Bewegungsereignis
     */
    @EventHandler
    public void moveEvent(PlayerMoveEvent event) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
        // Optimization: don't check on every micro-movement
        // Optimierung: nicht bei jeder Mikrobewegung pr√ºfen
        if (event.getFrom().getBlockX() == event.getTo().getBlockX() && 
            event.getFrom().getBlockY() == event.getTo().getBlockY() && 
            event.getFrom().getBlockZ() == event.getTo().getBlockZ()) {
            return;
        }
        
        executeWorldCode(event.getPlayer(), "moveEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ª–µ–≤–æ–≥–æ –∫–ª–∏–∫–∞ –º—ã—à–∏
     * @param event –°–æ–±—ã—Ç–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
     *
     * Handles left mouse button event
     * @param event Player interact event
     *
     * Behandelt das Ereignis der linken Maustaste
     * @param event Spieler-Interaktionsereignis
     */
    @EventHandler
    public void LMBEvent(PlayerInteractEvent event) {
        if ((event.getAction() == org.bukkit.event.block.Action.LEFT_CLICK_AIR || event.getAction() == org.bukkit.event.block.Action.LEFT_CLICK_BLOCK) && 
            event.getHand() == org.bukkit.inventory.EquipmentSlot.HAND) {
            executeWorldCode(event.getPlayer(), "LMBEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –º—ã—à–∏
     * @param event –°–æ–±—ã—Ç–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞
     *
     * Handles right mouse button event
     * @param event Player interact event
     *
     * Behandelt das Ereignis der rechten Maustaste
     * @param event Spieler-Interaktionsereignis
     */
    @EventHandler
    public void RMBEvent(PlayerInteractEvent event) {
        if ((event.getAction() == org.bukkit.event.block.Action.RIGHT_CLICK_AIR || event.getAction() == org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK) && 
            event.getHand() == org.bukkit.inventory.EquipmentSlot.HAND) {
            executeWorldCode(event.getPlayer(), "RMBEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
     * @param event –°–æ–±—ã—Ç–∏–µ —á–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
     *
     * Handles player chat message event
     * @param event Async player chat event
     *
     * Behandelt das Ereignis einer Chat-Nachricht des Spielers
     * @param event Asynchrones Spieler-Chat-Ereignis
     */
    @EventHandler(priority = EventPriority.LOWEST)
    public void messageEvent(AsyncPlayerChatEvent event) {
        executeWorldCode(event.getPlayer(), "messageEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ –º–æ–±–∞
     * @param event –°–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏
     *
     * Handles mob death event
     * @param event Entity death event
     *
     * Behandelt das Ereignis des Todes eines Mobs
     * @param event Entit√§ts-Todesereignis
     */
    @EventHandler
    public void mobDeath(EntityDeathEvent event) {
        if (event.getEntity().getKiller() != null) {
            executeWorldCode(event.getEntity().getKiller(), "mobDeathEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
     * @param event –°–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
     *
     * Handles player death event
     * @param event Player death event
     *
     * Behandelt das Ereignis des Todes eines Spielers
     * @param event Spieler-Todesereignis
     */
    @EventHandler
    public void playerDeath(PlayerDeathEvent event) {
        executeWorldCode(event.getEntity(), "playerDeathEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–∞ –∏–≥—Ä–æ–∫–æ–º
     * @param event –°–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏
     *
     * Handles player killing player event
     * @param event Entity death event
     *
     * Behandelt das Ereignis, wenn ein Spieler einen Spieler t√∂tet
     * @param event Entit√§ts-Todesereignis
     */
    @EventHandler
    public void playerKillPlayer(EntityDeathEvent event) {
        if (event.getEntity() instanceof Player && event.getEntity().getKiller() != null && 
            event.getEntity().getKiller() instanceof Player) {
            executeWorldCode(event.getEntity().getKiller(), "plKillPlEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –º–æ–±–∞ –∏–≥—Ä–æ–∫–æ–º
     * @param event –°–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏
     *
     * Handles player killing mob event
     * @param event Entity death event
     *
     * Behandelt das Ereignis, wenn ein Spieler einen Mob t√∂tet
     * @param event Entit√§ts-Todesereignis
     */
    @EventHandler
    public void playerKillMob(EntityDeathEvent event) {
        if (event.getEntity().getKiller() != null && 
            event.getEntity() instanceof org.bukkit.entity.Monster) {
            executeWorldCode(event.getEntity().getKiller(), "plKillMobEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º –∏–≥—Ä–æ–∫—É
     * @param event –°–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å—é
     *
     * Handles player damaging player event
     * @param event Entity damage by entity event
     *
     * Behandelt das Ereignis, wenn ein Spieler einem Spieler Schaden zuf√ºgt
     * @param event Entit√§tsschaden durch Entit√§tsereignis
     */
    @EventHandler
    public void playerPlayerDamage(EntityDamageByEntityEvent event) {
        if (event.getDamager() instanceof Player && event.getEntity() instanceof Player) {
            executeWorldCode((Player) event.getDamager(), "plDmgPlEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –º–æ–±–æ–º –∏–≥—Ä–æ–∫—É
     * @param event –°–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å—é
     *
     * Handles mob damaging player event
     * @param event Entity damage by entity event
     *
     * Behandelt das Ereignis, wenn ein Mob einem Spieler Schaden zuf√ºgt
     * @param event Entit√§tsschaden durch Entit√§tsereignis
     */
    @EventHandler
    public void playerMobDamage(EntityDamageByEntityEvent event) {
        if (event.getEntity() instanceof Player && event.getDamager() instanceof org.bukkit.entity.Monster) {
            executeWorldCode((Player) event.getEntity(), "mobDmgPlEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º –º–æ–±—É
     * @param event –°–æ–±—ã—Ç–∏–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å—é
     *
     * Handles player damaging mob event
     * @param event Entity damage by entity event
     *
     * Behandelt das Ereignis, wenn ein Spieler einem Mob Schaden zuf√ºgt
     * @param event Entit√§tsschaden durch Entit√§tsereignis
     */
    @EventHandler
    public void mobPlayerDamage(EntityDamageByEntityEvent event) {
        if (event.getDamager() instanceof Player && event.getEntity() instanceof org.bukkit.entity.Monster) {
            executeWorldCode((Player) event.getDamager(), "plDmgMobEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     * @param event –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     *
     * Handles inventory open event
     * @param event Inventory open event
     *
     * Behandelt das Ereignis des √ñffnens eines Inventars
     * @param event Inventar-√ñffnungsereignis
     */
    @EventHandler
    public void inventoryOpenEvent(InventoryOpenEvent event) {
        if (event.getPlayer() instanceof Player) {
            executeWorldCode((Player) event.getPlayer(), "invOpenEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     * @param event –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     *
     * Handles inventory close event
     * @param event Inventory close event
     *
     * Behandelt das Ereignis des Schlie√üens eines Inventars
     * @param event Inventar-Schlie√üungsereignis
     */
    @EventHandler
    public void inventoryCloseEvent(InventoryCloseEvent event) {
        if (event.getPlayer() instanceof Player) {
            executeWorldCode((Player) event.getPlayer(), "invCloseEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     * @param event –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
     *
     * Handles inventory click event
     * @param event Inventory click event
     *
     * Behandelt das Ereignis eines Klicks im Inventar
     * @param event Inventar-Klick-Ereignis
     */
    @EventHandler
    public void inventoryClickEvent(InventoryClickEvent event) {
        if (event.getWhoClicked() instanceof Player && event.getCurrentItem() != null) {
            executeWorldCode((Player) event.getWhoClicked(), "invClickEvent", event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param event –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º
     *
     * Handles item pickup event
     * @param event Player pickup item event
     *
     * Behandelt das Ereignis des Aufhebens eines Gegenstands
     * @param event Spieler hebt Gegenstand auf Ereignis
     */
    @EventHandler
    public void itemPickup(PlayerPickupItemEvent event) {
        executeWorldCode(event.getPlayer(), "itemPickupEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param event –°–æ–±—ã—Ç–∏–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–º
     *
     * Handles item drop event
     * @param event Player drop item event
     *
     * Behandelt das Ereignis des Wegwerfens eines Gegenstands
     * @param event Spieler wirft Gegenstand weg Ereignis
     */
    @EventHandler
    public void itemDrop(PlayerDropItemEvent event) {
        executeWorldCode(event.getPlayer(), "itemDropEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
     * @param event –°–æ–±—ã—Ç–∏–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
     *
     * Handles teleport event
     * @param event Player teleport event
     *
     * Behandelt das Teleport-Ereignis
     * @param event Spieler-Teleport-Ereignis
     */
    @EventHandler
    public void teleportEvent(PlayerTeleportEvent event) {
        executeWorldCode(event.getPlayer(), "teleportEvent", event);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–∞
     * @param event –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
     *
     * Handles slot change event
     * @param event Player item held event
     *
     * Behandelt das Ereignis der Slot-√Ñnderung
     * @param event Spieler h√§lt Gegenstand Ereignis
     */
    @EventHandler
    public void slotChange(PlayerItemHeldEvent event) {
        if (event.getPreviousSlot() != event.getNewSlot()) {
            executeWorldCode(event.getPlayer(), "slotChangeEvent", event);
        }
    }
    
    // === –ú–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===
    // === Execution Methods ===
    // === Ausf√ºhrungsmethoden ===
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –º–∏—Ä–∞
     * @param player –ò–≥—Ä–æ–∫
     * @param eventType –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
     * @param event –°–æ–±—ã—Ç–∏–µ
     *
     * Executes compiled code for a world event
     * @param player Player
     * @param eventType Event type
     * @param event Event
     *
     * F√ºhrt kompilierten Code f√ºr ein Weltenereignis aus
     * @param player Spieler
     * @param eventType Ereignistyp
     * @param event Ereignis
     */
    private void executeWorldCode(Player player, String eventType, Event event) {
        if (player == null || player.getWorld() == null) return;
        
        // Only execute in play worlds
        // –í—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–æ–≤—ã—Ö –º–∏—Ä–∞—Ö
        // Nur in Spielwelten ausf√ºhren
        if (!player.getWorld().getName().contains("-world")) {
            return;
        }
        
        String worldId = player.getWorld().getName().replace("-world", "");
        
        // Check if world has compiled code
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –º–∏—Ä–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        // Pr√ºfen, ob die Welt kompilierten Code hat
        if (!WorldCode.hasCode(worldId)) {
            return;
        }
        
        // Get compiled code lines
        // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        // Kompilierte Codezeilen abrufen
        List<String> codeLines = WorldCode.getCode(worldId);
        if (codeLines == null || codeLines.isEmpty()) {
            return;
        }
        
        // Process each line of compiled code
        // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
        // Jede Zeile des kompilierten Codes verarbeiten
        for (String codeLine : codeLines) {
            List<String> functions = Arrays.asList(codeLine.split("&"));
            
            // Check if first function matches event type
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
            // Pr√ºfen, ob die erste Funktion dem Ereignistyp entspricht
            if (!functions.isEmpty() && functions.get(0).equals(eventType)) {
                // üéÜ FIXED: Ensure thread safety for async events
                // üéÜ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
                // üéÜ FIX: Thread-Sicherheit f√ºr asynchrone Ereignisse gew√§hrleisten
                if (event.isAsynchronous()) {
                    final List<String> finalFunctions = functions;
                    new BukkitRunnable() {
                        @Override
                        public void run() {
                            CodeBlock firstBlock = parseStringToCodeChain(finalFunctions, player);
                            if (firstBlock != null) {
                                scriptEngine.executeBlockChain(firstBlock, player, eventType);
                            }
                        }
                    }.runTask(plugin);
                } else {
                    CodeBlock firstBlock = parseStringToCodeChain(functions, player);
                    if (firstBlock != null) {
                        scriptEngine.executeBlockChain(firstBlock, player, eventType);
                    }
                }
            }
        }
    }

    /**
     * üéÜ –ù–û–í–û–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é, –Ω–∞–¥–µ–∂–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ CodeBlock.
     * –≠—Ç–æ –º–æ—Å—Ç –º–µ–∂–¥—É —É—Å—Ç–∞—Ä–µ–≤—à–∏–º —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∫–æ–¥–æ–º –∏ –º–æ—â–Ω—ã–º ScriptEngine.
     *
     * @param functions –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
     * @param player –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–≥—Ä–æ–∫–∞.
     * @return –ü–µ—Ä–≤—ã–π CodeBlock –≤ –Ω–æ–≤–æ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     *
     * üéÜ NEW: Parses the old string format into a modern, reliable chain of CodeBlock objects.
     * This is the bridge between the legacy string code and the powerful ScriptEngine.
     *
     * @param functions The list of function strings from the old compiled code.
     * @param player The player context.
     * @return The first CodeBlock in the newly created chain, ready for execution.
     *
     * üéÜ NEU: Parst das alte Zeichenfolgenformat in eine moderne, zuverl√§ssige Kette von CodeBlock-Objekten.
     * Dies ist die Br√ºcke zwischen dem veralteten Zeichenfolgencode und der leistungsstarken ScriptEngine.
     *
     * @param functions Die Liste der Funktionszeichenfolgen aus dem alten kompilierten Code.
     * @param player Der Spielerkontext.
     * @return Der erste CodeBlock in der neu erstellten Kette, bereit zur Ausf√ºhrung.
     */
    private CodeBlock parseStringToCodeChain(List<String> functions, Player player) {
        if (functions.size() <= 1) {
            return null;
        }

        CodeBlock head = null;
        CodeBlock current = null;

        // Start from 1 to skip the event trigger
        // –ù–∞—á–∞—Ç—å —Å 1, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏—è
        // Beginne bei 1, um den Ereignisausl√∂ser zu √ºberspringen
        for (int i = 1; i < functions.size(); i++) {
            String funcStr = functions.get(i);
            String actionId = getActionIdFromString(funcStr);
            
            if (actionId == null || actionId.isEmpty()) {
                plugin.getLogger().warning("Could not parse action from string: " + funcStr);
                // –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏:
                // Konnte Aktion aus Zeichenfolge nicht parsen:
                continue;
            }

            // Create a new CodeBlock for this action
            // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π CodeBlock –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            // Erstelle einen neuen CodeBlock f√ºr diese Aktion
            CodeBlock newBlock = new CodeBlock(Material.COMMAND_BLOCK, actionId); // Material is a placeholder
            // –ú–∞—Ç–µ—Ä–∏–∞–ª —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
            // Material ist ein Platzhalter
            
            // Here, you would parse parameters from funcStr and add them to the newBlock
            // For example: newBlock.setParameter("message", new DataValue(parsedMessage));
            // –ó–¥–µ—Å—å –≤—ã –±—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ funcStr –∏ –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö –≤ newBlock
            // –ù–∞–ø—Ä–∏–º–µ—Ä: newBlock.setParameter("message", new DataValue(parsedMessage));
            // Hier w√ºrden Sie Parameter aus funcStr parsen und sie dem newBlock hinzuf√ºgen
            // Zum Beispiel: newBlock.setParameter("message", new DataValue(parsedMessage));

            // Collapse if statement with common parts
            if (head == null) {
                head = newBlock;
            } else {
                current.setNextBlock(newBlock);
            }
            current = newBlock;
        }

        return head;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "playerMessage") –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
     * @param func –°—Ç—Ä–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏
     * @return ID –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
     *
     * Extracts the action ID (e.g., "playerMessage") from a function string.
     * @param func Function string
     * @return Action ID or null if not found
     *
     * Extrahiert die Aktions-ID (z.B. "playerMessage") aus einer Funktionszeichenfolge.
     * @param func Funktionszeichenfolge
     * @return Aktions-ID oder null, wenn nicht gefunden
     */
    private String getActionIdFromString(String func) {
        int parenthesisIndex = func.indexOf('(');
        if (parenthesisIndex != -1) {
            return func.substring(0, parenthesisIndex);
        }
        return func; // No parameters, the whole string is the ID
        // –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤—Å—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è ID
        // Keine Parameter, die gesamte Zeichenfolge ist die ID
    }
}