package com.megacreative.utils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.megacreative.coding.CodeBlockData;
import com.megacreative.models.CodeScriptData;
import com.megacreative.coding.values.DataValue;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import java.util.ArrayList;
import com.megacreative.models.CreativeWorld;
import com.megacreative.MegaCreative;

/**
 * –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON —Å –ø–æ–º–æ—â—å—é Gson
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ä—É—á–Ω—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é
 *
 * Utility class for serializing objects to JSON using Gson
 * Replaces manual serialization with more reliable and automatic approach
 *
 * Utility-Klasse f√ºr die Serialisierung von Objekten zu JSON mit Gson
 * Ersetzt die manuelle Serialisierung durch einen zuverl√§ssigeren und automatischen Ansatz
 */
public class JsonSerializer {
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Gson –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ItemStack
    // Standard Gson for objects without ItemStack serialization needs
    // Standard-Gson f√ºr Objekte ohne ItemStack-Serialisierungsbedarf
    private static final Gson gson = new GsonBuilder()
            .setPrettyPrinting()
            .serializeNulls()
            .create();
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Gson —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ItemStack –¥–ª—è CodeBlocks
    // Enhanced Gson with ItemStack serialization support for CodeBlocks
    // Erweiterter Gson mit ItemStack-Serialisierungsunterst√ºtzung f√ºr CodeBlocks
    private static final Gson gsonWithItemStacks = ConfigItemsTypeAdapters.createGsonWithAdapters();
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON —Å—Ç—Ä–æ–∫—É
     * @param obj –û–±—ä–µ–∫—Ç –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return JSON —Å—Ç—Ä–æ–∫–∞
     *
     * Serializes object to JSON string
     * @param obj Object to serialize
     * @return JSON string
     *
     * Serialisiert das Objekt in eine JSON-Zeichenfolge
     * @param obj Zu serialisierendes Objekt
     * @return JSON-Zeichenfolge
     */
    public static String toJson(Object obj) {
        return gson.toJson(obj);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç JSON —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     * @param json JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @param classOfT –ö–ª–∞—Å—Å —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     * @return –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
     *
     * Deserializes JSON string to object of specified type
     * @param json JSON string to deserialize
     * @param classOfT Target object class
     * @return Deserialized object
     *
     * Deserialisiert eine JSON-Zeichenfolge in ein Objekt des angegebenen Typs
     * @param json Zu deserialisierende JSON-Zeichenfolge
     * @param classOfT Zielobjektklasse
     * @return Deserialisiertes Objekt
     */
    public static <T> T fromJson(String json, Class<T> classOfT) {
        return gson.fromJson(json, classOfT);
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CreativeWorld –≤ JSON –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π DTO
     * @param world CreativeWorld –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return JSON —Å—Ç—Ä–æ–∫–∞
     *
     * Serializes CreativeWorld to JSON using safe DTO
     * @param world CreativeWorld to serialize
     * @return JSON string
     *
     * Serialisiert CreativeWorld zu JSON unter Verwendung eines sicheren DTO
     * @param world Zu serialisierende CreativeWorld
     * @return JSON-Zeichenfolge
     */
    public static String serializeWorld(CreativeWorld world) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DTO –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Java 9+ –º–æ–¥—É–ª—è–º–∏
        // Use DTO to avoid problems with Java 9+ modules
        // Verwenden Sie DTO, um Probleme mit Java 9+-Modulen zu vermeiden
        com.megacreative.models.CreativeWorldData worldData = new com.megacreative.models.CreativeWorldData(world);
        return toJson(worldData);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CreativeWorld –∏–∑ JSON
     * @param json JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @param plugin –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
     * @return –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CreativeWorld –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     *
     * Deserializes CreativeWorld from JSON
     * @param json JSON string to deserialize
     * @param plugin Main plugin instance
     * @return Deserialized CreativeWorld or null on error
     *
     * Deserialisiert CreativeWorld aus JSON
     * @param json Zu deserialisierende JSON-Zeichenfolge
     * @param plugin Hauptplugin-Instanz
     * @return Deserialisierte CreativeWorld oder null bei Fehler
     */
    public static CreativeWorld deserializeWorld(String json, MegaCreative plugin) {
        try {
            com.megacreative.models.CreativeWorldData worldData = fromJson(json, com.megacreative.models.CreativeWorldData.class);
            if (worldData == null) return null;
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π CreativeWorld –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            // Create a full CreativeWorld from data
            // Erstellen Sie eine vollst√§ndige CreativeWorld aus Daten
            CreativeWorld world = new CreativeWorld(worldData.id, worldData.name, worldData.ownerId, worldData.ownerName, worldData.worldType);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
            // Restore all fields
            // Alle Felder wiederherstellen
            world.setDescription(worldData.description);
            world.setMode(worldData.mode);
            world.setPrivate(worldData.isPrivate);
            world.setCreatedTime(worldData.createdTime);
            world.setLastActivity(worldData.lastActivity);
            if (worldData.flags != null) world.setFlags(worldData.flags);
            if (worldData.trustedBuilders != null) world.setTrustedBuilders(worldData.trustedBuilders);
            if (worldData.trustedCoders != null) world.setTrustedCoders(worldData.trustedCoders);
            world.setLikes(worldData.likes);
            world.setDislikes(worldData.dislikes);
            if (worldData.likedBy != null) world.setLikedBy(worldData.likedBy);
            if (worldData.dislikedBy != null) world.setDislikedBy(worldData.dislikedBy);
            if (worldData.favoriteBy != null) world.setFavoriteBy(worldData.favoriteBy);
            if (worldData.comments != null) world.setComments(worldData.comments);
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
            // Restore scripts
            // Skripte wiederherstellen
            java.util.List<com.megacreative.coding.CodeScript> restoredScripts = new ArrayList<>();
            if (worldData.scripts != null) {
                for (CodeScriptData scriptData : worldData.scripts) {
                    com.megacreative.coding.CodeScript script = new com.megacreative.coding.CodeScript(
                        scriptData.name != null ? scriptData.name : "Unnamed Script",
                        scriptData.enabled,
                        restoreCodeBlock(scriptData.rootBlock)
                    );
                    script.setId(scriptData.id);
                    if (scriptData.type != null) {
                        script.setType(com.megacreative.coding.CodeScript.ScriptType.valueOf(scriptData.type));
                    }
                    restoredScripts.add(script);
                }
            }
            world.setScripts(restoredScripts);
            
            // üéÜ ENHANCED: Restore dual world data
            // üéÜ –£–õ–£–ß–®–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–≤–æ–π–Ω–æ–≥–æ –º–∏—Ä–∞
            // üéÜ VERBESSERT: Dual-World-Daten wiederherstellen
            if (worldData.pairedWorldId != null) {
                world.setPairedWorldId(worldData.pairedWorldId);
            }
            if (worldData.dualMode != null) {
                world.setDualMode(worldData.dualMode);
            }
            
            return world;
        } catch (Exception e) {
            plugin.getLogger().severe("Failed to deserialize CreativeWorld: " + e.getMessage());
            // –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å CreativeWorld:
            // Fehler beim Deserialisieren von CreativeWorld:
            return null;
        }
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeScript –≤ JSON
     * @param script CodeScript –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return JSON —Å—Ç—Ä–æ–∫–∞
     *
     * Serializes CodeScript to JSON
     * @param script CodeScript to serialize
     * @return JSON string
     *
     * Serialisiert CodeScript zu JSON
     * @param script Zu serialisierendes CodeScript
     * @return JSON-Zeichenfolge
     */
    public static String serializeScript(com.megacreative.coding.CodeScript script) {
        return toJson(script);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeScript –∏–∑ JSON
     * @param json JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CodeScript
     *
     * Deserializes CodeScript from JSON
     * @param json JSON string to deserialize
     * @return Deserialized CodeScript
     *
     * Deserialisiert CodeScript aus JSON
     * @param json Zu deserialisierende JSON-Zeichenfolge
     * @return Deserialisiertes CodeScript
     */
    public static com.megacreative.coding.CodeScript deserializeScript(String json) {
        return fromJson(json, com.megacreative.coding.CodeScript.class);
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeBlock –≤ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ItemStack
     * @param block CodeBlock –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return JSON —Å—Ç—Ä–æ–∫–∞
     *
     * Serializes CodeBlock to JSON with ItemStack support
     * @param block CodeBlock to serialize
     * @return JSON string
     *
     * Serialisiert CodeBlock zu JSON mit ItemStack-Unterst√ºtzung
     * @param block Zu serialisierender CodeBlock
     * @return JSON-Zeichenfolge
     */
    public static String serializeBlock(com.megacreative.coding.CodeBlock block) {
        return gsonWithItemStacks.toJson(block);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeBlock –∏–∑ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ItemStack
     * @param json JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     * @return –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CodeBlock
     *
     * Deserializes CodeBlock from JSON with ItemStack support
     * @param json JSON string to deserialize
     * @return Deserialized CodeBlock
     *
     * Deserialisiert CodeBlock aus JSON mit ItemStack-Unterst√ºtzung
     * @param json Zu deserialisierende JSON-Zeichenfolge
     * @return Deserialisierter CodeBlock
     */
    public static com.megacreative.coding.CodeBlock deserializeBlock(String json) {
        return gsonWithItemStacks.fromJson(json, com.megacreative.coding.CodeBlock.class);
    }
    
    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è CodeBlock –∏–∑ CodeBlockData
     * @param data CodeBlockData –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @return –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CodeBlock
     *
     * Recursive method to restore CodeBlock from CodeBlockData
     * @param data CodeBlockData to restore
     * @return Restored CodeBlock
     *
     * Rekursive Methode zur Wiederherstellung von CodeBlock aus CodeBlockData
     * @param data Zu wiederherstellende CodeBlockData
     * @return Wiederhergestellter CodeBlock
     */
    private static com.megacreative.coding.CodeBlock restoreCodeBlock(CodeBlockData data) {
        if (data == null) return null;

        Material material = data.materialName != null ? Material.getMaterial(data.materialName) : Material.STONE;
        com.megacreative.coding.CodeBlock block = new com.megacreative.coding.CodeBlock(material.name(), data.action);
        block.setId(data.id);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        // Restore parameters
        // Parameter wiederherstellen
        if (data.parameters != null) {
            data.parameters.forEach((key, value) -> {
                block.setParameter(key, DataValue.fromObject(value));
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º configItems –∏–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        // Restore configItems from serialized map
        // configItems aus serialisierter Karte wiederherstellen
        if (data.configItems != null) {
            data.configItems.forEach((slot, map) -> {
                try {
                    ItemStack itemStack = ItemStack.deserialize(map);
                    block.setConfigItem(slot, itemStack);
                } catch (Exception e) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    // Log error but continue working
                    // Fehler protokollieren, aber weiterarbeiten
                    System.err.println("Failed to deserialize ItemStack: " + e.getMessage());
                    // –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å ItemStack:
                    // Fehler beim Deserialisieren von ItemStack:
                    System.err.println("Stack trace: " + java.util.Arrays.toString(e.getStackTrace()));
                    // –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞:
                    // Stapelverfolgung:
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ–±–∫–∏
        // Restore brackets
        // Klammern wiederherstellen
        if (data.bracketType != null) {
            try {
                block.setBracketType(com.megacreative.coding.CodeBlock.BracketType.valueOf(data.bracketType));
            } catch (IllegalArgumentException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                // Ignore invalid values
                // Ung√ºltige Werte ignorieren
            }
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
        // Recursively restore next and child blocks
        // Rekursiv n√§chste und untergeordnete Bl√∂cke wiederherstellen
        if (data.nextBlock != null) {
            block.setNextBlock(restoreCodeBlock(data.nextBlock));
        }
        if (data.children != null) {
            for (CodeBlockData childData : data.children) {
                com.megacreative.coding.CodeBlock childBlock = restoreCodeBlock(childData);
                if (childBlock != null) {
                    block.addChild(childBlock);
                }
            }
        }

        return block;
    }
}