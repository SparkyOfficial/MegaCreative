package com.megacreative.utils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.megacreative.coding.CodeBlockData;
import com.megacreative.models.CodeScriptData;
import com.megacreative.coding.values.DataValue;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import java.util.ArrayList;
import com.megacreative.models.CreativeWorld;
import com.megacreative.MegaCreative;

/**
 * –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON —Å –ø–æ–º–æ—â—å—é Gson.
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ä—É—á–Ω—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é.
 */
public class JsonSerializer {
    
    // Standard Gson for objects without ItemStack serialization needs
    private static final Gson gson = new GsonBuilder()
            .setPrettyPrinting()
            .serializeNulls()
            .create();
    
    // Enhanced Gson with ItemStack serialization support for CodeBlocks
    private static final Gson gsonWithItemStacks = ConfigItemsTypeAdapters.createGsonWithAdapters();
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ JSON —Å—Ç—Ä–æ–∫—É
     */
    public static String toJson(Object obj) {
        return gson.toJson(obj);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç JSON —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    public static <T> T fromJson(String json, Class<T> classOfT) {
        return gson.fromJson(json, classOfT);
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CreativeWorld –≤ JSON –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π DTO
     */
    public static String serializeWorld(CreativeWorld world) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DTO –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Java 9+ –º–æ–¥—É–ª—è–º–∏
        com.megacreative.models.CreativeWorldData worldData = new com.megacreative.models.CreativeWorldData(world);
        return toJson(worldData);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CreativeWorld –∏–∑ JSON
     */
    public static CreativeWorld deserializeWorld(String json, MegaCreative plugin) {
        try {
            com.megacreative.models.CreativeWorldData worldData = fromJson(json, com.megacreative.models.CreativeWorldData.class);
            if (worldData == null) return null;
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π CreativeWorld –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            CreativeWorld world = new CreativeWorld(worldData.id, worldData.name, worldData.ownerId, worldData.ownerName, worldData.worldType);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
            world.setDescription(worldData.description);
            world.setMode(worldData.mode);
            world.setPrivate(worldData.isPrivate);
            world.setCreatedTime(worldData.createdTime);
            world.setLastActivity(worldData.lastActivity);
            if (worldData.flags != null) world.setFlags(worldData.flags);
            if (worldData.trustedBuilders != null) world.setTrustedBuilders(worldData.trustedBuilders);
            if (worldData.trustedCoders != null) world.setTrustedCoders(worldData.trustedCoders);
            world.setLikes(worldData.likes);
            world.setDislikes(worldData.dislikes);
            if (worldData.likedBy != null) world.setLikedBy(worldData.likedBy);
            if (worldData.dislikedBy != null) world.setDislikedBy(worldData.dislikedBy);
            if (worldData.favoriteBy != null) world.setFavoriteBy(worldData.favoriteBy);
            if (worldData.comments != null) world.setComments(worldData.comments);
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
            java.util.List<com.megacreative.coding.CodeScript> restoredScripts = new ArrayList<>();
            if (worldData.scripts != null) {
                for (CodeScriptData scriptData : worldData.scripts) {
                    com.megacreative.coding.CodeScript script = new com.megacreative.coding.CodeScript(
                        scriptData.name != null ? scriptData.name : "Unnamed Script",
                        scriptData.enabled,
                        restoreCodeBlock(scriptData.rootBlock)
                    );
                    script.setId(scriptData.id);
                    if (scriptData.type != null) {
                        script.setType(com.megacreative.coding.CodeScript.ScriptType.valueOf(scriptData.type));
                    }
                    restoredScripts.add(script);
                }
            }
            world.setScripts(restoredScripts);
            
            // üéÜ ENHANCED: Restore dual world data
            if (worldData.pairedWorldId != null) {
                world.setPairedWorldId(worldData.pairedWorldId);
            }
            if (worldData.dualMode != null) {
                world.setDualMode(worldData.dualMode);
            }
            
            return world;
        } catch (Exception e) {
            plugin.getLogger().severe("Failed to deserialize CreativeWorld: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeScript –≤ JSON
     */
    public static String serializeScript(com.megacreative.coding.CodeScript script) {
        return toJson(script);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeScript –∏–∑ JSON
     */
    public static com.megacreative.coding.CodeScript deserializeScript(String json) {
        return fromJson(json, com.megacreative.coding.CodeScript.class);
    }
    
    /**
     * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeBlock –≤ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ItemStack
     */
    public static String serializeBlock(com.megacreative.coding.CodeBlock block) {
        return gsonWithItemStacks.toJson(block);
    }
    
    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç CodeBlock –∏–∑ JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ItemStack
     */
    public static com.megacreative.coding.CodeBlock deserializeBlock(String json) {
        return gsonWithItemStacks.fromJson(json, com.megacreative.coding.CodeBlock.class);
    }
    
    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è CodeBlock –∏–∑ CodeBlockData
     */
    private static com.megacreative.coding.CodeBlock restoreCodeBlock(CodeBlockData data) {
        if (data == null) return null;

        Material material = data.materialName != null ? Material.getMaterial(data.materialName) : Material.STONE;
        com.megacreative.coding.CodeBlock block = new com.megacreative.coding.CodeBlock(material, data.action);
        block.setId(data.id);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (data.parameters != null) {
            data.parameters.forEach((key, value) -> {
                block.setParameter(key, DataValue.fromObject(value));
            });
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º configItems –∏–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        if (data.configItems != null) {
            data.configItems.forEach((slot, map) -> {
                try {
                    ItemStack itemStack = ItemStack.deserialize(map);
                    block.setConfigItem(slot, itemStack);
                } catch (Exception e) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    System.err.println("Failed to deserialize ItemStack: " + e.getMessage());
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ–±–∫–∏
        if (data.bracketType != null) {
            try {
                block.setBracketType(com.megacreative.coding.CodeBlock.BracketType.valueOf(data.bracketType));
            } catch (IllegalArgumentException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            }
        }
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
        if (data.nextBlock != null) {
            block.setNextBlock(restoreCodeBlock(data.nextBlock));
        }
        if (data.children != null) {
            for (CodeBlockData childData : data.children) {
                com.megacreative.coding.CodeBlock childBlock = restoreCodeBlock(childData);
                if (childBlock != null) {
                    block.addChild(childBlock);
                }
            }
        }

        return block;
    }
}