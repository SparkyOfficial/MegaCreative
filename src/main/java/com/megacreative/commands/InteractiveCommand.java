package com.megacreative.commands;

import com.megacreative.MegaCreative;
import com.megacreative.gui.interactive.InteractiveGUI;
import com.megacreative.gui.interactive.InteractiveGUIManager;
import com.megacreative.gui.interactive.ReferenceSystemStyleGUI;
import com.megacreative.coding.CodeBlock;
import com.megacreative.models.CreativeWorld;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ GUI –≤ —Å—Ç–∏–ª–µ Reference System
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ GUI —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /interactive <demo|block|world|test> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã...]
 *
 * Reference System-Style Interactive GUI Command
 * Demonstrates and tests the interactive GUI system with various examples
 * Usage: /interactive <demo|block|world|test> [args...]
 *
 * Reference System-Stil interaktiver GUI-Befehl
 * Demonstriert und testet das interaktive GUI-System mit verschiedenen Beispielen
 * Verwendung: /interactive <demo|block|world|test> [Argumente...]
 */
public class InteractiveCommand implements CommandExecutor, TabCompleter {
    
    private final MegaCreative plugin;
    private final InteractiveGUIManager guiManager;
    private final ReferenceSystemStyleGUI frameGUI;
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ GUI
     * @param plugin –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞
     *
     * Initializes the interactive GUI command
     * @param plugin main plugin instance
     *
     * Initialisiert den interaktiven GUI-Befehl
     * @param plugin Haupt-Plugin-Instanz
     */
    public InteractiveCommand(MegaCreative plugin) {
        this.plugin = plugin;
        this.guiManager = plugin.getServiceRegistry().getInteractiveGUIManager();
        this.frameGUI = plugin.getServiceRegistry().getReferenceSystemStyleGUI();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ GUI
     * @param sender –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã
     * @param command –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @param label –º–µ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return true –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
     *
     * Handles interactive GUI command execution
     * @param sender command sender
     * @param command executed command
     * @param label command label
     * @param args command arguments
     * @return true if command executed successfully
     *
     * Verarbeitet die Ausf√ºhrung des interaktiven GUI-Befehls
     * @param sender Befehlsabsender
     * @param command ausgef√ºhrter Befehl
     * @param label Befehlsbezeichnung
     * @param args Befehlsargumente
     * @return true, wenn der Befehl erfolgreich ausgef√ºhrt wurde
     */
    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("¬ßcThis command can only be used by players.");
            return true;
        }
        
        Player player = (Player) sender;
        
        if (args.length == 0) {
            showHelp(player);
            return true;
        }
        
        switch (args[0].toLowerCase()) {
            case "demo":
                openDemoGUI(player);
                break;
            case "block":
                openBlockEditor(player, args);
                break;
            case "world":
                openWorldSettings(player);
                break;
            case "test":
                openTestGUI(player, args);
                break;
            case "help":
            default:
                showHelp(player);
                break;
        }
        
        return true;
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ
     * @param player –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø—Ä–∞–≤–∫–∞
     *
     * Shows command help
     * @param player player to send help to
     *
     * Zeigt Befehlshilfe an
     * @param player Spieler, dem die Hilfe gesendet wird
     */
    private void showHelp(Player player) {
        player.sendMessage("¬ß6üéÜ Reference System Interactive GUI System");
        player.sendMessage("¬ße/interactive demo ¬ß7- Open interactive element demo");
        player.sendMessage("¬ße/interactive block <action> ¬ß7- Open block parameter editor");
        player.sendMessage("¬ße/interactive world ¬ß7- Open world settings GUI");
        player.sendMessage("¬ße/interactive test <element> ¬ß7- Test specific element type");
        player.sendMessage("¬ße/interactive help ¬ß7- Show this help");
        player.sendMessage("");
        player.sendMessage("¬ß7Available test elements: material, toggle, slider, color, item");
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π GUI –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     * @param player –∏–≥—Ä–æ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è GUI
     *
     * Opens the interactive element demonstration GUI
     * @param player player for whom GUI is opened
     *
     * √ñffnet die interaktive Element-Demonstrations-GUI
     * @param player Spieler, f√ºr den die GUI ge√∂ffnet wird
     */
    private void openDemoGUI(Player player) {
        InteractiveGUI gui = guiManager.createInteractiveGUI(player, 
            "üéÜ Reference System Interactive Demo", 54);
        
        
        InteractiveGUIManager.MaterialSelectorElement materialSelector = 
            new InteractiveGUIManager.MaterialSelectorElement("demo_material", 
                java.util.Map.of("materials", Arrays.asList(
                    Material.STONE, Material.DIRT, Material.GRASS_BLOCK, 
                    Material.OAK_PLANKS, Material.IRON_BLOCK, Material.GOLD_BLOCK)));
        
        materialSelector.addChangeListener(value -> 
            player.sendMessage("¬ßa.EVT Material changed to: ¬ße" + value.getValue()));
        
        gui.setElement(10, materialSelector);
        
        
        InteractiveGUIManager.ModeToggleElement modeToggle = 
            new InteractiveGUIManager.ModeToggleElement("demo_mode", 
                java.util.Map.of("modes", Arrays.asList("ON", "OFF", "AUTO")));
        
        modeToggle.addChangeListener(value -> 
            player.sendMessage("¬ßa.EVT Mode changed to: ¬ße" + value.getValue()));
        
        gui.setElement(12, modeToggle);
        
        
        InteractiveGUIManager.NumberSliderElement numberSlider = 
            new InteractiveGUIManager.NumberSliderElement("demo_number", 
                java.util.Map.of("min", 0.0, "max", 100.0, "step", 5.0, "value", 50.0));
        
        numberSlider.addChangeListener(value -> 
            player.sendMessage("¬ßa.EVT Number changed to: ¬ße" + value.getValue()));
        
        gui.setElement(14, numberSlider);
        
        
        InteractiveGUIManager.ColorPickerElement colorPicker = 
            new InteractiveGUIManager.ColorPickerElement("demo_color", java.util.Map.of());
        
        colorPicker.addChangeListener(value -> 
            player.sendMessage("¬ßa.EVT Color changed to: ¬ße" + value.getValue()));
        
        gui.setElement(16, colorPicker);
        
        
        InteractiveGUIManager.ItemStackEditorElement itemEditor = 
            new InteractiveGUIManager.ItemStackEditorElement("demo_item", java.util.Map.of());
        
        itemEditor.addChangeListener(value -> 
            player.sendMessage("¬ßa.EVT Item changed to: ¬ße" + value.getValue()));
        
        gui.setElement(28, itemEditor);
        
        gui.open();
        player.sendMessage("¬ßa.EVT Opened Reference System Interactive Demo!");
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–ª–æ–∫–∞
     * @param player –∏–≥—Ä–æ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     *
     * Opens block parameter editor
     * @param player player for whom editor is opened
     * @param args command arguments
     *
     * √ñffnet den Blockparameter-Editor
     * @param player Spieler, f√ºr den der Editor ge√∂ffnet wird
     * @param args Befehlsargumente
     */
    private void openBlockEditor(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage("¬ßcUsage: /interactive block <action>");
            return;
        }
        
        String actionId = args[1];
        
        // Condition element != null is always true
        // Removed redundant null check since we always create a new CodeBlock object
        Location location = player.getLocation();
        CodeBlock dummyBlock = new CodeBlock(Material.STONE.name(), actionId);
        
        // Variable element initializer null is redundant
        // Removed redundant null initializer since we immediately assign a value
        CodeBlock block = dummyBlock;
        
        block.setParameter("message", "Hello World!");
        block.setParameter("amount", 1);
        block.setParameter("enabled", true);
        
        InteractiveGUI gui = frameGUI.createBlockParameterEditor(player, dummyBlock);
        gui.open();
        
        player.sendMessage("¬ßa.EVT Opened block editor for: ¬ße" + actionId);
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç GUI –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∏—Ä–∞
     * @param player –∏–≥—Ä–æ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     *
     * Opens world settings GUI
     * @param player player for whom settings are opened
     *
     * √ñffnet die Welteinstellungs-GUI
     * @param player Spieler, f√ºr den die Einstellungen ge√∂ffnet werden
     */
    private void openWorldSettings(Player player) {
        
        CreativeWorld world = plugin.getServiceRegistry().getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (world == null) {
            player.sendMessage("¬ßcYou must be in a creative world to use world settings!");
            return;
        }
        
        InteractiveGUI gui = frameGUI.createWorldSettingsGUI(player, world);
        gui.open();
        
        player.sendMessage("¬ßa.EVT Opened world settings for: ¬ße" + world.getName());
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π GUI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param player –∏–≥—Ä–æ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π GUI
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     *
     * Opens test GUI for specific element type
     * @param player player for whom test GUI is opened
     * @param args command arguments
     *
     * √ñffnet die Test-GUI f√ºr einen bestimmten Elementtyp
     * @param player Spieler, f√ºr den die Test-GUI ge√∂ffnet wird
     * @param args Befehlsargumente
     */
    private void openTestGUI(Player player, String[] args) {
        if (args.length < 2) {
            player.sendMessage("¬ßcUsage: /interactive test <element_type>");
            player.sendMessage("¬ß7Available: material, toggle, slider, color, item, text");
            return;
        }
        
        String elementType = args[1].toLowerCase();
        
        InteractiveGUI gui = guiManager.createInteractiveGUI(player, 
            ".EVT Test: " + elementType.toUpperCase(), 27);
        
        InteractiveGUIManager.InteractiveElement element = null;
        
        switch (elementType) {
            case "material":
                element = new InteractiveGUIManager.MaterialSelectorElement("test", 
                    java.util.Map.of("materials", Arrays.asList(
                        Material.STONE, Material.DIRT, Material.OAK_PLANKS, Material.IRON_BLOCK)));
                break;
            case "toggle":
                element = new InteractiveGUIManager.ModeToggleElement("test", 
                    java.util.Map.of("modes", Arrays.asList("ENABLED", "DISABLED", "AUTO")));
                break;
            case "slider":
                element = new InteractiveGUIManager.NumberSliderElement("test", 
                    java.util.Map.of("min", 0.0, "max", 50.0, "step", 2.5));
                break;
            case "color":
                element = new InteractiveGUIManager.ColorPickerElement("test", java.util.Map.of());
                break;
            case "item":
                element = new InteractiveGUIManager.ItemStackEditorElement("test", java.util.Map.of());
                break;
            case "text":
                element = new InteractiveGUIManager.TextInputElement("test", 
                    java.util.Map.of("value", "Sample text"));
                break;
            default:
                player.sendMessage("¬ßcUnknown element type: " + elementType);
                return;
        }
        
        if (element != null) {
            element.addChangeListener(value -> 
                player.sendMessage("¬ßa.EVT " + elementType + " value: ¬ße" + value.getValue()));
            
            gui.setElement(13, element);
            gui.open();
            
            player.sendMessage("¬ßa.EVT Opened test GUI for: ¬ße" + elementType);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     * @param sender –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã
     * @param command –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @param alias –ø—Å–µ–≤–¥–æ–Ω–∏–º –∫–æ–º–∞–Ω–¥—ã
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
     *
     * Handles command tab completion
     * @param sender command sender
     * @param command executed command
     * @param alias command alias
     * @param args command arguments
     * @return list of possible completions
     *
     * Verarbeitet die Befehls-Tab-Vervollst√§ndigung
     * @param sender Befehlsabsender
     * @param command ausgef√ºhrter Befehl
     * @param alias Befehlsalias
     * @param args Befehlsargumente
     * @return Liste m√∂glicher Vervollst√§ndigungen
     */
    @Override
    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
        if (!(sender instanceof Player)) {
            return new ArrayList<>();
        }
        
        List<String> completions = new ArrayList<>();
        
        if (args.length == 1) {
            
            List<String> commands = Arrays.asList("demo", "block", "world", "test", "help");
            return commands.stream()
                .filter(cmd -> cmd.startsWith(args[0].toLowerCase()))
                .collect(Collectors.toList());
        }
        
        if (args.length == 2) {
            switch (args[0].toLowerCase()) {
                case "block":
                    
                    return Arrays.asList("sendMessage", "teleport", "giveItem", "playSound", "effect")
                        .stream()
                        .filter(action -> action.toLowerCase().startsWith(args[1].toLowerCase()))
                        .collect(Collectors.toList());
                        
                case "test":
                    
                    return Arrays.asList("material", "toggle", "slider", "color", "item", "text")
                        .stream()
                        .filter(type -> type.startsWith(args[1].toLowerCase()))
                        .collect(Collectors.toList());
            }
        }
        
        return completions;
    }
}