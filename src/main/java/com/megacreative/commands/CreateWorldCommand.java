package com.megacreative.commands;

import com.megacreative.MegaCreative;
import com.megacreative.interfaces.IWorldManager;
import com.megacreative.models.CreativeWorldType;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞
 *
 * Command to create a new world
 *
 * Befehl zum Erstellen einer neuen Welt
 */
public class CreateWorldCommand implements CommandExecutor {
    
    private final MegaCreative plugin;
    private final IWorldManager worldManager;
    
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã CreateWorldCommand
     * @param plugin –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
     * @param worldManager –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏—Ä–æ–≤
     *
     * Constructor for CreateWorldCommand
     * @param plugin main plugin
     * @param worldManager world manager
     *
     * Konstruktor f√ºr CreateWorldCommand
     * @param plugin Haupt-Plugin
     * @param worldManager Welt-Manager
     */
    public CreateWorldCommand(MegaCreative plugin, IWorldManager worldManager) {
        this.plugin = plugin;
        this.worldManager = worldManager;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /create
     * @param sender –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã
     * @param command –∫–æ–º–∞–Ω–¥–∞
     * @param label –º–µ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return true –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
     *
     * Handles execution of the /create command
     * @param sender command sender
     * @param command command
     * @param label command label
     * @param args command arguments
     * @return true if command executed successfully
     *
     * Verarbeitet die Ausf√ºhrung des /create-Befehls
     * @param sender Befehlsabsender
     * @param command Befehl
     * @param label Befehlsbezeichnung
     * @param args Befehlsargumente
     * @return true, wenn der Befehl erfolgreich ausgef√ºhrt wurde
     */
    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player player)) {
            sender.sendMessage("¬ßc–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º!");
            return true;
        }
        
        
        if (worldManager.getPlayerWorldCount(player) >= 5) {
            player.sendMessage("¬ßc‚ùå –í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏—Ä–æ–≤ (5)!");
            return true;
        }
        
        if (args.length == 0) {
            player.sendMessage("¬ßc‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –º–∏—Ä–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:");
            player.sendMessage("¬ß7- survival (–æ–±—ã—á–Ω—ã–π –º–∏—Ä)");
            player.sendMessage("¬ß7- flat (–ø–ª–æ—Å–∫–∏–π –º–∏—Ä)");
            player.sendMessage("¬ß7- void (–ø—É—Å—Ç–æ–π –º–∏—Ä)");
            player.sendMessage("¬ß7- ocean (–æ–∫–µ–∞–Ω—Å–∫–∏–π –º–∏—Ä)");
            player.sendMessage("¬ß7- nether (–∞–¥—Å–∫–∏–π –º–∏—Ä)");
            player.sendMessage("¬ß7- end (–∫—Ä–∞–µ–≤–æ–π –º–∏—Ä)");
            player.sendMessage("");
            player.sendMessage("¬ßeüéÜ Reference system-style dual world mode:");
            player.sendMessage("¬ß7  Add ¬ßf--dual ¬ß7to create paired dev/play worlds");
            player.sendMessage("¬ß7  Example: ¬ßf/create flat --dual My World");
            return true;
        }
        
        String typeStr = args[0].toLowerCase();
        CreativeWorldType worldType;
        
        
        boolean isDualMode = false;
        
        try {
            worldType = CreativeWorldType.valueOf(typeStr.toUpperCase());
        } catch (IllegalArgumentException e) {
            player.sendMessage("¬ßc‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∏—Ä–∞: " + typeStr);
            return true;
        }
        
        
        String worldName;
        int nameStartIndex = 1;
        
        
        if (args.length > 1 && args[1].equals("--dual")) {
            isDualMode = true;
            nameStartIndex = 2;
        }
        
        
        if (args.length > nameStartIndex) {
            
            StringBuilder nameBuilder = new StringBuilder();
            for (int i = nameStartIndex; i < args.length; i++) {
                if (i > nameStartIndex) nameBuilder.append(" ");
                nameBuilder.append(args[i]);
            }
            worldName = nameBuilder.toString();
        } else {
            
            worldName = player.getName() + "'s World " + (worldManager.getPlayerWorldCount(player) + 1);
        }
        
        
        if (worldName.length() < 3 || worldName.length() > 20) {
            player.sendMessage("¬ßc–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!");
            return true;
        }
        
        if (!worldName.matches("^[a-zA-Z0-9_\\s–ê-–Ø–∞-—è–Å—ë]+$")) {
            player.sendMessage("¬ßc–ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ä–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è!");
            return true;
        }
        
        
        if (isDualMode) {
            player.sendMessage("¬ßa‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–Ω—ã—Ö –º–∏—Ä–æ–≤ \"" + worldName + "\"...");
            player.sendMessage("¬ß7üîß –ú–∏—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: " + worldName + "-code");
            player.sendMessage("¬ß7üéÆ –ò–≥—Ä–æ–≤–æ–π –º–∏—Ä: " + worldName + "-world");
            
            worldManager.createDualWorld(player, worldName, worldType);
        } else {
            player.sendMessage("¬ßa‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Ä–∞ \"" + worldName + "\"...");
            
            worldManager.createWorld(player, worldName, worldType);
        }
        
        
        
        
        return true;
    }
}