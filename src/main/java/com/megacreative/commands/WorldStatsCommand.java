package com.megacreative.commands;

import com.megacreative.MegaCreative;
import com.megacreative.interfaces.IPlayerManager;
import com.megacreative.interfaces.IWorldManager;
import com.megacreative.models.CreativeWorld;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import java.util.*;

/**
 * –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–≤–æ–π–Ω—ã—Ö –º–∏—Ä–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∏—Ä–æ–≤ –≤ —Å—Ç–∏–ª–µ Reference System
 *
 * World statistics command for dual world analytics
 * Shows comprehensive usage data for reference system-style worlds
 *
 * Weltenstatistikbefehl f√ºr die Analyse von Doppelwelten
 * Zeigt umfassende Nutzungsdaten f√ºr Reference System-Stil-Welten an
 */
public class WorldStatsCommand implements CommandExecutor, TabCompleter {
    
    private final MegaCreative plugin;
    private final IWorldManager worldManager;
    private final IPlayerManager playerManager;
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏—Ä–∞
     * @param plugin –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞
     * @param worldManager –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏—Ä–∞
     * @param playerManager –º–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä–æ–∫–∞
     *
     * Initializes the world statistics command
     * @param plugin main plugin instance
     * @param worldManager world manager
     * @param playerManager player manager
     *
     * Initialisiert den Weltenstatistikbefehl
     * @param plugin Haupt-Plugin-Instanz
     * @param worldManager Weltmanager
     * @param playerManager Spielermanager
     */
    public WorldStatsCommand(MegaCreative plugin, IWorldManager worldManager, IPlayerManager playerManager) {
        this.plugin = plugin;
        this.worldManager = worldManager;
        this.playerManager = playerManager;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏—Ä–∞
     * @param sender –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã
     * @param command –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @param label –º–µ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return true –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
     *
     * Handles world statistics command execution
     * @param sender command sender
     * @param command executed command
     * @param label command label
     * @param args command arguments
     * @return true if command executed successfully
     *
     * Verarbeitet die Ausf√ºhrung des Weltenstatistikbefehls
     * @param sender Befehlsabsender
     * @param command ausgef√ºhrter Befehl
     * @param label Befehlsbezeichnung
     * @param args Befehlsargumente
     * @return true, wenn der Befehl erfolgreich ausgef√ºhrt wurde
     */
    @Override
    public boolean onCommand(@org.jetbrains.annotations.NotNull CommandSender sender, 
                            @org.jetbrains.annotations.NotNull Command command, 
                            @org.jetbrains.annotations.NotNull String label, 
                            @org.jetbrains.annotations.NotNull String[] args) {
        if (!(sender instanceof Player player)) {
            sender.sendMessage("¬ßc–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º!");
            return true;
        }
        
        if (args.length == 0) {
            
            CreativeWorld world = worldManager.findCreativeWorldByBukkit(player.getWorld());
            if (world == null) {
                player.sendMessage("¬ßc–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–º –º–∏—Ä–µ!");
                return true;
            }
            showWorldStatistics(player, world);
        } else {
            
            String worldName = args[0];
            CreativeWorld world = worldManager.getWorldByName(worldName);
            if (world == null) {
                player.sendMessage("¬ßc–ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: " + worldName);
                return true;
            }
            
            
            if (!world.isOwner(player) && !player.hasPermission("megacreative.world.stats.others")) {
                player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —ç—Ç–æ–≥–æ –º–∏—Ä–∞!");
                return true;
            }
            
            showWorldStatistics(player, world);
        }
        
        return true;
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏—Ä–∞
     * @param player –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     * @param world —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –º–∏—Ä
     *
     * Shows world statistics
     * @param player player to send statistics to
     * @param world creative world
     *
     * Zeigt Weltenstatistiken an
     * @param player Spieler, dem die Statistiken gesendet werden
     * @param world Creative-Welt
     */
    private void showWorldStatistics(Player player, CreativeWorld world) {
        Map<String, Object> stats = playerManager.getWorldStatistics(world.getId());
        Map<UUID, String> currentPlayers = playerManager.getPlayersInWorld(world.getId());
        
        player.sendMessage("¬ß8¬ßm                    ¬ßr ¬ß6¬ßlWorld Statistics ¬ß8¬ßm                    ");
        player.sendMessage("¬ß7–ú–∏—Ä: ¬ßf" + world.getName() + " ¬ß7(ID: " + world.getId() + ")");
        player.sendMessage("¬ß7–†–µ–∂–∏–º: ¬ßf" + world.getDualMode().getDisplayName());
        
        if (world.isPaired()) {
            CreativeWorld pairedWorld = worldManager.getPairedWorld(world);
            if (pairedWorld != null) {
                player.sendMessage("¬ß7–ü–∞—Ä–Ω—ã–π –º–∏—Ä: ¬ßf" + pairedWorld.getName());
            }
        }
        
        player.sendMessage("");
        player.sendMessage("¬ßeüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
        
        int uniqueVisitors = (Integer) stats.getOrDefault("uniqueVisitors", 0);
        long totalTimeSpent = (Long) stats.getOrDefault("totalTimeSpent", 0L);
        int totalSessions = (Integer) stats.getOrDefault("totalSessions", 0);
        long averageSessionTime = (Long) stats.getOrDefault("averageSessionTime", 0L);
        
        player.sendMessage("¬ß7‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ¬ßf" + uniqueVisitors);
        player.sendMessage("¬ß7‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ¬ßf" + totalSessions);
        player.sendMessage("¬ß7‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ¬ßf" + formatTime(totalTimeSpent));
        player.sendMessage("¬ß7‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: ¬ßf" + formatTime(averageSessionTime));
        
        @SuppressWarnings("unchecked")
        Map<String, Integer> modeSessions = (Map<String, Integer>) stats.getOrDefault("modeSessions", Map.of());
        if (!modeSessions.isEmpty()) {
            player.sendMessage("");
            player.sendMessage("¬ßeüéÆ –ü–æ —Ä–µ–∂–∏–º–∞–º:");
            for (Map.Entry<String, Integer> entry : modeSessions.entrySet()) {
                String mode = entry.getKey();
                int sessions = entry.getValue();
                String emoji = mode.equals("DEV") ? "üîß" : "üéÆ";
                player.sendMessage("¬ß7‚Ä¢ " + emoji + " " + mode + ": ¬ßf" + sessions + " —Å–µ—Å—Å–∏–π");
            }
        }
        
        if (!currentPlayers.isEmpty()) {
            player.sendMessage("");
            player.sendMessage("¬ßeüë• –°–µ–π—á–∞—Å –≤ –º–∏—Ä–µ (" + currentPlayers.size() + "):");
            for (Map.Entry<UUID, String> entry : currentPlayers.entrySet()) {
                UUID playerId = entry.getKey();
                String mode = entry.getValue();
                long sessionTime = playerManager.getPlayerSessionTime(playerId);
                
                Player onlinePlayer = plugin.getServer().getPlayer(playerId);
                String playerName = onlinePlayer != null ? onlinePlayer.getName() : "Unknown";
                String emoji = mode.equals("DEV") ? "üîß" : "üéÆ";
                
                player.sendMessage("¬ß7‚Ä¢ " + emoji + " ¬ßf" + playerName + " ¬ß7(" + formatTime(sessionTime) + ")");
            }
        }
        
        player.sendMessage("¬ß8¬ßm                                                        ");
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
     * @param milliseconds –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
     *
     * Formats time into readable format
     * @param milliseconds time in milliseconds
     * @return formatted time string
     *
     * Formatiert die Zeit in ein lesbares Format
     * @param milliseconds Zeit in Millisekunden
     * @return formatierte Zeitzeichenfolge
     */
    private String formatTime(long milliseconds) {
        if (milliseconds < 1000) {
            return "< 1—Å";
        }
        
        long seconds = milliseconds / 1000;
        long minutes = seconds / 60;
        long hours = minutes / 60;
        
        if (hours > 0) {
            return hours + "—á " + (minutes % 60) + "–º";
        } else if (minutes > 0) {
            return minutes + "–º " + (seconds % 60) + "—Å";
        } else {
            return seconds + "—Å";
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
     * @param sender –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã
     * @param command –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @param alias –ø—Å–µ–≤–¥–æ–Ω–∏–º –∫–æ–º–∞–Ω–¥—ã
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
     * @return —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
     *
     * Handles command tab completion
     * @param sender command sender
     * @param command executed command
     * @param alias command alias
     * @param args command arguments
     * @return list of possible completions
     *
     * Verarbeitet die Befehls-Tab-Vervollst√§ndigung
     * @param sender Befehlsabsender
     * @param command ausgef√ºhrter Befehl
     * @param alias Befehlsalias
     * @param args Befehlsargumente
     * @return Liste m√∂glicher Vervollst√§ndigungen
     */
    @Override
    public List<String> onTabComplete(@org.jetbrains.annotations.NotNull CommandSender sender, 
                                     @org.jetbrains.annotations.NotNull Command command, 
                                     @org.jetbrains.annotations.NotNull String alias, 
                                     @org.jetbrains.annotations.NotNull String[] args) {
        if (!(sender instanceof Player player)) {
            return new ArrayList<>();
        }
        
        if (args.length == 1) {
            List<String> worldNames = new ArrayList<>();
            
            
            for (CreativeWorld world : worldManager.getPlayerWorlds(player)) {
                worldNames.add(world.getName());
            }
            
            
            String input = args[0].toLowerCase();
            return worldNames.stream()
                .filter(name -> name.toLowerCase().startsWith(input))
                .sorted()
                .toList();
        }
        
        return new ArrayList<>();
    }
}