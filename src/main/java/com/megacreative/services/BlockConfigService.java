package com.megacreative.services;

import com.megacreative.MegaCreative;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.File;
import java.util.*;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.function.Function;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –∏–∑ coding_blocks.yml
 * –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –æ –±–ª–æ–∫–∞—Ö
 *
 * Central service for loading and managing configuration of all blocks from coding_blocks.yml
 * Single source of truth about blocks
 *
 * Zentraler Dienst zum Laden und Verwalten der Konfiguration aller Bl√∂cke aus coding_blocks.yml
 * Einzelne Quelle der Wahrheit √ºber Bl√∂cke
 */
public class BlockConfigService {

    private final MegaCreative plugin;
    private final Logger logger;
    // –ö–ª—é—á - —ç—Ç–æ ID –±–ª–æ–∫–∞ –∏–∑ YAML (onPlayerMove, sendMessage –∏ —Ç.–¥.)
    // Key is the block ID from YAML (onPlayerMove, sendMessage, etc.)
    // Schl√ºssel ist die Block-ID aus YAML (onPlayerMove, sendMessage, etc.)
    private final Map<String, BlockConfig> blockConfigs = new HashMap<>();
    private final Map<Material, List<String>> materialToBlockIds = new HashMap<>();
    // Configuration for action slots
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
    // Konfiguration f√ºr Aktionsslots
    private ConfigurationSection actionConfigurations;

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
     * @param plugin –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
     *
     * Initializes block configuration service
     * @param plugin Main plugin instance
     *
     * Initialisiert den Blockkonfigurationsdienst
     * @param plugin Hauptplugin-Instanz
     */
    public BlockConfigService(MegaCreative plugin) {
        this.plugin = plugin;
        this.logger = plugin.getLogger();
        load();
    }

    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤
     *
     * Reloads block configuration
     *
     * L√§dt die Blockkonfiguration neu
     */
    public void reload() {
        load();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
     *
     * Loads block configuration from file
     *
     * L√§dt die Blockkonfiguration aus der Datei
     */
    private void load() {
        blockConfigs.clear();
        materialToBlockIds.clear();

        File configFile = new File(plugin.getDataFolder(), "coding_blocks.yml");
        if (!configFile.exists()) {
            plugin.saveResource("coding_blocks.yml", false);
        }

        YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);
        
        // Debug logging
        plugin.getLogger().info("Loading coding_blocks.yml from: " + configFile.getAbsolutePath());
        plugin.getLogger().info("File exists: " + configFile.exists());
        
        // Load action configurations
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
        // Lade Aktionskonfigurationen
        actionConfigurations = config.getConfigurationSection("action_configurations");
        plugin.getLogger().info("Action configurations loaded: " + (actionConfigurations != null));

        // –ü–†–ê–í–ò–õ–¨–ù–û: —á–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ blocks
        // CORRECTLY: read keys within the blocks section
        // RICHTIG: Lese Schl√ºssel innerhalb des blocks-Abschnitts
        ConfigurationSection blocksSection = config.getConfigurationSection("blocks");
        plugin.getLogger().info("Blocks section exists: " + (blocksSection != null));
        
        if (blocksSection != null) {
            plugin.getLogger().info("Blocks section keys: " + blocksSection.getKeys(false).size());
            for (String id : blocksSection.getKeys(false)) {
                ConfigurationSection section = blocksSection.getConfigurationSection(id);
                if (section != null) {
                    try {
                        plugin.getLogger().info("Loading block config: " + id);
                        BlockConfig blockConfig = new BlockConfig(id, section, plugin);
                        blockConfigs.put(id, blockConfig);
                        
                        // üîß FIX: Set the material correctly based on the block ID (which should match a material)
                        Material material = Material.matchMaterial(id);
                        if (material != null) {
                            // Use the setter method to set the material
                            blockConfig.setMaterial(material);
                            materialToBlockIds.computeIfAbsent(material, k -> new ArrayList<>()).add(id);
                            plugin.getLogger().info("Successfully loaded block config: " + id + " with material " + material);
                        } else {
                            plugin.getLogger().warning("Invalid material for block config: " + id);
                            // For blocks that don't have a direct material match, we still want to register them
                            // This is for cases where the block ID doesn't match the material name
                            // For example, OBSIDIAN is a condition block, but we still want to register it
                        }
                    } catch (Exception e) {
                        plugin.getLogger().warning("Failed to load block config for ID '" + id + "': " + e.getMessage());
                        // –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞ –¥–ª—è ID:
                        // Fehler beim Laden der Blockkonfiguration f√ºr ID:
                        e.printStackTrace(); // Add stack trace for debugging
                    }
                } else {
                    plugin.getLogger().warning("Section is null for ID: " + id);
                }
            }
        }
        plugin.getLogger().info("Loaded " + blockConfigs.size() + " block definitions from coding_blocks.yml.");
        // –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ –∏–∑ coding_blocks.yml
        // Blockdefinitionen aus coding_blocks.yml geladen
        
        // Log loaded materials for debugging
        plugin.getLogger().info("Loaded materials: " + materialToBlockIds.keySet().size());
        for (Material material : materialToBlockIds.keySet()) {
            List<String> actions = materialToBlockIds.get(material);
            plugin.getLogger().info("Material: " + material.name() + " -> Actions: " + (actions != null ? actions.size() : 0));
            if (actions != null) {
                for (String action : actions) {
                    plugin.getLogger().info("  - " + action);
                }
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞ –ø–æ ID
     * @param id ID –±–ª–æ–∫–∞
     * @return –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * Gets block configuration by ID
     * @param id Block ID
     * @return Block configuration or null if not found
     *
     * Ruft die Blockkonfiguration nach ID ab
     * @param id Block-ID
     * @return Blockkonfiguration oder null, wenn nicht gefunden
     */
    public BlockConfig getBlockConfig(String id) {
        return blockConfigs.get(id);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     * @param material –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞
     * @return –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±–ª–æ–∫–æ–≤
     *
     * Gets block configurations for material
     * @param material Block material
     * @return List of block configurations
     *
     * Ruft Blockkonfigurationen f√ºr Material ab
     * @param material Blockmaterial
     * @return Liste der Blockkonfigurationen
     */
    public List<BlockConfig> getBlockConfigsForMaterial(Material material) {
        List<String> ids = materialToBlockIds.getOrDefault(material, Collections.emptyList());
        return ids.stream().map(this::getBlockConfig).filter(Objects::nonNull).collect(Collectors.toList());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     * @param material –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞
     * @return –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
     *
     * Gets available actions for material
     * @param material Block material
     * @return List of available actions
     *
     * Ruft verf√ºgbare Aktionen f√ºr Material ab
     * @param material Blockmaterial
     * @return Liste der verf√ºgbaren Aktionen
     */
    public List<String> getAvailableActions(Material material) {
        List<String> ids = materialToBlockIds.getOrDefault(material, Collections.emptyList());
        return new ArrayList<>(ids);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     * @param material –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞
     * @return –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
     *
     * Gets actions for material
     * @param material Block material
     * @return List of actions
     *
     * Ruft Aktionen f√ºr Material ab
     * @param material Blockmaterial
     * @return Liste der Aktionen
     */
    public List<String> getActionsForMaterial(Material material) {
        List<BlockConfig> configs = getBlockConfigsForMaterial(material);
        List<String> actions = new ArrayList<>();
        
        for (BlockConfig config : configs) {
            actions.addAll(config.getActions());
        }
        
        return actions;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –∫–æ–¥–æ–≤—ã–º –±–ª–æ–∫–æ–º
     * @param material –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true –µ—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —è–≤–ª—è–µ—Ç—Å—è –∫–æ–¥–æ–≤—ã–º –±–ª–æ–∫–æ–º, –∏–Ω–∞—á–µ false
     *
     * Checks if material is a code block
     * @param material Material to check
     * @return true if material is a code block, false otherwise
     *
     * Pr√ºft, ob das Material ein Codeblock ist
     * @param material Zu pr√ºfendes Material
     * @return true, wenn das Material ein Codeblock ist, sonst false
     */
    public boolean isCodeBlock(Material material) {
        return materialToBlockIds.containsKey(material);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
     * @return –ù–∞–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
     *
     * Gets code block materials
     * @return Set of code block materials
     *
     * Ruft Codeblock-Materialien ab
     * @return Menge der Codeblock-Materialien
     */
    public Set<Material> getCodeBlockMaterials() {
        return new HashSet<>(materialToBlockIds.keySet());
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
     * @return –ö–æ–ª–ª–µ–∫—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±–ª–æ–∫–æ–≤
     *
     * Gets all block configurations
     * @return Collection of all block configurations
     *
     * Ruft alle Blockkonfigurationen ab
     * @return Sammlung aller Blockkonfigurationen
     */
    public Collection<BlockConfig> getAllBlockConfigs() {
        return blockConfigs.values();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
     * @param displayName –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –±–ª–æ–∫–∞
     * @return –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * Gets block configuration by display name
     * @param displayName Block display name
     * @return Block configuration or null if not found
     *
     * Ruft die Blockkonfiguration nach Anzeigenamen ab
     * @param displayName Blockanzeigename
     * @return Blockkonfiguration oder null, wenn nicht gefunden
     */
    public BlockConfig getBlockConfigByDisplayName(String displayName) {
        if (displayName == null || displayName.isEmpty()) return null;
        for (BlockConfig config : blockConfigs.values()) {
            if (ChatColor.stripColor(config.getDisplayName()).equalsIgnoreCase(displayName)) {
                return config;
            }
        }
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
     * @param material –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞
     * @return –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * Gets first block configuration for material
     * @param material Block material
     * @return First block configuration or null if not found
     *
     * Ruft die erste Blockkonfiguration f√ºr Material ab
     * @param material Blockmaterial
     * @return Erste Blockkonfiguration oder null, wenn nicht gefunden
     */
    public BlockConfig getFirstBlockConfig(Material material) {
        List<String> ids = materialToBlockIds.getOrDefault(material, Collections.emptyList());
        if (!ids.isEmpty()) {
            BlockConfig config = getBlockConfig(ids.get(0));
            // üîß FIX: Ensure the material is set correctly
            if (config != null && config.getMaterial() == null) {
                try {
                    java.lang.reflect.Field materialField = BlockConfig.class.getDeclaredField("material");
                    materialField.setAccessible(true);
                    materialField.set(config, material);
                } catch (Exception e) {
                    plugin.getLogger().warning("Failed to set material for block config " + config.getId() + ": " + e.getMessage());
                }
            }
            return config;
        }
        return null;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É (–ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è getFirstBlockConfig)
     * @param material –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @return –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * Gets the primary block configuration for a material (alias for getFirstBlockConfig)
     * @param material The material to search for
     * @return The first BlockConfig for this material, or null if none found
     *
     * Ruft die prim√§re Blockkonfiguration f√ºr ein Material ab (Alias f√ºr getFirstBlockConfig)
     * @param material Das zu suchende Material
     * @return Die erste BlockConfig f√ºr dieses Material oder null, wenn keine gefunden wurde
     */
    public BlockConfig getBlockConfigByMaterial(Material material) {
        return getFirstBlockConfig(material);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π–Ω—ã–º
     * @param blockType –¢–∏–ø –±–ª–æ–∫–∞
     * @return true –µ—Å–ª–∏ –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π–Ω—ã–π, –∏–Ω–∞—á–µ false
     *
     * Checks if block is control or event block
     * @param blockType Block type
     * @return true if block is control or event, false otherwise
     *
     * Pr√ºft, ob der Block ein Steuerungs- oder Ereignisblock ist
     * @param blockType Blocktyp
     * @return true, wenn der Block Steuerung oder Ereignis ist, sonst false
     */
    public boolean isControlOrEventBlock(String blockType) {
        if (blockType == null) return false;
        BlockConfig config = getBlockConfig(blockType);
        if (config == null) return false;
        String type = config.getType();
        return "CONTROL".equals(type) || "EVENT".equals(type);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–µ–π—Å—Ç–≤–∏–π
     * @return –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–µ–π—Å—Ç–≤–∏–π
     *
     * Gets the action configurations section
     * @return The action configurations section
     *
     * Ruft den Aktionskonfigurationsabschnitt ab
     * @return Der Aktionskonfigurationsabschnitt
     */
    public ConfigurationSection getActionConfigurations() {
        return actionConfigurations;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     * @param actionName –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     * @return –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–º–µ–Ω–∞ —Å–ª–æ—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Å–ª–æ—Ç–æ–≤, –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * Gets a slot resolver function for a specific action
     * @param actionName The name of the action
     * @return A function that maps slot names to slot indices, or null if not found
     *
     * Ruft eine Slot-Aufl√∂sungsfunktion f√ºr eine bestimmte Aktion ab
     * @param actionName Der Name der Aktion
     * @return Eine Funktion, die Slot-Namen Slot-Indizes zuordnet, oder null, wenn nicht gefunden
     */
    public Function<String, Integer> getSlotResolver(String actionName) {
        if (actionConfigurations == null) return null;
        
        ConfigurationSection actionConfig = actionConfigurations.getConfigurationSection(actionName);
        if (actionConfig == null) return null;
        
        ConfigurationSection slots = actionConfig.getConfigurationSection("slots");
        if (slots == null) return null;
        
        Map<String, Integer> slotMap = new HashMap<>();
        for (String slotKey : slots.getKeys(false)) {
            ConfigurationSection slotConfig = slots.getConfigurationSection(slotKey);
            if (slotConfig != null) {
                String slotName = slotConfig.getString("slot_name");
                if (slotName != null) {
                    try {
                        int slotIndex = Integer.parseInt(slotKey);
                        slotMap.put(slotName, slotIndex);
                    } catch (NumberFormatException e) {
                        // Ignore invalid slot indices
                        // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–ª–æ—Ç–æ–≤
                        // Ignoriere ung√ºltige Slot-Indizes
                    }
                }
            }
        }
        
        return slotMap::get;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     * @param actionName –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     * @return –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–º–µ–Ω–∞ –≥—Ä—É–ø–ø —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ —Å–ª–æ—Ç–æ–≤, –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     *
     * Gets a group slots resolver function for a specific action
     * @param actionName The name of the action
     * @return A function that maps group names to slot indices, or null if not found
     *
     * Ruft eine Gruppenslot-Aufl√∂sungsfunktion f√ºr eine bestimmte Aktion ab
     * @param actionName Der Name der Aktion
     * @return Eine Funktion, die Gruppennamen Slot-Indizes zuordnet, oder null, wenn nicht gefunden
     */
    public Function<String, int[]> getGroupSlotsResolver(String actionName) {
        if (actionConfigurations == null) return null;
        
        ConfigurationSection actionConfig = actionConfigurations.getConfigurationSection(actionName);
        if (actionConfig == null) return null;
        
        ConfigurationSection itemGroups = actionConfig.getConfigurationSection("item_groups");
        if (itemGroups == null) return null;
        
        Map<String, int[]> groupMap = new HashMap<>();
        for (String groupKey : itemGroups.getKeys(false)) {
            ConfigurationSection groupConfig = itemGroups.getConfigurationSection(groupKey);
            if (groupConfig != null) {
                int[] slots = groupConfig.getIntegerList("slots").stream().mapToInt(Integer::intValue).toArray();
                groupMap.put(groupKey, slots);
            }
        }
        
        return groupMap::get;
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å-–º–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
     *
     * Internal model class for storing data of one block from config
     *
     * Interne Modellklasse zum Speichern von Daten eines Blocks aus der Konfiguration
     */
    public static class BlockConfig {
        private final String id;
        private Material material;
        private final String type;
        private final String displayName;
        private final String description;
        private final String category;
        private final String defaultAction;  // üîß FIX: Add default action field
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        // üîß FIX: F√ºge Standardaktionsfeld hinzu
        private final boolean isConstructor;
        private final StructureConfig structure;
        private final Map<String, Object> parameters;
        private final List<String> actions;

        /**
         * Creates block configuration from configuration section
         * @param id Block ID
         * @param section Block configuration section
         * @param plugin Main plugin instance
         *
         * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–∞ –∏–∑ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
         * @param id ID –±–ª–æ–∫–∞
         * @param section –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∞
         * @param plugin –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
         *
         * Erstellt eine Blockkonfiguration aus dem Konfigurationsabschnitt
         * @param id Block-ID
         * @param section Blockkonfigurationsabschnitt
         * @param plugin Hauptplugin-Instanz
         */
        public BlockConfig(String id, ConfigurationSection section, MegaCreative plugin) {
            this.id = id;
            // üîß FIX: Material will be set by BlockConfigService when adding to material mapping
            // The ID is the block configuration identifier, not necessarily a material name
            this.material = null; // Will be set by BlockConfigService
            this.type = section.getString("type", "ACTION").toUpperCase();
            // –í YAML –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ "name", –Ω–µ "displayName"
            // In YAML, the "name" field is used, not "displayName"
            // In YAML wird das Feld "name" verwendet, nicht "displayName"
            this.displayName = ChatColor.translateAlternateColorCodes('&', section.getString("name", id));
            this.description = section.getString("description", "No description.");
            // –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è
            // Keine Beschreibung
            this.category = section.getString("category", "default");
            this.defaultAction = section.getString("default_action", null);  // üîß FIX: Read default action from config
            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ß—Ç–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            // üîß FIX: Lese Standardaktion aus Konfiguration
            this.isConstructor = section.getBoolean("is_constructor", false);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –µ—Å–ª–∏ –±–ª–æ–∫ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
            // Load structure configuration if block is a constructor
            // Lade Strukturkonfiguration, wenn Block ein Konstruktor ist
            if (isConstructor && section.contains("structure")) {
                ConfigurationSection structureSection = section.getConfigurationSection("structure");
                this.structure = new StructureConfig(structureSection);
            } else {
                this.structure = null;
            }

            this.parameters = new HashMap<>();
            ConfigurationSection paramsSection = section.getConfigurationSection("parameters");
            if (paramsSection != null) {
                for (String key : paramsSection.getKeys(false)) {
                    this.parameters.put(key, paramsSection.get(key));
                }
            }
            
            // Store actions list
            this.actions = section.getStringList("actions");
        }
        
        // üîß FIX: Add setter for material
        public void setMaterial(Material material) {
            this.material = material;
        }
        
        // –ì–µ—Ç—Ç–µ—Ä—ã
        // Getters
        // Getter
        public String getId() { return id; }
        public Material getMaterial() { return material; }
        public String getType() { return type; }
        public String getDisplayName() { return displayName; }
        public String getDescription() { return description; }
        public String getCategory() { return category; }
        public String getDefaultAction() { return defaultAction; }  // üîß FIX: Add getter for default action
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        // üîß FIX: F√ºge Getter f√ºr Standardaktion hinzu
        public boolean isConstructor() { return isConstructor; }
        public StructureConfig getStructure() { return structure; }
        public Map<String, Object> getParameters() { return parameters; }
        public List<String> getActions() { return actions != null ? new ArrayList<>(actions) : new ArrayList<>(); }
    }
    
    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –±–ª–æ–∫–æ–≤-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
     *
     * Structure configuration for constructor blocks
     *
     * Strukturkonfiguration f√ºr Konstruktorbl√∂cke
     */
    public static class StructureConfig {
        private final Material brackets;
        private final boolean hasSign;
        private final int bracketDistance;
        
        /**
         * Creates structure configuration from configuration section
         * @param section Structure configuration section
         *
         * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
         * @param section –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
         *
         * Erstellt eine Strukturkonfiguration aus dem Konfigurationsabschnitt
         * @param section Strukturkonfigurationsabschnitt
         */
        public StructureConfig(ConfigurationSection section) {
            String bracketMaterial = section.getString("brackets", "PISTON");
            this.brackets = Material.matchMaterial(bracketMaterial);
            this.hasSign = section.getBoolean("sign", true);
            this.bracketDistance = section.getInt("bracket_distance", 3);
        }
        
        public Material getBrackets() { return brackets; }
        public boolean hasSign() { return hasSign; }
        public int getBracketDistance() { return bracketDistance; }
    }
}