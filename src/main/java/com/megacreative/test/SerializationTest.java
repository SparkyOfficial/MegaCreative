package com.megacreative.test;

import com.megacreative.coding.CodeBlock;
import com.megacreative.utils.JsonSerializer;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Test class to demonstrate ItemStack serialization in CodeBlock
 * This proves that the transient field issue has been resolved
 *
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ItemStack –≤ CodeBlock
 * –≠—Ç–æ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å transient –ø–æ–ª—è–º–∏ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞
 *
 * Testklasse zur Demonstration der ItemStack-Serialisierung in CodeBlock
 * Dies beweist, dass das transiente Feldproblem gel√∂st wurde
 */
public class SerializationTest {
    
    /**
     * Test method that demonstrates CodeBlock serialization with ItemStack configItems
     *
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é CodeBlock —Å ItemStack configItems
     *
     * Testmethode, die die CodeBlock-Serialisierung mit ItemStack configItems demonstriert
     */
    public static void testCodeBlockSerialization() {
        // Create a test CodeBlock
        // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π CodeBlock
        // Einen Test-CodeBlock erstellen
        CodeBlock codeBlock = new CodeBlock(Material.DIAMOND_BLOCK, "onJoin");
        
        // Add some configItems (previously transient - now serializable)
        // –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ configItems (—Ä–∞–Ω–µ–µ transient - —Ç–µ–ø–µ—Ä—å —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π)
        // Einige configItems hinzuf√ºgen (zuvor transient - jetzt serialisierbar)
        Map<Integer, ItemStack> configItems = new HashMap<>();
        
        // Create test ItemStack with metadata
        // –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π ItemStack —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        // Test-ItemStack mit Metadaten erstellen
        ItemStack testItem = new ItemStack(Material.PAPER, 1);
        ItemMeta meta = testItem.getItemMeta();
        if (meta != null) {
            meta.setDisplayName("¬ßeWelcome Message");
            meta.setLore(Arrays.asList("¬ß7This is a test", "¬ß7parameter item"));
            testItem.setItemMeta(meta);
        }
        
        configItems.put(0, testItem);
        
        // Add another test item
        // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        // Ein weiteres Testelement hinzuf√ºgen
        ItemStack numberItem = new ItemStack(Material.GOLD_NUGGET, 5);
        ItemMeta numberMeta = numberItem.getItemMeta();
        if (numberMeta != null) {
            numberMeta.setDisplayName("¬ß6Amount: 5");
            numberItem.setItemMeta(numberMeta);
        }
        
        configItems.put(1, numberItem);
        
        // Set the configItems on the CodeBlock
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å configItems –≤ CodeBlock
        // Die configItems im CodeBlock setzen
        codeBlock.setConfigItems(configItems);
        
        try {
            // Test serialization using our enhanced JsonSerializer
            // –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ JsonSerializer
            // Tests der Serialisierung mit unserem verbesserten JsonSerializer
            String serializedBlock = JsonSerializer.serializeBlock(codeBlock);
            
            System.out.println("=== SERIALIZATION TEST ===");
            // === –¢–ï–°–¢ –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
            // === SERIALIZATIONSTEST ===
            System.out.println("‚úì CodeBlock serialized successfully!");
            // ‚úì CodeBlock —É—Å–ø–µ—à–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω!
            // ‚úì CodeBlock erfolgreich serialisiert!
            System.out.println("‚úì ConfigItems (previously transient) are now included!");
            // ‚úì ConfigItems (—Ä–∞–Ω–µ–µ transient) —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω—ã!
            // ‚úì ConfigItems (zuvor transient) sind jetzt enthalten!
            System.out.println("‚úì ItemStack metadata preserved in JSON");
            // ‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ItemStack —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON
            // ‚úì ItemStack-Metadaten im JSON erhalten
            System.out.println("\nSerialized JSON (first 200 chars):");
            // \n–°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π JSON (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):
            // \nSerialisiertes JSON (erste 200 Zeichen):
            System.out.println(serializedBlock.substring(0, Math.min(200, serializedBlock.length())) + "...");
            
            // Test deserialization
            // –¢–µ—Å—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            // Test der Deserialisierung
            CodeBlock deserializedBlock = JsonSerializer.deserializeBlock(serializedBlock);
            
            System.out.println("\n=== DESERIALIZATION TEST ===");
            // \n=== –¢–ï–°–¢ –î–ï–°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
            // \n=== DESERIALIZATIONSTEST ===
            System.out.println("‚úì CodeBlock deserialized successfully!");
            // ‚úì CodeBlock —É—Å–ø–µ—à–Ω–æ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω!
            // ‚úì CodeBlock erfolgreich deserialisiert!
            System.out.println("‚úì ConfigItems restored: " + deserializedBlock.getConfigItems().size() + " items");
            // ‚úì ConfigItems –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            // ‚úì ConfigItems wiederhergestellt: Elemente
            
            // Verify ItemStack data integrity
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ItemStack
            // Integrit√§t der ItemStack-Daten √ºberpr√ºfen
            ItemStack restoredItem = deserializedBlock.getConfigItems().get(0);
            if (restoredItem != null && restoredItem.hasItemMeta()) {
                System.out.println("‚úì ItemStack metadata preserved:");
                // ‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ItemStack —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:
                // ‚úì ItemStack-Metadaten erhalten:
                System.out.println("  - Display Name: " + restoredItem.getItemMeta().getDisplayName());
                System.out.println("  - Lore: " + restoredItem.getItemMeta().getLore());
            }
            
            System.out.println("\nüéâ SERIALIZATION FIX CONFIRMED!");
            // \nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!
            // \nüéâ SERIALIZATIONSFEHLER BEST√ÑTIGT!
            System.out.println("üìù CodeBlock.configItems field is now properly serializable");
            // üìù –ü–æ–ª–µ CodeBlock.configItems —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º–æ
            // üìù Das Feld CodeBlock.configItems ist jetzt richtig serialisierbar
            System.out.println("üíæ GUI configuration data will persist between server restarts");
            // üíæ –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GUI –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞
            // üíæ GUI-Konfigurationsdaten bleiben zwischen Serverneustarts erhalten
            System.out.println("üì¶ Scripts with ItemStack parameters can be exported/imported");
            // üì¶ –°–∫—Ä–∏–ø—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ItemStack –º–æ–≥—É—Ç –±—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã/–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
            // üì¶ Skripte mit ItemStack-Parametern k√∂nnen exportiert/importiert werden
            
        } catch (Exception e) {
            System.err.println("‚ùå Serialization test failed: " + e.getMessage());
            // ‚ùå –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª—Å—è:
            // ‚ùå Serialisierungstest fehlgeschlagen:
            System.err.println("Stack trace: " + java.util.Arrays.toString(e.getStackTrace()));
        }
    }
    
    /**
     * Demonstrates the problem that was fixed
     *
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
     *
     * Demonstriert das behobene Problem
     */
    public static void explainTheFix() {
        System.out.println("\n=== THE SERIALIZATION ISSUE EXPLAINED ===");
        // \n=== –û–ë–™–Ø–°–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
        // \n=== DIE ERKL√ÑRUNG DES SERIALIZATIONSPROBLEMS ===
        System.out.println("BEFORE FIX:");
        // –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
        // VOR DER KORREKTUR:
        System.out.println("- CodeBlock.configItems was marked as 'transient'");
        // - CodeBlock.configItems –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ 'transient'
        // - CodeBlock.configItems war als 'transient' markiert
        System.out.println("- Gson would skip this field during JSON serialization");
        // - Gson –ø—Ä–æ–ø—É—Å–∫–∞–ª –±—ã —ç—Ç–æ –ø–æ–ª–µ –≤–æ –≤—Ä–µ–º—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON
        // - Gson w√ºrde dieses Feld w√§hrend der JSON-Serialisierung √ºberspringen
        System.out.println("- GUI configuration (ItemStacks in slots) would be lost");
        // - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GUI (ItemStacks –≤ —Å–ª–æ—Ç–∞—Ö) –±—ã–ª–∞ –±—ã –ø–æ—Ç–µ—Ä—è–Ω–∞
        // - GUI-Konfiguration (ItemStacks in Slots) w√ºrde verloren gehen
        System.out.println("- Scripts couldn't preserve parameter setup");
        // - –°–∫—Ä–∏–ø—Ç—ã –Ω–µ –º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        // - Skripte konnten die Parametereinrichtung nicht beibehalten
        
        System.out.println("\nAFTER FIX:");
        // \n–ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
        // \nNACH DER KORREKTUR:
        System.out.println("‚úì Removed 'transient' modifier from configItems and itemGroups");
        // ‚úì –£–¥–∞–ª–µ–Ω –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä 'transient' –∏–∑ configItems –∏ itemGroups
        // ‚úì 'transient'-Modifikator von configItems und itemGroups entfernt
        System.out.println("‚úì Created custom ItemStackTypeAdapter for Gson");
        // ‚úì –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ItemStackTypeAdapter –¥–ª—è Gson
        // ‚úì Benutzerdefinierter ItemStackTypeAdapter f√ºr Gson erstellt
        System.out.println("‚úì Created ConfigItemsTypeAdapters for Map serialization");  
        // ‚úì –°–æ–∑–¥–∞–Ω ConfigItemsTypeAdapters –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Map
        // ‚úì ConfigItemsTypeAdapters f√ºr Map-Serialisierung erstellt
        System.out.println("‚úì Updated JsonSerializer to use enhanced Gson with TypeAdapters");
        // ‚úì –û–±–Ω–æ–≤–ª–µ–Ω JsonSerializer –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Gson —Å TypeAdapters
        // ‚úì JsonSerializer aktualisiert, um erweitertes Gson mit TypeAdapters zu verwenden
        System.out.println("‚úì GUI configuration data now persists properly");
        // ‚úì –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GUI —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
        // ‚úì GUI-Konfigurationsdaten bleiben jetzt richtig erhalten
    }
}