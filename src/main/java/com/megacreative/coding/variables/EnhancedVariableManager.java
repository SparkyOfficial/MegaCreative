package com.megacreative.coding.variables;

import com.megacreative.MegaCreative;
import com.megacreative.coding.values.DataValue;
import com.megacreative.coding.values.ValueType;
import com.megacreative.models.CreativeWorld;
import lombok.extern.java.Log;
import org.bukkit.entity.Player;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;

/**
 * Enhanced Variable Manager with support for different scopes and advanced data types
 */
@Log
public class EnhancedVariableManager {
    
    private final MegaCreative plugin;
    
    // Variable storage by scope
    private final Map<String, DataValue> localVariables = new ConcurrentHashMap<>();
    private final Map<String, Map<String, DataValue>> worldVariables = new ConcurrentHashMap<>();
    private final Map<UUID, Map<String, DataValue>> playerVariables = new ConcurrentHashMap<>();
    private final Map<String, DataValue> serverVariables = new ConcurrentHashMap<>();
    
    // Dynamic variables cache\n    private final Map<String, Object> dynamicVariablesCache = new ConcurrentHashMap<>();\n    private long lastDynamicUpdate = 0;\n    private static final long DYNAMIC_UPDATE_INTERVAL = 1000; // 1 second\n    \n    public EnhancedVariableManager(MegaCreative plugin) {\n        this.plugin = plugin;\n        initializeDynamicVariables();\n    }\n    \n    /**\n     * Sets a variable value with automatic scope detection\n     */\n    public void setVariable(String variableName, DataValue value, CreativeWorld world, Player player) {\n        VariableScope scope = VariableScope.extractScope(variableName);\n        String baseName = VariableScope.extractBaseName(variableName);\n        \n        switch (scope) {\n            case LOCAL -> setLocalVariable(baseName, value);\n            case WORLD -> setWorldVariable(world != null ? world.getId() : \"default\", baseName, value);\n            case PLAYER -> setPlayerVariable(player != null ? player.getUniqueId() : null, baseName, value);\n            case SERVER -> setServerVariable(baseName, value);\n        }\n        \n        log.info(\"Set \" + scope.name().toLowerCase() + \" variable: \" + baseName + \" = \" + value.getDescription());\n    }\n    \n    /**\n     * Gets a variable value with automatic scope detection\n     */\n    public DataValue getVariable(String variableName, CreativeWorld world, Player player) {\n        // Check for dynamic variables first\n        if (isDynamicVariable(variableName)) {\n            return getDynamicVariable(variableName);\n        }\n        \n        VariableScope scope = VariableScope.extractScope(variableName);\n        String baseName = VariableScope.extractBaseName(variableName);\n        \n        return switch (scope) {\n            case LOCAL -> getLocalVariable(baseName);\n            case WORLD -> getWorldVariable(world != null ? world.getId() : \"default\", baseName);\n            case PLAYER -> getPlayerVariable(player != null ? player.getUniqueId() : null, baseName);\n            case SERVER -> getServerVariable(baseName);\n        };\n    }\n    \n    /**\n     * Removes a variable\n     */\n    public boolean removeVariable(String variableName, CreativeWorld world, Player player) {\n        VariableScope scope = VariableScope.extractScope(variableName);\n        String baseName = VariableScope.extractBaseName(variableName);\n        \n        return switch (scope) {\n            case LOCAL -> localVariables.remove(baseName) != null;\n            case WORLD -> {\n                String worldId = world != null ? world.getId() : \"default\";\n                Map<String, DataValue> worldVars = worldVariables.get(worldId);\n                yield worldVars != null && worldVars.remove(baseName) != null;\n            }\n            case PLAYER -> {\n                UUID playerId = player != null ? player.getUniqueId() : null;\n                if (playerId == null) yield false;\n                Map<String, DataValue> playerVars = playerVariables.get(playerId);\n                yield playerVars != null && playerVars.remove(baseName) != null;\n            }\n            case SERVER -> serverVariables.remove(baseName) != null;\n        };\n    }\n    \n    // Local Variables\n    public void setLocalVariable(String name, DataValue value) {\n        localVariables.put(name, value);\n    }\n    \n    public DataValue getLocalVariable(String name) {\n        return localVariables.get(name);\n    }\n    \n    public void clearLocalVariables() {\n        localVariables.clear();\n    }\n    \n    // World Variables\n    public void setWorldVariable(String worldId, String name, DataValue value) {\n        worldVariables.computeIfAbsent(worldId, k -> new ConcurrentHashMap<>()).put(name, value);\n    }\n    \n    public DataValue getWorldVariable(String worldId, String name) {\n        Map<String, DataValue> worldVars = worldVariables.get(worldId);\n        return worldVars != null ? worldVars.get(name) : null;\n    }\n    \n    public Map<String, DataValue> getWorldVariables(String worldId) {\n        return worldVariables.getOrDefault(worldId, new HashMap<>());\n    }\n    \n    // Player Variables\n    public void setPlayerVariable(UUID playerId, String name, DataValue value) {\n        if (playerId == null) return;\n        playerVariables.computeIfAbsent(playerId, k -> new ConcurrentHashMap<>()).put(name, value);\n    }\n    \n    public DataValue getPlayerVariable(UUID playerId, String name) {\n        if (playerId == null) return null;\n        Map<String, DataValue> playerVars = playerVariables.get(playerId);\n        return playerVars != null ? playerVars.get(name) : null;\n    }\n    \n    public Map<String, DataValue> getPlayerVariables(UUID playerId) {\n        return playerVariables.getOrDefault(playerId, new HashMap<>());\n    }\n    \n    // Server Variables\n    public void setServerVariable(String name, DataValue value) {\n        serverVariables.put(name, value);\n    }\n    \n    public DataValue getServerVariable(String name) {\n        return serverVariables.get(name);\n    }\n    \n    public Map<String, DataValue> getServerVariables() {\n        return new HashMap<>(serverVariables);\n    }\n    \n    // Dynamic Variables\n    private void initializeDynamicVariables() {\n        updateDynamicVariables();\n    }\n    \n    private void updateDynamicVariables() {\n        long currentTime = System.currentTimeMillis();\n        if (currentTime - lastDynamicUpdate < DYNAMIC_UPDATE_INTERVAL) {\n            return; // Skip update if too recent\n        }\n        \n        try {\n            // Server information\n            dynamicVariablesCache.put(\"server_time\", currentTime);\n            dynamicVariablesCache.put(\"server_tps\", plugin.getServer().getTPS()[0]);\n            dynamicVariablesCache.put(\"online_players\", plugin.getServer().getOnlinePlayers().size());\n            dynamicVariablesCache.put(\"max_players\", plugin.getServer().getMaxPlayers());\n            \n            // Memory information\n            Runtime runtime = Runtime.getRuntime();\n            long totalMemory = runtime.totalMemory();\n            long freeMemory = runtime.freeMemory();\n            long usedMemory = totalMemory - freeMemory;\n            \n            dynamicVariablesCache.put(\"memory_total\", totalMemory / 1024 / 1024); // MB\n            dynamicVariablesCache.put(\"memory_used\", usedMemory / 1024 / 1024); // MB\n            dynamicVariablesCache.put(\"memory_free\", freeMemory / 1024 / 1024); // MB\n            \n            lastDynamicUpdate = currentTime;\n        } catch (Exception e) {\n            log.log(Level.WARNING, \"Failed to update dynamic variables\", e);\n        }\n    }\n    \n    private boolean isDynamicVariable(String name) {\n        return dynamicVariablesCache.containsKey(name);\n    }\n    \n    private DataValue getDynamicVariable(String name) {\n        updateDynamicVariables();\n        Object value = dynamicVariablesCache.get(name);\n        if (value == null) return null;\n        \n        return DataValue.fromObject(value);\n    }\n    \n    /**\n     * Gets all variables in a scope for debugging\n     */\n    public Map<String, DataValue> getAllVariables(VariableScope scope, CreativeWorld world, Player player) {\n        return switch (scope) {\n            case LOCAL -> new HashMap<>(localVariables);\n            case WORLD -> getWorldVariables(world != null ? world.getId() : \"default\");\n            case PLAYER -> getPlayerVariables(player != null ? player.getUniqueId() : null);\n            case SERVER -> getServerVariables();\n        };\n    }\n    \n    /**\n     * Gets count of variables in a scope\n     */\n    public int getVariableCount(VariableScope scope, CreativeWorld world, Player player) {\n        return getAllVariables(scope, world, player).size();\n    }\n    \n    /**\n     * Clears all variables in a scope\n     */\n    public void clearVariables(VariableScope scope, CreativeWorld world, Player player) {\n        switch (scope) {\n            case LOCAL -> clearLocalVariables();\n            case WORLD -> {\n                String worldId = world != null ? world.getId() : \"default\";\n                worldVariables.remove(worldId);\n            }\n            case PLAYER -> {\n                UUID playerId = player != null ? player.getUniqueId() : null;\n                if (playerId != null) playerVariables.remove(playerId);\n            }\n            case SERVER -> serverVariables.clear();\n        }\n    }\n    \n    /**\n     * Lists all available dynamic variables\n     */\n    public Set<String> getDynamicVariableNames() {\n        updateDynamicVariables();\n        return new HashSet<>(dynamicVariablesCache.keySet());\n    }\n    \n    /**\n     * Saves persistent variables (world, player, server) to storage\n     */\n    public void savePersistentVariables() {\n        // TODO: Implement file/database persistence\n        log.info(\"Saving persistent variables...\");\n    }\n    \n    /**\n     * Loads persistent variables from storage\n     */\n    public void loadPersistentVariables() {\n        // TODO: Implement file/database loading\n        log.info(\"Loading persistent variables...\");\n    }\n}