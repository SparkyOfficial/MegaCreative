package com.megacreative.coding;

import java.util.Objects;
import java.util.UUID;
import java.util.ArrayList;
import java.util.List;

/**
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
 * –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–ø—Ç–µ –∏ –µ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–π –±–ª–æ–∫.
 */
public class CodeScript {

    /**
     * –¢–∏–ø—ã —Å–∫—Ä–∏–ø—Ç–æ–≤
     */
    public enum ScriptType {
        EVENT,      // –°–∫—Ä–∏–ø—Ç-—Å–æ–±—ã—Ç–∏–µ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É)
        FUNCTION    // –§—É–Ω–∫—Ü–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)
    }

    private UUID id;
    private String name;
    private boolean enabled;
    private ScriptType type = ScriptType.EVENT; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–æ–±—ã—Ç–∏–µ
    private final CodeBlock rootBlock; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫-—Å–æ–±—ã—Ç–∏–µ
    
    // üéÜ ENHANCED: Add world name field for script persistence
    private String worldName;
    
    // –ü–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    private boolean isTemplate = false;
    private String author;
    private String description = "";
    
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
     */
    public CodeScript(String name, boolean enabled, CodeBlock rootBlock) {
        this.id = UUID.randomUUID();
        this.name = name;
        this.enabled = enabled;
        this.rootBlock = rootBlock;
    }

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ —Å–∫—Ä–∏–ø—Ç–∞
     */
    public CodeScript(String name, boolean enabled, CodeBlock rootBlock, ScriptType type) {
        this(name, enabled, rootBlock);
        this.type = type;
    }

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤
     */
    public CodeScript(CodeBlock rootBlock) {
        this("–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç", true, rootBlock);
    }

    // ===== –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã =====
    
    public UUID getId() { 
        return id; 
    }
    
    public void setId(UUID id) { 
        this.id = id; 
    }
    
    public String getName() { 
        return name; 
    }
    
    public void setName(String name) { 
        this.name = name; 
    }
    
    public boolean isEnabled() { 
        return enabled; 
    }
    
    public void setEnabled(boolean enabled) { 
        this.enabled = enabled; 
    }
    
    public ScriptType getType() { 
        return type; 
    }
    
    public void setType(ScriptType type) { 
        this.type = type; 
    }
    
    public CodeBlock getRootBlock() { 
        return rootBlock; 
    }
    
    // üéÜ ENHANCED: Add getter and setter for world name
    public String getWorldName() {
        return worldName;
    }
    
    public void setWorldName(String worldName) {
        this.worldName = worldName;
    }
    
    public boolean isTemplate() { 
        return isTemplate; 
    }
    
    public void setTemplate(boolean template) { 
        this.isTemplate = template; 
    }
    
    public String getAuthor() { 
        return author; 
    }
    
    public void setAuthor(String author) { 
        this.author = author; 
    }
    
    public String getDescription() { 
        return description; 
    }
    
    public void setDescription(String description) { 
        this.description = description; 
    }
    
    // ===== –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã =====
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –±–ª–æ–∫ —Å–æ–±—ã—Ç–∏–µ–º.
     * @return true, –µ—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –±–ª–æ–∫ - —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
     */
    public boolean isValid() {
        return rootBlock != null && rootBlock.getMaterial() == org.bukkit.Material.DIAMOND_BLOCK;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ
     * @return –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –≤ —Å–∫—Ä–∏–ø—Ç–µ
     */
    public List<CodeBlock> getBlocks() {
        List<CodeBlock> blocks = new ArrayList<>();
        collectBlocks(rootBlock, blocks);
        return blocks;
    }
    
    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –±–ª–æ–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç–µ
     */
    private void collectBlocks(CodeBlock block, List<CodeBlock> blocks) {
        if (block == null) return;
        
        blocks.add(block);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
        for (CodeBlock child : block.getChildren()) {
            collectBlocks(child, blocks);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –≤ —Ü–µ–ø–æ—á–∫–µ
        collectBlocks(block.getNextBlock(), blocks);
    }
    
    // ===== equals –∏ hashCode =====
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CodeScript that = (CodeScript) o;
        return enabled == that.enabled &&
               isTemplate == that.isTemplate &&
               Objects.equals(id, that.id) &&
               Objects.equals(name, that.name) &&
               type == that.type &&
               Objects.equals(rootBlock, that.rootBlock) &&
               Objects.equals(worldName, that.worldName) &&
               Objects.equals(author, that.author) &&
               Objects.equals(description, that.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(id, name, enabled, type, rootBlock, worldName, isTemplate, author, description);
    }
}