package com.megacreative.coding;

import com.megacreative.MegaCreative;
import com.megacreative.models.CreativeWorld;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Sign;
import org.bukkit.entity.Player;

import java.util.*;

/**
 * –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ö–∞–∂–¥—ã–π —Ç–∏–ø –±–ª–æ–∫–∞ = –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 */
public class SimpleVisualCodingSystem {
    
    private final MegaCreative plugin;
    
    // –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: –ú–∞—Ç–µ—Ä–∏–∞–ª –±–ª–æ–∫–∞ -> –î–µ–π—Å—Ç–≤–∏–µ
    private static final Map<Material, String> BLOCK_ACTIONS = new HashMap<>();
    
    static {
        // –°–û–ë–´–¢–ò–Ø (–¢—Ä–∏–≥–≥–µ—Ä—ã) - –ò–∑—É–º—Ä—É–¥–Ω—ã–µ –±–ª–æ–∫–∏
        BLOCK_ACTIONS.put(Material.EMERALD_BLOCK, "player_join");
        BLOCK_ACTIONS.put(Material.DIAMOND_BLOCK, "player_leave");
        BLOCK_ACTIONS.put(Material.REDSTONE_BLOCK, "block_click");
        BLOCK_ACTIONS.put(Material.GOLD_BLOCK, "block_break");
        BLOCK_ACTIONS.put(Material.LAPIS_BLOCK, "player_move");
        
        // –î–ï–ô–°–¢–í–ò–Ø - –†–∞–∑–Ω—ã–µ –±–ª–æ–∫–∏
        BLOCK_ACTIONS.put(Material.OAK_SIGN, "send_message");
        BLOCK_ACTIONS.put(Material.COMMAND_BLOCK, "run_command");
        BLOCK_ACTIONS.put(Material.CHEST, "give_item");
        BLOCK_ACTIONS.put(Material.NOTE_BLOCK, "play_sound");
        BLOCK_ACTIONS.put(Material.DISPENSER, "teleport");
        BLOCK_ACTIONS.put(Material.BREWING_STAND, "give_effect");
        
        // –£–°–õ–û–í–ò–Ø - –¢–µ—Ä—Ä–∞–∫–æ—Ç–∞
        BLOCK_ACTIONS.put(Material.ORANGE_TERRACOTTA, "has_item");
        BLOCK_ACTIONS.put(Material.PURPLE_TERRACOTTA, "player_health");
        BLOCK_ACTIONS.put(Material.WHITE_TERRACOTTA, "variable_equals");
        BLOCK_ACTIONS.put(Material.RED_TERRACOTTA, "is_op");
    }
    
    // –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    private static final Map<String, String> ACTION_NAMES = new HashMap<>();
    
    static {
        // –°–æ–±—ã—Ç–∏—è
        ACTION_NAMES.put("player_join", "¬ßa‚ö° –í—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞");
        ACTION_NAMES.put("player_leave", "¬ßc‚ö° –í—ã—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞");
        ACTION_NAMES.put("block_click", "¬ße‚ö° –ö–ª–∏–∫ –ø–æ –±–ª–æ–∫—É");
        ACTION_NAMES.put("block_break", "¬ß6‚ö° –†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞");
        ACTION_NAMES.put("player_move", "¬ßb‚ö° –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞");
        
        // –î–µ–π—Å—Ç–≤–∏—è
        ACTION_NAMES.put("send_message", "¬ßfüìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
        ACTION_NAMES.put("run_command", "¬ßd‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É");
        ACTION_NAMES.put("give_item", "¬ßeüì¶ –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç");
        ACTION_NAMES.put("play_sound", "¬ßaüéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫");
        ACTION_NAMES.put("teleport", "¬ßbüåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å");
        ACTION_NAMES.put("give_effect", "¬ßdüß™ –î–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç");
        
        // –£—Å–ª–æ–≤–∏—è
        ACTION_NAMES.put("has_item", "¬ß6üîç –ï—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç?");
        ACTION_NAMES.put("player_health", "¬ßc‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞?");
        ACTION_NAMES.put("variable_equals", "¬ßeüìä –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–≤–Ω–∞?");
        ACTION_NAMES.put("is_op", "¬ß4üëë –Ø–≤–ª—è–µ—Ç—Å—è OP?");
    }
    
    public SimpleVisualCodingSystem(MegaCreative plugin) {
        this.plugin = plugin;
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –±–ª–æ–∫–∏ –≤ –º–∏—Ä–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
     */
    public List<SimpleScript> parseWorld(CreativeWorld creativeWorld) {
        List<SimpleScript> scripts = new ArrayList<>();
        
        World world = plugin.getServer().getWorld(creativeWorld.getWorldName());
        if (world == null) {
            plugin.getLogger().warning("–ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: " + creativeWorld.getWorldName());
            return scripts;
        }
        
        plugin.getLogger().info("¬ßa–ü–∞—Ä—Å–∏–Ω–≥ –±–ª–æ–∫–æ–≤ –≤ –º–∏—Ä–µ: " + creativeWorld.getName());
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –º–∏—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        int centerX = 0, centerZ = 0; // –¶–µ–Ω—Ç—Ä –º–∏—Ä–∞
        int radius = 100; // –†–∞–¥–∏—É—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        for (int x = centerX - radius; x <= centerX + radius; x += 5) {
            for (int z = centerZ - radius; z <= centerZ + radius; z += 5) {
                for (int y = 60; y <= 120; y++) { // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                    Block block = world.getBlockAt(x, y, z);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º (—Å–æ–±—ã—Ç–∏–µ–º)
                    String action = BLOCK_ACTIONS.get(block.getType());
                    if (action != null && isEventTrigger(action)) {
                        // –ù–∞–π–¥–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–π –±–ª–æ–∫ - —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç
                        SimpleScript script = parseScript(world, block, action);
                        if (script != null) {
                            scripts.add(script);
                            plugin.getLogger().info("¬ße  –ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç: " + ACTION_NAMES.get(action) + 
                                    " –≤ " + x + "," + y + "," + z);
                        }
                    }
                }
            }
        }
        
        plugin.getLogger().info("¬ßa–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: " + scripts.size());
        return scripts;
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –Ω–∞—á–∏–Ω–∞—è —Å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ –±–ª–æ–∫–∞
     */
    private SimpleScript parseScript(World world, Block triggerBlock, String triggerAction) {
        SimpleScript script = new SimpleScript(triggerAction, triggerBlock.getLocation());
        
        // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤–æ–∫—Ä—É–≥ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        List<SimpleAction> actions = findConnectedActions(world, triggerBlock);
        script.setActions(actions);
        
        return script.getActions().isEmpty() ? null : script;
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –±–ª–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
     */
    private List<SimpleAction> findConnectedActions(World world, Block triggerBlock) {
        List<SimpleAction> actions = new ArrayList<>();
        
        int triggerX = triggerBlock.getX();
        int triggerY = triggerBlock.getY();
        int triggerZ = triggerBlock.getZ();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–≤ —Ä–∞–¥–∏—É—Å–µ 3 –±–ª–æ–∫–æ–≤)
        for (int dx = -3; dx <= 3; dx++) {
            for (int dy = -2; dy <= 2; dy++) {
                for (int dz = -3; dz <= 3; dz++) {
                    if (dx == 0 && dy == 0 && dz == 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º —Ç—Ä–∏–≥–≥–µ—Ä
                    
                    Block block = world.getBlockAt(triggerX + dx, triggerY + dy, triggerZ + dz);
                    String action = BLOCK_ACTIONS.get(block.getType());
                    
                    if (action != null && !isEventTrigger(action)) {
                        // –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                        SimpleAction simpleAction = new SimpleAction(action, block.getLocation());
                        
                        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—á–∫–∏ —Ä—è–¥–æ–º —Å –±–ª–æ–∫–æ–º
                        String params = getParametersFromNearbySign(world, block);
                        simpleAction.setParameters(params);
                        
                        actions.add(simpleAction);
                        
                        plugin.getLogger().info("¬ßb    –î–µ–π—Å—Ç–≤–∏–µ: " + ACTION_NAMES.get(action) + 
                                " (" + params + ")");
                    }
                }
            }
        }
        
        return actions;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—á–∫–∏ —Ä—è–¥–æ–º —Å –±–ª–æ–∫–æ–º
     */
    private String getParametersFromNearbySign(World world, Block actionBlock) {
        int x = actionBlock.getX();
        int y = actionBlock.getY();
        int z = actionBlock.getZ();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—á–∫–∏
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                for (int dz = -1; dz <= 1; dz++) {
                    Block block = world.getBlockAt(x + dx, y + dy, z + dz);
                    
                    if (block.getState() instanceof Sign) {
                        Sign sign = (Sign) block.getState();
                        String[] lines = sign.getLines();
                        
                        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—á–∫–∏
                        StringBuilder params = new StringBuilder();
                        for (String line : lines) {
                            if (line != null && !line.trim().isEmpty()) {
                                if (params.length() > 0) params.append(" ");
                                params.append(line.trim());
                            }
                        }
                        
                        return params.toString();
                    }
                }
            }
        }
        
        return ""; // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è
     */
    private boolean isEventTrigger(String action) {
        return action.startsWith("player_") || action.startsWith("block_");
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç
     */
    public void executeScript(SimpleScript script, Player player, CreativeWorld world) {
        plugin.getLogger().info("¬ßa–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞: " + ACTION_NAMES.get(script.getTrigger()));
        
        for (SimpleAction action : script.getActions()) {
            executeAction(action, player, world);
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
     */
    private void executeAction(SimpleAction action, Player player, CreativeWorld world) {
        String actionType = action.getAction();
        String params = action.getParameters();
        
        plugin.getLogger().info("¬ße  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: " + ACTION_NAMES.get(actionType) + " (" + params + ")");
        
        try {
            switch (actionType) {
                case "send_message":
                    if (!params.isEmpty()) {
                        player.sendMessage("¬ßa" + params);
                    } else {
                        player.sendMessage("¬ßa–ü—Ä–∏–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!");
                    }
                    break;
                    
                case "run_command":
                    if (!params.isEmpty()) {
                        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(), 
                                params.replace("%player%", player.getName()));
                    }
                    break;
                    
                case "give_item":
                    if (!params.isEmpty()) {
                        // –ü—Ä–æ—Å—Ç–∞—è –≤—ã–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
                        plugin.getServer().dispatchCommand(plugin.getServer().getConsoleSender(),
                                "give " + player.getName() + " " + params);
                    }
                    break;
                    
                case "teleport":
                    if (!params.isEmpty()) {
                        String[] coords = params.split(" ");
                        if (coords.length >= 3) {
                            try {
                                double x = Double.parseDouble(coords[0]);
                                double y = Double.parseDouble(coords[1]);
                                double z = Double.parseDouble(coords[2]);
                                player.teleport(new org.bukkit.Location(player.getWorld(), x, y, z));
                                player.sendMessage("¬ßa–í—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!");
                            } catch (NumberFormatException e) {
                                player.sendMessage("¬ßc–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ!");
                            }
                        }
                    }
                    break;
                    
                case "play_sound":
                    player.playSound(player.getLocation(), org.bukkit.Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 1.0f);
                    break;
                    
                default:
                    player.sendMessage("¬ße–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: " + ACTION_NAMES.get(actionType));
                    break;
            }
        } catch (Exception e) {
            plugin.getLogger().warning("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è " + actionType + ": " + e.getMessage());
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞!");
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É
     */
    public String getBlockInfo(Material material) {
        String action = BLOCK_ACTIONS.get(material);
        if (action != null) {
            return ACTION_NAMES.get(action);
        }
        return "¬ß7–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫";
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞
     */
    public Map<Material, String> getAvailableBlocks() {
        Map<Material, String> blocks = new HashMap<>();
        for (Map.Entry<Material, String> entry : BLOCK_ACTIONS.entrySet()) {
            blocks.put(entry.getKey(), ACTION_NAMES.get(entry.getValue()));
        }
        return blocks;
    }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç
 */
class SimpleScript {
    private final String trigger;
    private final org.bukkit.Location location;
    private List<SimpleAction> actions = new ArrayList<>();
    
    public SimpleScript(String trigger, org.bukkit.Location location) {
        this.trigger = trigger;
        this.location = location;
    }
    
    public String getTrigger() { return trigger; }
    public org.bukkit.Location getLocation() { return location; }
    public List<SimpleAction> getActions() { return actions; }
    public void setActions(List<SimpleAction> actions) { this.actions = actions; }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
 */
class SimpleAction {
    private final String action;
    private final org.bukkit.Location location;
    private String parameters = "";
    
    public SimpleAction(String action, org.bukkit.Location location) {
        this.action = action;
        this.location = location;
    }
    
    public String getAction() { return action; }
    public org.bukkit.Location getLocation() { return location; }
    public String getParameters() { return parameters; }
    public void setParameters(String parameters) { this.parameters = parameters; }
}
