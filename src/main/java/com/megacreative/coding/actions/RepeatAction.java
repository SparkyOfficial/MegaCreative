package com.megacreative.coding.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.ParameterResolver;
import com.megacreative.coding.ScriptEngine;
import com.megacreative.coding.executors.ExecutionResult;
import com.megacreative.coding.values.DataValue;
import com.megacreative.coding.variables.VariableManager;
import org.bukkit.entity.Player;
import java.util.concurrent.CompletableFuture;

public class RepeatAction implements BlockAction {
    
    @Override
    public ExecutionResult execute(CodeBlock block, ExecutionContext context) {
        Player player = context.getPlayer();

        if (player == null || block == null) {
            return ExecutionResult.error("Player or block is null");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        ParameterResolver resolver = new ParameterResolver(context);
        
        DataValue rawTimes = block.getParameter("times");
        if (rawTimes == null) {
            return ExecutionResult.error("Parameter 'times' is missing");
        }
        
        DataValue timesValue = resolver.resolve(context, rawTimes);
        String timesStr = timesValue.asString();

        try {
            int times = Integer.parseInt(timesStr);
            
            if (times <= 0) {
                return ExecutionResult.error("Repeat count must be greater than 0");
            }
            
            if (times > 1000) {
                return ExecutionResult.error("Maximum repeat count is 1000");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            CodeBlock nextBlock = block.getNextBlock();
            if (nextBlock == null) {
                return ExecutionResult.error("No block to repeat");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ScriptEngine –∏–∑ ServiceRegistry
            ScriptEngine scriptEngine = context.getPlugin().getServiceRegistry().getService(ScriptEngine.class);
            if (scriptEngine == null) {
                return ExecutionResult.error("Failed to get ScriptEngine");
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            CompletableFuture.runAsync(() -> {
                try {
                    for (int i = 0; i < times; i++) {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        ExecutionContext loopContext = context.withCurrentBlock(nextBlock, context.getBlockLocation());
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –Ω–æ–º–µ—Ä–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        loopContext.setVariable("loopIndex", i + 1);
                        loopContext.setVariable("loopCount", times);
                        
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        try {
                            scriptEngine.executeBlockChain(nextBlock, player, "repeat_loop")
                                .exceptionally(throwable -> {
                                    player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (i + 1) + ": " + throwable.getMessage());
                                    return null;
                                })
                                .join(); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        } catch (Exception e) {
                            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (i + 1) + ": " + e.getMessage());
                            break;
                        }
                    }
                    
                    player.sendMessage("¬ßaüîÑ –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω " + times + " —Ä–∞–∑");
                } catch (Exception e) {
                    player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞: " + e.getMessage());
                }
            });
            
            return ExecutionResult.success("Repeat action started");
        } catch (NumberFormatException e) {
            return ExecutionResult.error("Invalid times parameter: " + timesStr);
        }
    }
}