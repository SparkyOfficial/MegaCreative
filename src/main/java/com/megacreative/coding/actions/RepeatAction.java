package com.megacreative.coding.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.ParameterResolver;
import org.bukkit.Location;
import org.bukkit.entity.Player;

import java.util.List;

public class RepeatAction implements BlockAction {
    
    @Override
    public void execute(ExecutionContext context) {
        Player player = context.getPlayer();
        CodeBlock block = context.getCurrentBlock();

        if (player == null || block == null) return;

        // –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Object rawTimes = block.getParameter("times");
        String timesStr = ParameterResolver.resolve(context, rawTimes);

        if (timesStr == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'times' –Ω–µ —É–∫–∞–∑–∞–Ω");
            return;
        }

        try {
            int times = Integer.parseInt(timesStr);
            
            if (times <= 0) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                return;
            }
            
            if (times > 1000) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - 1000");
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            CodeBlock nextBlock = block.getNextBlock();
            if (nextBlock == null) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –Ω–µ—Ç –±–ª–æ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è");
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            List<CodeBlock> children = block.getChildren();
            
            if (children.isEmpty()) {
                // –ï—Å–ª–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–º –¥–∞–ª—å—à–µ
                player.sendMessage("¬ße‚ö† –ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è");
            } else {
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ –±–ª–æ–∫–∞–º–∏
                var executor = context.getPlugin().getCodingManager().getScriptExecutor();
                
                for (int i = 0; i < times; i++) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞
                    context.setVariable("loopIndex", i + 1);
                    context.setVariable("loopCount", times);
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –¥–æ—á–µ—Ä–Ω–∏–π –±–ª–æ–∫
                    for (CodeBlock child : children) {
                        try {
                            Location childLocation = executor.findBlockLocation(child);
                            ExecutionContext childContext = context.withCurrentBlock(child, childLocation);
                            executor.processBlock(child, childContext);
                        } catch (Exception e) {
                            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (i + 1) + ": " + e.getMessage());
                            break;
                        }
                    }
                }
            }
            
            player.sendMessage("¬ßaüîÑ –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω " + times + " —Ä–∞–∑");
            
        } catch (NumberFormatException e) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ times: " + timesStr);
        }
    }
} 