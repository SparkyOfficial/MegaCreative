package com.megacreative.coding.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.ParameterResolver;
import com.megacreative.coding.ScriptEngine;
import com.megacreative.coding.executors.ExecutionResult;
import com.megacreative.services.BlockConfigService;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.concurrent.CompletableFuture;
import java.util.function.Function;

public class RepeatAction implements BlockAction {
    
    @Override
    public ExecutionResult execute(CodeBlock block, ExecutionContext context) {
        Player player = context.getPlayer();

        if (player == null || block == null) {
            return ExecutionResult.error("Player or block is null");
        }

        // Get times parameter from the container configuration
        int times = getTimesFromContainer(block, context);
        
        if (times <= 0) {
            return ExecutionResult.error("Repeat count must be greater than 0");
        }
        
        if (times > 1000) {
            return ExecutionResult.error("Maximum repeat count is 1000");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        CodeBlock nextBlock = block.getNextBlock();
        if (nextBlock == null) {
            return ExecutionResult.error("No block to repeat");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ScriptEngine –∏–∑ ServiceRegistry
        ScriptEngine scriptEngine = context.getPlugin().getServiceRegistry().getService(ScriptEngine.class);
        if (scriptEngine == null) {
            return ExecutionResult.error("Failed to get ScriptEngine");
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        CompletableFuture.runAsync(() -> {
            try {
                for (int i = 0; i < times; i++) {
                    final int currentIndex = i; // –°–æ–∑–¥–∞–µ–º effectively final –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    ExecutionContext loopContext = context.withCurrentBlock(nextBlock, context.getBlockLocation());
                    
                    // Check for break flag before executing iteration
                    if (context.hasBreakFlag()) {
                        context.clearBreakFlag();
                        player.sendMessage("¬ßaRepeat loop terminated by break statement at iteration " + (currentIndex + 1));
                        break;
                    }
                    
                    // Check for continue flag
                    if (context.hasContinueFlag()) {
                        context.clearContinueFlag();
                        player.sendMessage("¬ßaSkipping iteration " + (currentIndex + 1) + " due to continue statement");
                        continue;
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –Ω–æ–º–µ—Ä–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    loopContext.setVariable("loopIndex", currentIndex + 1);
                    loopContext.setVariable("loopCount", times);
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    try {
                        ExecutionResult result = scriptEngine.executeBlockChain(nextBlock, player, "repeat_loop")
                            .exceptionally(throwable -> {
                                player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (currentIndex + 1) + ": " + throwable.getMessage());
                                return null;
                            })
                            .join(); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                            
                        // Check for break flag after executing iteration
                        if (context.hasBreakFlag()) {
                            context.clearBreakFlag();
                            player.sendMessage("¬ßaRepeat loop terminated by break statement at iteration " + (currentIndex + 1));
                            break;
                        }
                        
                        // Check for continue flag after executing iteration
                        if (context.hasContinueFlag()) {
                            context.clearContinueFlag();
                            player.sendMessage("¬ßaContinuing to next iteration after iteration " + (currentIndex + 1));
                            continue;
                        }
                    } catch (Exception e) {
                        player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (currentIndex + 1) + ": " + e.getMessage());
                        break;
                    }
                }
                
                player.sendMessage("¬ßaüîÑ –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω " + times + " —Ä–∞–∑");
            } catch (Exception e) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞: " + e.getMessage());
            }
        });
        
        return ExecutionResult.success("Repeat action started");
    }
    
    /**
     * Gets times parameter from the container configuration
     */
    private int getTimesFromContainer(CodeBlock block, ExecutionContext context) {
        try {
            // Get the BlockConfigService to resolve slot names
            BlockConfigService blockConfigService = context.getPlugin().getServiceRegistry().getBlockConfigService();
            
            // Get the slot resolver for this action
            Function<String, Integer> slotResolver = blockConfigService.getSlotResolver(block.getAction());
            
            if (slotResolver != null) {
                // Get times from the times slot
                Integer timesSlot = slotResolver.apply("times_slot");
                if (timesSlot != null) {
                    ItemStack timesItem = block.getConfigItem(timesSlot);
                    if (timesItem != null && timesItem.hasItemMeta()) {
                        // Extract times from item
                        return getTimesFromItem(timesItem);
                    }
                }
            }
        } catch (Exception e) {
            context.getPlugin().getLogger().warning("Error getting times parameter from container in RepeatAction: " + e.getMessage());
        }
        
        return 1; // Default to 1 iteration
    }
    
    /**
     * Extracts times from an item
     */
    private int getTimesFromItem(ItemStack item) {
        try {
            ItemMeta meta = item.getItemMeta();
            if (meta != null) {
                String displayName = meta.getDisplayName();
                if (displayName != null && !displayName.isEmpty()) {
                    // Try to parse times from display name
                    String cleanName = displayName.replaceAll("[¬ß0-9]", "").trim();
                    return Math.max(1, Integer.parseInt(cleanName));
                }
            }
            
            // Fallback to item amount
            return Math.max(1, item.getAmount());
        } catch (Exception e) {
            return 1; // Default to 1 iteration
        }
    }
}