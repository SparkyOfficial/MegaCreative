package com.megacreative.coding.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.ParameterResolver;
import com.megacreative.coding.ScriptExecutor;
import com.megacreative.coding.values.DataValue;
import com.megacreative.coding.variables.VariableManager;
import org.bukkit.entity.Player;

public class RepeatAction implements BlockAction {
    
    @Override
    public void execute(ExecutionContext context) {
        Player player = context.getPlayer();
        CodeBlock block = context.getCurrentBlock();

        if (player == null || block == null) return;

        // –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        VariableManager variableManager = context.getPlugin().getVariableManager();
        if (variableManager == null) return;
        
        ParameterResolver resolver = new ParameterResolver(variableManager);
        
        DataValue rawTimes = block.getParameter("times");
        if (rawTimes == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'times' –Ω–µ —É–∫–∞–∑–∞–Ω");
            return;
        }
        
        DataValue timesValue = resolver.resolve(context, rawTimes);
        String timesStr = timesValue.asString();

        try {
            int times = Integer.parseInt(timesStr);
            
            if (times <= 0) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
                return;
            }
            
            if (times > 1000) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - 1000");
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            CodeBlock nextBlock = block.getNextBlock();
            if (nextBlock == null) {
                player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –Ω–µ—Ç –±–ª–æ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è");
                return;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
            ScriptExecutor executor = new ScriptExecutor(context.getPlugin());
            
            for (int i = 0; i < times; i++) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                ExecutionContext loopContext = context.withCurrentBlock(nextBlock, context.getBlockLocation());
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –Ω–æ–º–µ—Ä–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏
                loopContext.setVariable("loopIndex", i + 1);
                loopContext.setVariable("loopCount", times);
                
                try {
                    executor.processBlock(nextBlock, loopContext);
                } catch (Exception e) {
                    player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (i + 1) + ": " + e.getMessage());
                    break;
                }
            }
            
            player.sendMessage("¬ßaüîÑ –¶–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω " + times + " —Ä–∞–∑");
            
        } catch (NumberFormatException e) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ times: " + timesStr);
        }
    }
} 