package com.megacreative.coding.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.ParameterResolver;
import com.megacreative.coding.HybridScriptExecutor;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class RepeatTriggerAction implements BlockAction {
    private static final Map<UUID, Integer> activeTasks = new HashMap<>();
    
    @Override
    public void execute(ExecutionContext context) {
        Player player = context.getPlayer();
        CodeBlock block = context.getCurrentBlock();

        if (player == null || block == null) return;

        // –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Object rawTicks = block.getParameter("ticks");
        Object rawAction = block.getParameter("action");

        String ticksStr = ParameterResolver.resolve(context, rawTicks);
        String actionStr = ParameterResolver.resolve(context, rawAction);

        if (ticksStr == null || actionStr == null) return;

        try {
            int ticks = Integer.parseInt(ticksStr);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            stopRepeatingTask(player.getUniqueId());
            
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏
            UUID taskId = UUID.randomUUID();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É
            int taskIdBukkit = Bukkit.getScheduler().runTaskTimer(context.getPlugin(), () -> {
                try {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    CodeBlock nextBlock = block.getNextBlock();
                    if (nextBlock != null) {
                        HybridScriptExecutor executor = context.getPlugin().getCodingManager().getScriptExecutor();
                        ExecutionContext newContext = context.withCurrentBlock(nextBlock, context.getBlockLocation());
                        executor.processBlock(nextBlock, newContext);
                    }
                } catch (Exception e) {
                    player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–º—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–µ: " + e.getMessage());
                    stopRepeatingTask(player.getUniqueId());
                }
            }, ticks, ticks).getTaskId();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏
            activeTasks.put(player.getUniqueId(), taskIdBukkit);
            
            player.sendMessage("¬ßaüîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–ø—É—â–µ–Ω –∫–∞–∂–¥—ã–µ " + ticks + " —Ç–∏–∫–æ–≤");
            
        } catch (NumberFormatException e) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ ticks: " + ticksStr);
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    public static void stopRepeatingTask(UUID playerId) {
        Integer taskId = activeTasks.get(playerId);
        if (taskId != null) {
            Bukkit.getScheduler().cancelTask(taskId);
            activeTasks.remove(playerId);
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏
     * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
     */
    public static int stopAllRepeatingTasks() {
        int count = activeTasks.size();
        for (Integer taskId : activeTasks.values()) {
            Bukkit.getScheduler().cancelTask(taskId);
        }
        activeTasks.clear();
        return count;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
     */
    public static boolean hasActiveTask(UUID playerId) {
        return activeTasks.containsKey(playerId);
    }
} 