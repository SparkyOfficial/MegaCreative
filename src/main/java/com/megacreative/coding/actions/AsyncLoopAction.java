package com.megacreative.coding.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.CodeBlock;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.ParameterResolver;
import com.megacreative.coding.ScriptEngine;
import com.megacreative.coding.executors.ExecutionResult;
import com.megacreative.coding.values.DataValue;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicInteger;

public class AsyncLoopAction implements BlockAction {
    
    @Override
    public ExecutionResult execute(CodeBlock block, ExecutionContext context) {
        Player player = context.getPlayer();

        if (player == null || block == null) {
            return ExecutionResult.error("Player or block is null");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        ParameterResolver resolver = new ParameterResolver(context);
        
        DataValue rawIterations = block.getParameter("iterations");
        DataValue rawDelay = block.getParameter("delay");
        
        if (rawIterations == null) {
            return ExecutionResult.error("Parameter 'iterations' is missing");
        }
        
        if (rawDelay == null) {
            return ExecutionResult.error("Parameter 'delay' is missing");
        }
        
        DataValue iterationsValue = resolver.resolve(context, rawIterations);
        DataValue delayValue = resolver.resolve(context, rawDelay);
        
        String iterationsStr = iterationsValue.asString();
        String delayStr = delayValue.asString();

        try {
            int iterations = Integer.parseInt(iterationsStr);
            int delay = Integer.parseInt(delayStr);
            
            if (iterations <= 0) {
                return ExecutionResult.error("Iterations must be greater than 0");
            }
            
            if (iterations > 10000) {
                return ExecutionResult.error("Maximum iterations is 10000");
            }
            
            if (delay < 0) {
                return ExecutionResult.error("Delay cannot be negative");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ —Ü–∏–∫–ª–µ
            if (block.getChildren().isEmpty()) {
                return ExecutionResult.error("No child blocks to execute in loop");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º ScriptEngine –∏–∑ ServiceRegistry
            ScriptEngine scriptEngine = context.getPlugin().getServiceRegistry().getService(ScriptEngine.class);
            if (scriptEngine == null) {
                return ExecutionResult.error("Failed to get ScriptEngine");
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
            AtomicInteger currentIteration = new AtomicInteger(0);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º BukkitRunnable –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            Bukkit.getScheduler().runTaskAsynchronously(context.getPlugin(), () -> {
                try {
                    while (currentIteration.get() < iterations && !context.isCancelled()) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                        if (context.isCancelled()) {
                            break;
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                        if (delay > 0) {
                            try {
                                Thread.sleep(delay * 50L); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                            } catch (InterruptedException e) {
                                Thread.currentThread().interrupt();
                                break;
                            }
                        }
                        
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏
                        for (CodeBlock childBlock : block.getChildren()) {
                            if (context.isCancelled()) {
                                break;
                            }
                            
                            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                            ExecutionContext loopContext = context.withCurrentBlock(childBlock, context.getBlockLocation());
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª–∞
                            loopContext.setVariable("loopIndex", currentIteration.get() + 1);
                            loopContext.setVariable("loopCount", iterations);
                            
                            try {
                                // –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                scriptEngine.executeBlockChain(childBlock, player, "async_loop")
                                    .exceptionally(throwable -> {
                                        player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (currentIteration.get() + 1) + ": " + throwable.getMessage());
                                        return null;
                                    })
                                    .join(); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞
                            } catch (Exception e) {
                                player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ " + (currentIteration.get() + 1) + ": " + e.getMessage());
                                break;
                            }
                        }
                        
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
                        currentIteration.incrementAndGet();
                    }
                    
                    // –°–æ–æ–±—â–∞–µ–º –∏–≥—Ä–æ–∫—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞
                    Bukkit.getScheduler().runTask(context.getPlugin(), () -> {
                        player.sendMessage("¬ßaüîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω " + currentIteration.get() + " —Ä–∞–∑");
                    });
                } catch (Exception e) {
                    Bukkit.getScheduler().runTask(context.getPlugin(), () -> {
                        player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: " + e.getMessage());
                    });
                }
            });
            
            return ExecutionResult.success("Async loop action started");
        } catch (NumberFormatException e) {
            return ExecutionResult.error("Invalid parameters: " + e.getMessage());
        }
    }
}