package com.megacreative.coding;

import com.megacreative.MegaCreative;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Particle;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class ScriptDebugger {
    private final MegaCreative plugin;
    private final Map<UUID, Boolean> playerDebugStates = new HashMap<>();
    private final Map<UUID, Map<Location, Long>> blockExecutionTimes = new HashMap<>();
    private final Map<UUID, Boolean> playerStepStates = new HashMap<>();
    private final Map<UUID, CodeBlock> playerNextStepBlocks = new HashMap<>();

    public ScriptDebugger(MegaCreative plugin) {
        this.plugin = plugin;
    }

    public void toggleDebug(Player player) {
        UUID playerId = player.getUniqueId();
        boolean currentState = playerDebugStates.getOrDefault(playerId, false);
        playerDebugStates.put(playerId, !currentState);
        
        if (!currentState) {
            player.sendMessage("¬ßa‚úì –û—Ç–ª–∞–¥–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞");
            player.sendMessage("¬ß7–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤!");
        } else {
            player.sendMessage("¬ßc‚úó –û—Ç–ª–∞–¥–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        }
    }

    public void onBlockExecute(Player player, CodeBlock block, Location blockLocation) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞
        showExecutionEffect(player, blockLocation, block.getMaterial());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        String actionName = block.getAction();
        String materialName = getMaterialDisplayName(block.getMaterial());
        player.sendMessage("¬ße‚ñ∂ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ¬ßf" + materialName + " ¬ß8(" + actionName + ")");
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        recordExecutionTime(player, blockLocation);
    }

    public void onBlockExecuteWithParameters(Player player, CodeBlock block, Location blockLocation, Map<String, Object> parameters) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞
        showExecutionEffect(player, blockLocation, block.getMaterial());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        String actionName = block.getAction();
        String materialName = getMaterialDisplayName(block.getMaterial());
        player.sendMessage("¬ße‚ñ∂ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ¬ßf" + materialName + " ¬ß8(" + actionName + ")");
        
        if (parameters != null && !parameters.isEmpty()) {
            StringBuilder paramText = new StringBuilder("¬ß7–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ");
            for (Map.Entry<String, Object> entry : parameters.entrySet()) {
                paramText.append("¬ßf").append(entry.getKey()).append("=").append(entry.getValue()).append("¬ß7, ");
            }
            player.sendMessage(paramText.substring(0, paramText.length() - 4));
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        recordExecutionTime(player, blockLocation);
    }

    private void showExecutionEffect(Player player, Location location, Material material) {
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –≤–æ–∫—Ä—É–≥ –±–ª–æ–∫–∞
        Particle effectParticle = getExecutionParticle(material);
        
        new BukkitRunnable() {
            int step = 0;
            @Override
            public void run() {
                if (step >= 10) {
                    this.cancel();
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ª—å—Ü–æ —á–∞—Å—Ç–∏—Ü –≤–æ–∫—Ä—É–≥ –±–ª–æ–∫–∞
                for (int i = 0; i < 8; i++) {
                    double angle = (i * Math.PI * 2) / 8;
                    double x = location.getX() + 0.5 + Math.cos(angle) * 0.8;
                    double z = location.getZ() + 0.5 + Math.sin(angle) * 0.8;
                    Location particleLoc = new Location(location.getWorld(), x, location.getY() + 0.5, z);
                    player.spawnParticle(effectParticle, particleLoc, 1, 0, 0, 0, 0);
                }
                
                step++;
            }
        }.runTaskTimer(plugin, 0L, 2L);
    }

    private Particle getExecutionParticle(Material material) {
        switch (material) {
            case DIAMOND_BLOCK: return Particle.FIREWORKS_SPARK;
            case OAK_PLANKS: return Particle.VILLAGER_HAPPY;
            case COBBLESTONE: return Particle.REDSTONE;
            case IRON_BLOCK: return Particle.ENCHANTMENT_TABLE;
            case END_STONE: return Particle.SMOKE_LARGE;
            case NETHERITE_BLOCK: return Particle.LAVA;
            case OBSIDIAN: return Particle.SMOKE_NORMAL;
            case REDSTONE_BLOCK: return Particle.FLAME;
            case BRICKS: return Particle.SLIME;
            case POLISHED_GRANITE: return Particle.END_ROD;
            default: return Particle.REDSTONE;
        }
    }

    private String getMaterialDisplayName(Material material) {
        switch (material) {
            case DIAMOND_BLOCK: return "–°–æ–±—ã—Ç–∏–µ";
            case OAK_PLANKS: return "–£—Å–ª–æ–≤–∏–µ";
            case COBBLESTONE: return "–î–µ–π—Å—Ç–≤–∏–µ";
            case IRON_BLOCK: return "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case END_STONE: return "–ò–Ω–∞—á–µ";
            case NETHERITE_BLOCK: return "–ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ";
            case OBSIDIAN: return "–ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è";
            case REDSTONE_BLOCK: return "–ï—Å–ª–∏ –∏–≥—Ä–∞";
            case BRICKS: return "–ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ";
            case POLISHED_GRANITE: return "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
            default: return material.name();
        }
    }

    private void recordExecutionTime(Player player, Location blockLocation) {
        Map<Location, Long> times = blockExecutionTimes.computeIfAbsent(player.getUniqueId(), k -> new HashMap<>());
        times.put(blockLocation, System.currentTimeMillis());
    }

    public void onScriptStart(Player player, CodeScript script) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }
        
        player.sendMessage("¬ßa=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ===");
        player.sendMessage("¬ß7–ù–∞–∑–≤–∞–Ω–∏–µ: ¬ßf" + script.getName());
        player.sendMessage("¬ß7–ê–∫—Ç–∏–≤–µ–Ω: ¬ßf–î–∞");
    }

    public void onScriptEnd(Player player, CodeScript script) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }
        
        player.sendMessage("¬ßc=== –ö–æ–Ω–µ—Ü –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ ===");
    }

    public void onConditionResult(Player player, CodeBlock conditionBlock, boolean result) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }
        
        String resultText = result ? "¬ßa–ò—Å—Ç–∏–Ω–∞" : "¬ßc–õ–æ–∂—å";
        player.sendMessage("¬ß7–£—Å–ª–æ–≤–∏–µ " + conditionBlock.getAction() + ": " + resultText);
    }

    public boolean isDebugEnabled(Player player) {
        return playerDebugStates.getOrDefault(player.getUniqueId(), false);
    }

    public void showDebugStats(Player player) {
        Map<Location, Long> times = blockExecutionTimes.get(player.getUniqueId());
        if (times == null || times.isEmpty()) {
            player.sendMessage("¬ß7–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤");
            return;
        }
        
        player.sendMessage("¬ße=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===");
        player.sendMessage("¬ß7–í—ã–ø–æ–ª–Ω–µ–Ω–æ –±–ª–æ–∫–æ–≤: ¬ßf" + times.size());
        
        long totalTime = 0;
        for (Long time : times.values()) {
            totalTime += time;
        }
        
        if (times.size() > 0) {
            long avgTime = totalTime / times.size();
            player.sendMessage("¬ß7–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ¬ßf" + avgTime + "–º—Å");
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     */
    public void onVariableAccess(Player player, String variableName, Object value, String operation) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }
        
        String operationText = "";
        switch (operation) {
            case "get":
                operationText = "¬ßeüìñ –ß—Ç–µ–Ω–∏–µ";
                break;
            case "set":
                operationText = "¬ßa‚úèÔ∏è –ó–∞–ø–∏—Å—å";
                break;
            case "delete":
                operationText = "¬ßcüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ";
                break;
        }
        
        player.sendMessage(operationText + " –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ¬ßf" + variableName + " ¬ß8= ¬ße" + value);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏.
     */
    public void onBlockTransition(Player player, CodeBlock fromBlock, CodeBlock toBlock) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }
        
        String fromAction = fromBlock.getAction();
        String toAction = toBlock.getAction();
        
        player.sendMessage("¬ß7  ‚Ü≥ –ü–µ—Ä–µ—Ö–æ–¥: ¬ßf" + fromAction + " ¬ß7‚Üí ¬ßf" + toAction);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å —á–∞—Å—Ç–∏—Ü–∞–º–∏
        showTransitionPath(player, fromBlock, toBlock);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏.
     */
    private void showTransitionPath(Player player, CodeBlock fromBlock, CodeBlock toBlock) {
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
        Location fromLocation = plugin.getCodingManager().getScriptExecutor().findBlockLocation(fromBlock);
        Location toLocation = plugin.getCodingManager().getScriptExecutor().findBlockLocation(toBlock);
        
        if (fromLocation == null || toLocation == null) {
            return; // –ù–µ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –±–µ–∑ –ª–æ–∫–∞—Ü–∏–π
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
        new BukkitRunnable() {
            int step = 0;
            @Override
            public void run() {
                if (step >= 20) {
                    this.cancel();
                    return;
                }
                
                // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
                double progress = (double) step / 20.0;
                double x = fromLocation.getX() + (toLocation.getX() - fromLocation.getX()) * progress;
                double y = fromLocation.getY() + (toLocation.getY() - fromLocation.getY()) * progress + 1.0;
                double z = fromLocation.getZ() + (toLocation.getZ() - fromLocation.getZ()) * progress;
                
                Location particleLoc = new Location(fromLocation.getWorld(), x, y, z);
                
                // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                Particle particleType = Particle.END_ROD;
                if (toBlock.getMaterial() == Material.OAK_PLANKS) {
                    particleType = Particle.VILLAGER_HAPPY; // –£—Å–ª–æ–≤–∏—è
                } else if (toBlock.getMaterial() == Material.REDSTONE_BLOCK) {
                    particleType = Particle.FLAME; // –î–µ–π—Å—Ç–≤–∏—è
                } else if (toBlock.getMaterial() == Material.BOOKSHELF) {
                    particleType = Particle.ENCHANTMENT_TABLE; // –§—É–Ω–∫—Ü–∏–∏
                }
                
                player.spawnParticle(particleType, particleLoc, 3, 0.1, 0.1, 0.1, 0);
                
                step++;
            }
        }.runTaskTimer(plugin, 0L, 2L);
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞.
     */
    public void toggleStepExecution(Player player) {
        UUID playerId = player.getUniqueId();
        boolean currentState = playerStepStates.getOrDefault(playerId, false);
        playerStepStates.put(playerId, !currentState);
        
        if (!currentState) {
            player.sendMessage("¬ßa‚úì –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ");
            player.sendMessage("¬ß7–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬ßf/debug step ¬ß7–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞");
        } else {
            player.sendMessage("¬ßc‚úó –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –≤ –ø–æ—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
     */
    public void stepExecution(Player player) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            player.sendMessage("¬ßc–û—Ç–ª–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!");
            return;
        }
        
        if (!playerStepStates.getOrDefault(player.getUniqueId(), false)) {
            player.sendMessage("¬ßc–ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ!");
            return;
        }
        
        CodeBlock nextBlock = playerNextStepBlocks.get(player.getUniqueId());
        if (nextBlock == null) {
            player.sendMessage("¬ße‚ö† –ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
            return;
        }
        
        player.sendMessage("¬ßa‚è≠Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫...");
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
        var executor = plugin.getCodingManager().getScriptExecutor();
        Location blockLocation = executor.findBlockLocation(nextBlock);
        var context = new ExecutionContext.ExecutionContextBuilder()
            .plugin(plugin)
            .player(player)
            .currentBlock(nextBlock)
            .blockLocation(blockLocation)
            .build();
        
        executor.processBlock(nextBlock, context);
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     */
    public void setNextStepBlock(Player player, CodeBlock nextBlock) {
        if (playerStepStates.getOrDefault(player.getUniqueId(), false)) {
            playerNextStepBlocks.put(player.getUniqueId(), nextBlock);
            if (nextBlock != null) {
                player.sendMessage("¬ße‚è∏Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: ¬ßf" + nextBlock.getAction());
                player.sendMessage("¬ß7–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬ßf/debug step ¬ß7–¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ø–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞.
     */
    public boolean isStepExecutionEnabled(Player player) {
        return playerStepStates.getOrDefault(player.getUniqueId(), false);
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è onConditionResult —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
     */
    public void onConditionResultDetailed(Player player, CodeBlock conditionBlock, boolean result) {
        if (!playerDebugStates.getOrDefault(player.getUniqueId(), false)) {
            return;
        }

        String conditionName = conditionBlock.getAction();
        String materialName = getMaterialDisplayName(conditionBlock.getMaterial());
        String resultText = result ? "¬ßa–ò–°–¢–ò–ù–ù–û" : "¬ßc–õ–û–ñ–ù–û";
        
        player.sendMessage("¬ßbüîç –£—Å–ª–æ–≤–∏–µ: ¬ßf" + materialName + " ¬ß8(" + conditionName + ") = " + resultText);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (result) {
            player.sendMessage("¬ßa  ‚Ü≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è IF –≤–µ—Ç–∫–∞");
        } else {
            player.sendMessage("¬ßc  ‚Ü≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ELSE –≤–µ—Ç–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)");
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞.
     */
    public void clearDebugData(Player player) {
        UUID playerId = player.getUniqueId();
        playerDebugStates.remove(playerId);
        blockExecutionTimes.remove(playerId);
        playerStepStates.remove(playerId);
        playerNextStepBlocks.remove(playerId);
    }
} 