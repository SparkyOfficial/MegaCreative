package com.megacreative.coding.blocks.actions;

import com.megacreative.coding.BlockAction;
import com.megacreative.coding.ExecutionContext;
import com.megacreative.coding.arguments.NumberParameterArgument;
import com.megacreative.coding.arguments.ParameterArgument;
import com.megacreative.coding.arguments.Argument;
import com.megacreative.coding.values.TextValue;
import com.megacreative.coding.values.NumberValue;
import org.bukkit.entity.Player;

import java.util.Random;

/**
 * –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
 */
public class RandomNumberAction implements BlockAction {
    
    private static final Random random = new Random();
    
    // –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    private final Argument<NumberValue> minArgument = new NumberParameterArgument("min");
    private final Argument<NumberValue> maxArgument = new NumberParameterArgument("max");
    private final Argument<TextValue> varNameArgument = new ParameterArgument("var");
    
    @Override
    public void execute(ExecutionContext context) {
        Player player = context.getPlayer();
        if (player == null) return;
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        NumberValue minValue = minArgument.parse(context.getCurrentBlock()).orElse(null);
        if (minValue == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            return;
        }
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        NumberValue maxValue = maxArgument.parse(context.getCurrentBlock()).orElse(null);
        if (maxValue == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!");
            return;
        }
        
        // 3. –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        TextValue varNameValue = varNameArgument.parse(context.getCurrentBlock()).orElse(null);
        if (varNameValue == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!");
            return;
        }
        
        try {
            // 4. –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            int min = minValue.get(context).intValue();
            int max = maxValue.get(context).intValue();
            String varName = varNameValue.get(context);
            
            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if (min > max) {
                int temp = min;
                min = max;
                max = temp;
            }
            
            // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            int randomNumber = random.nextInt(max - min + 1) + min;
            
            // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            context.setVariable(varName, randomNumber);
            
            // 8. –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            player.sendMessage("¬ßaüé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ " + randomNumber + " —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é '" + varName + "'");
            
        } catch (Exception e) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ '–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ': " + e.getMessage());
        }
    }
} 