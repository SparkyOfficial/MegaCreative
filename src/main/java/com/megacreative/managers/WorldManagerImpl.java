package com.megacreative.managers;

import com.megacreative.MegaCreative;
import com.megacreative.coding.BlockType;
import com.megacreative.coding.CodeBlock;
import com.megacreative.interfaces.IWorldManager;
import com.megacreative.interfaces.ICodingManager;
import com.megacreative.models.*;
import com.megacreative.utils.ConfigManager;
import com.megacreative.utils.JsonSerializer;
import org.bukkit.*;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

public class WorldManagerImpl implements IWorldManager {
    
    private Plugin plugin;
    private ICodingManager codingManager;
    private final ConfigManager configManager;
    private final Map<String, CreativeWorld> worlds;
    private final Map<UUID, List<String>> playerWorlds;
    private final int maxWorldsPerPlayer;
    private final int worldBorderSize;
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∏—Ä–∞–º–∏
    private final Object worldSaveLock = new Object();
    private final Object worldCreationLock = new Object();
    
    /**
     * Constructor with specific dependencies (no God Object)
     */
    public WorldManagerImpl(Plugin plugin, ICodingManager codingManager, ConfigManager configManager) {
        this.plugin = plugin;
        this.codingManager = codingManager;
        this.configManager = configManager;
        this.worlds = new HashMap<>();
        this.playerWorlds = new HashMap<>();
        
        // Load settings from config with null safety
        if (configManager != null) {
            this.maxWorldsPerPlayer = configManager.getMaxWorldsPerPlayer();
            this.worldBorderSize = configManager.getWorldBorderSize();
        } else {
            this.maxWorldsPerPlayer = 5; // Default value
            this.worldBorderSize = 300; // Default value
        }
    }
    
    /**
     * Legacy constructor for backward compatibility
     * @deprecated Use constructor with specific dependencies
     */
    @Deprecated
    public WorldManagerImpl(com.megacreative.MegaCreative plugin) {
        this.plugin = plugin;
        this.codingManager = plugin.getCodingManager();
        this.configManager = plugin.getConfigManager();
        this.worlds = new HashMap<>();
        this.playerWorlds = new HashMap<>();
        this.maxWorldsPerPlayer = 5; // Default value
        this.worldBorderSize = 300; // Default value
    }
    
    /**
     * Constructor for ServiceRegistry (uses ConfigManager)
     */
    public WorldManagerImpl(ConfigManager configManager) {
        this.plugin = null; // Will be set later through setPlugin method
        this.codingManager = null; // Will be injected by ServiceRegistry
        this.configManager = configManager;
        this.worlds = new HashMap<>();
        this.playerWorlds = new HashMap<>();
        
        // Load settings from config with null safety
        if (configManager != null) {
            this.maxWorldsPerPlayer = configManager.getMaxWorldsPerPlayer();
            this.worldBorderSize = configManager.getWorldBorderSize();
        } else {
            this.maxWorldsPerPlayer = 5; // Default value
            this.worldBorderSize = 300; // Default value
        }
    }
    
    /**
     * Sets the plugin instance for dependency injection
     */
    public void setPlugin(Plugin plugin) {
        this.plugin = plugin;
    }
    
    /**
     * Gets the plugin instance, trying to get it from MegaCreative singleton if not directly set
     */
    private Plugin getPlugin() {
        if (plugin == null) {
            plugin = MegaCreative.getInstance();
        }
        return plugin;
    }
    
    /**
     * Sets the coding manager for dependency injection
     */
    public void setCodingManager(ICodingManager codingManager) {
        this.codingManager = codingManager;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∏—Ä–æ–≤ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–∏—Ä—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
     * –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
     */
    public void initialize() {
        loadWorlds();
    }
    
    public void createWorld(Player player, String name, CreativeWorldType worldType) {
        createWorld(player, name, worldType, CreativeWorld.WorldDualMode.STANDALONE, null);
    }
    
    // üéÜ ENHANCED: Reference system-style dual world creation with pairing support
    public void createDualWorld(Player player, String name, CreativeWorldType worldType) {
        // Create dev world first
        String devWorldId = generateUniqueId();
        String playWorldId = generateUniqueId();
        
        createWorld(player, name, worldType, CreativeWorld.WorldDualMode.DEV, playWorldId);
        createWorld(player, name + " (Play)", worldType, CreativeWorld.WorldDualMode.PLAY, devWorldId);
    }
    
    public void createWorld(Player player, String name, CreativeWorldType worldType, 
                           CreativeWorld.WorldDualMode dualMode, String pairedWorldId) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –º–∏—Ä–∞
        if (!isValidWorldName(name)) {
            player.sendMessage("¬ßc–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –º–∏—Ä–∞!");
            player.sendMessage("¬ß7–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
        if (worldExists(name)) {
            player.sendMessage("¬ßc–ú–∏—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –º–∏—Ä–æ–≤
        if (getPlayerWorldCount(player) >= maxWorldsPerPlayer) {
            player.sendMessage("¬ßc–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ " + maxWorldsPerPlayer + " –º–∏—Ä–æ–≤.");
            return;
        }

        player.sendMessage("¬ße–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–∏—Ä–∞ '" + name + "'...");

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–∏—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        String worldId = generateUniqueId();
        CreativeWorld creativeWorld = new CreativeWorld(worldId, name, player.getUniqueId(), player.getName(), worldType);
        
        // üéÜ ENHANCED: Set dual world properties
        creativeWorld.setDualMode(dualMode);
        if (pairedWorldId != null) {
            creativeWorld.setPairedWorldId(pairedWorldId);
        }

        // –í—Å—è —Ä–∞–±–æ—Ç–∞ —Å –º–∏—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        Bukkit.getScheduler().runTask(plugin, () -> {
            try {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                player.closeInventory();
                player.sendMessage("¬ße–°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Ä–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
                World newWorld = createMinecraftWorld(creativeWorld);

                if (newWorld != null) {
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏—Ä–∞ (–≥—Ä–∞–Ω–∏—Ü—ã, –≥–µ–π–º—Ä—É–ª—ã) - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    setupWorld(newWorld, creativeWorld);

                    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∏—Ä–∞ –≤ –ø–∞–º—è—Ç–∏
                    worlds.put(worldId, creativeWorld);
                    playerWorlds.computeIfAbsent(player.getUniqueId(), k -> new ArrayList<>()).add(worldId);

                    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –º–∏—Ä–∞ (—Ç–æ–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç.–∫. —Å–≤—è–∑–∞–Ω–æ —Å –º–∏—Ä–æ–º)
                    if (codingManager != null) {
                        codingManager.loadScriptsForWorld(creativeWorld);
                    }
                    
                    // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    player.teleport(newWorld.getSpawnLocation());
                    player.sendMessage("¬ßa–ú–∏—Ä '" + name + "' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");

                    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
                    saveWorldAsync(creativeWorld, player);
                    
                } else {
                    throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏—Ä (Bukkit.createWorld –≤–µ—Ä–Ω—É–ª null)");
                }
            } catch (Exception e) {
                getPlugin().getLogger().severe("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏—Ä–∞: " + e.getMessage());
                getPlugin().getLogger().severe("Stack trace: " + java.util.Arrays.toString(e.getStackTrace()));
                player.sendMessage("¬ßc–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");

                // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –º–∏—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω
                if (creativeWorld != null && creativeWorld.getWorldName() != null) {
                    Bukkit.getScheduler().runTask(plugin, () -> { // –û—á–∏—Å—Ç–∫—É –¥–µ–ª–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        World partiallyCreatedWorld = Bukkit.getWorld(creativeWorld.getWorldName());
                        if (partiallyCreatedWorld != null) {
                            getPlugin().getLogger().info("–ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–∏—Ä–∞: " + partiallyCreatedWorld.getName());

                            // –ö–∏–∫–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ö–æ—Ç—è –∏—Ö —Ç–∞–º –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)
                            for (Player p : partiallyCreatedWorld.getPlayers()) {
                                p.teleport(Bukkit.getWorlds().get(0).getSpawnLocation());
                                p.sendMessage("¬ßc–ú–∏—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å, –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å—Å—è –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.");
                            }
                            
                            // –í—ã–≥—Ä—É–∂–∞–µ–º –º–∏—Ä
                            if (!Bukkit.unloadWorld(partiallyCreatedWorld, false)) {
                                getPlugin().getLogger().warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–∏—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
                                return; // –î–∞–ª—å—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
                            }
                            
                            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –º–∏—Ä–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
                            File worldFolder = partiallyCreatedWorld.getWorldFolder();
                            Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
                                try {
                                    deleteFolder(worldFolder);
                                    getPlugin().getLogger().info("–§–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞ —É–¥–∞–ª–µ–Ω—ã: " + worldFolder.getName());
                                } catch (Exception deleteEx) {
                                    getPlugin().getLogger().severe("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞: " + deleteEx.getMessage());
                                }
                            });
                        }
                    });
                }
            }
        });
    }
    
    private World createMinecraftWorld(CreativeWorld creativeWorld) {
        WorldCreator creator = new WorldCreator(creativeWorld.getWorldName());
        creator.environment(creativeWorld.getWorldType().getEnvironment());
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (creativeWorld.getWorldType()) {
            case FLAT:
                creator.type(org.bukkit.WorldType.FLAT);
                // üîß FIX: Add proper flat world generator settings to prevent "No key layers" error
                creator.generatorSettings("{\"layers\":[{\"block\":\"bedrock\",\"height\":1},{\"block\":\"stone\",\"height\":2},{\"block\":\"grass_block\",\"height\":1}],\"biome\":\"plains\"}");
                break;
            case VOID:
                // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π –º–∏—Ä –±–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –ø—É—Å—Ç–æ—Ç—ã
                creator.type(org.bukkit.WorldType.FLAT);
                creator.generateStructures(false);
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–ø–∞–≤–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç)
                creator.generatorSettings("{\"layers\":[{\"block\":\"bedrock\",\"height\":1},{\"block\":\"stone\",\"height\":2},{\"block\":\"grass_block\",\"height\":1}],\"biome\":\"plains\"}");
                break;
            case OCEAN:
                creator.type(org.bukkit.WorldType.NORMAL);
                break;
            default:
                creator.type(org.bukkit.WorldType.NORMAL);
                break;
        }
        
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ. –û–Ω —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –º–∏—Ä–∞.
        // –í—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (setupWorld) –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        return Bukkit.createWorld(creator);
    }
    
    private void setupWorld(World world, CreativeWorld creativeWorld) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞–Ω–∏—Ü –º–∏—Ä–∞
        WorldBorder border = world.getWorldBorder();
        border.setCenter(0, 0);
        border.setSize(worldBorderSize);
        border.setWarningDistance(10);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –º–∏—Ä–∞
        WorldFlags flags = creativeWorld.getFlags();
        world.setGameRule(GameRule.DO_MOB_SPAWNING, flags.isMobSpawning());
        world.setGameRule(GameRule.DO_FIRE_TICK, flags.isFireSpread());
        world.setGameRule(GameRule.MOB_GRIEFING, flags.isMobGriefing());
        world.setGameRule(GameRule.DO_WEATHER_CYCLE, flags.isWeatherCycle());
        world.setGameRule(GameRule.DO_DAYLIGHT_CYCLE, flags.isDayNightCycle());
        world.setPVP(flags.isPvp());
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∞–≤–Ω–∞
        world.setSpawnLocation(0, world.getHighestBlockYAt(0, 0) + 1, 0);
    }
    
    public void deleteWorld(String worldId, Player requester) {
        CreativeWorld world = worlds.get(worldId);
        if (world == null || !world.isOwner(requester)) {
            return;
        }
        
        // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∏—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–≥—Ä—É–∂–µ–Ω
        boolean unloadedMain = true;
        World bukkitWorld = Bukkit.getWorld(world.getWorldName());
        if (bukkitWorld != null) {
            if (!bukkitWorld.getPlayers().isEmpty()) { // –°–Ω–∞—á–∞–ª–∞ –∫–∏–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å.
                bukkitWorld.getPlayers().forEach(p -> p.teleport(getPlugin().getServer().getWorlds().get(0).getSpawnLocation()));
            }
            unloadedMain = Bukkit.unloadWorld(bukkitWorld, false); // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è - –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è, —Ç.–∫. –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏
            if (!unloadedMain) {
                getPlugin().getLogger().warning("Failed to unload main world: " + world.getWorldName() + ". Files might be locked.");
                requester.sendMessage("¬ßc–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –º–∏—Ä. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                return; // –ù–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –º–∏—Ä –Ω–µ –≤—ã–≥—Ä—É–∂–µ–Ω
            }
        }

        boolean unloadedDev = true;
        World devWorld = Bukkit.getWorld(world.getDevWorldName());
        if (devWorld != null) {
            if (!devWorld.getPlayers().isEmpty()) { // –ö–∏–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
                devWorld.getPlayers().forEach(p -> p.teleport(getPlugin().getServer().getWorlds().get(0).getSpawnLocation()));
            }
            unloadedDev = Bukkit.unloadWorld(devWorld, false);
             if (!unloadedDev) {
                getPlugin().getLogger().warning("Failed to unload dev world: " + world.getDevWorldName() + ". Files might be locked.");
                requester.sendMessage("¬ßc–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–≥—Ä—É–∑–∏—Ç—å –º–∏—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                return; // –ù–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –º–∏—Ä –Ω–µ –≤—ã–≥—Ä—É–∂–µ–Ω
            }
        }

        if (!unloadedMain || !unloadedDev) {
            requester.sendMessage("¬ßc–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏—Ä—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
            getPlugin().getLogger().severe("Cannot proceed with deleting world files as world unload failed.");
            return;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
        worlds.remove(worldId);
        if (playerWorlds.containsKey(world.getOwnerId())) {
            playerWorlds.get(world.getOwnerId()).remove(worldId);
        }
        if (codingManager != null) {
            codingManager.unloadScriptsForWorld(world);
        }
        // –¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏—Ç–µ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∫–æ–¥–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–Ω–µ —Å–∞–º–æ–≥–æ –º–∏—Ä–∞.
        if (plugin instanceof MegaCreative) {
            MegaCreative megaPlugin = (MegaCreative) plugin;
            megaPlugin.getServiceRegistry().getBlockPlacementHandler().clearAllCodeBlocksInWorld(Bukkit.getWorld(world.getWorldName()));
            megaPlugin.getServiceRegistry().getBlockPlacementHandler().clearAllCodeBlocksInWorld(Bukkit.getWorld(world.getDevWorldName()));
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–∏—Ä–∞ - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        // –ü–µ—Ä–µ–º–µ—Å—Ç–∏–º deleteWorldFiles(world); —Å—é–¥–∞:
        Bukkit.getScheduler().runTaskAsynchronously(getPlugin(), () -> deleteWorldFilesInternal(world, requester));

        requester.sendMessage("¬ßa–ú–∏—Ä '" + world.getName() + "' —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤!");
        requester.sendMessage("¬ß7–§–∞–π–ª—ã –º–∏—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.");
    }
    
    private void deleteWorldFilesInternal(CreativeWorld world, Player requester) {
        File worldFolder = new File(Bukkit.getWorldContainer(), world.getWorldName());
        File devWorldFolder = new File(Bukkit.getWorldContainer(), world.getDevWorldName());
        File dataFile = new File(getPlugin().getDataFolder(), "worlds/" + world.getId() + ".yml");
        
        try {
            boolean successMain = deleteFolderRecursive(worldFolder);
            boolean successDev = deleteFolderRecursive(devWorldFolder);
            boolean successDataFile = dataFile.delete();
            
            if (successMain && successDev && successDataFile) {
                getPlugin().getLogger().info("Successfully deleted world files for world ID " + world.getId());
                requester.sendMessage("¬ßa‚úì –§–∞–π–ª—ã –º–∏—Ä–∞ '" + world.getName() + "' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã.");
            } else {
                getPlugin().getLogger().warning("Failed to fully delete world files for world ID " + world.getId() + 
                                            ". Main: " + successMain + ", Dev: " + successDev + ", Data: " + successDataFile);
                requester.sendMessage("¬ßc‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–∏—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.");
            }
        } catch (Exception e) {
            getPlugin().getLogger().severe("Error deleting world files for world ID " + world.getId() + ": " + e.getMessage());
            requester.sendMessage("¬ßc‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –º–∏—Ä–∞: " + e.getMessage());
        }
    }

    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
    private boolean deleteFolderRecursive(File folder) {
        if (!folder.exists()) {
            return true;
        }
        
        // –í–ê–ñ–ù–û: –Ω—É–∂–Ω–æ –æ—á–∏—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –º–∏—Ä—É.
        // –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ. 
        // –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ï–ì–û –ù–ê –ü–ê–ü–ö–ê–• –í–ê–ñ–ù–ï–ï –ú–ò–†–û–í–û–ô –ü–ê–ü–ö–ò, –∏–Ω–∞—á–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        // –¢–∞–∫–∂–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞ —Ç–æ—á–Ω–æ –¥–ª—è –º–∏—Ä–∞.
        
        try {
            if (folder.isDirectory()) {
                File[] files = folder.listFiles();
                if (files != null) {
                    for (File file : files) {
                        deleteFolderRecursive(file); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–¥–ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
                    }
                }
            }
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –ø–∞–ø–∫—É –∏–ª–∏ —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–æ
            return folder.delete();
        } catch (Exception e) {
            getPlugin().getLogger().severe("Failed to delete " + folder.getName() + ": " + e.getMessage());
            return false;
        }
    }
    
    private void deleteFolder(File folder) {
        if (folder.exists()) {
            File[] files = folder.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isDirectory()) {
                        deleteFolder(file);
                    } else {
                        file.delete();
                    }
                }
            }
            folder.delete();
        }
    }
    
    public CreativeWorld getWorld(String id) {
        return worlds.get(id);
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –º–∏—Ä—ã
     * @return –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –º–∏—Ä–æ–≤
     */
    public List<CreativeWorld> getCreativeWorlds() {
        return new ArrayList<>(worlds.values());
    }
    
    /**
     * üéÜ ENHANCED: Reference system-style world pairing and switching methods
     */
    public CreativeWorld getPairedWorld(CreativeWorld world) {
        if (world.getPairedWorldId() != null) {
            return getWorld(world.getPairedWorldId());
        }
        return null;
    }
    
    public void switchToDevWorld(Player player, String worldId) {
        CreativeWorld world = getWorld(worldId);
        if (world == null) {
            player.sendMessage("¬ßc–ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        if (!world.canCode(player)) {
            player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ —ç—Ç–æ–º –º–∏—Ä–µ!");
            return;
        }
        
        String devWorldName = world.isDevWorld() ? world.getWorldName() : world.getDevWorldName();
        World bukkitWorld = Bukkit.getWorld(devWorldName);
        
        if (bukkitWorld == null) {
            // Create dev world if it doesn't exist
            createDevWorldIfNotExists(world);
            bukkitWorld = Bukkit.getWorld(devWorldName);
        }
        
        if (bukkitWorld != null) {
            player.teleport(bukkitWorld.getSpawnLocation());
            player.sendMessage("¬ßeüîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!");
            
            // üéÜ ENHANCED: Track world mode switch
            if (plugin instanceof MegaCreative) {
                ((MegaCreative) plugin).getPlayerManager().trackPlayerWorldEntry(player, worldId, "DEV");
            }
        }
    }
    
    public void switchToPlayWorld(Player player, String worldId) {
        CreativeWorld world = getWorld(worldId);
        if (world == null) {
            player.sendMessage("¬ßc–ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        String playWorldName = world.isPlayWorld() ? world.getWorldName() : world.getPlayWorldName();
        World bukkitWorld = Bukkit.getWorld(playWorldName);
        
        if (bukkitWorld == null) {
            player.sendMessage("¬ßc–ú–∏—Ä –¥–ª—è –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return;
        }
        
        player.teleport(bukkitWorld.getSpawnLocation());
        player.sendMessage("¬ßaüéÆ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º!");
        
        // üéÜ ENHANCED: Track world mode switch
        if (plugin instanceof MegaCreative) {
            ((MegaCreative) plugin).getPlayerManager().trackPlayerWorldEntry(player, worldId, "PLAY");
        }
    }
    
    // üéÜ ENHANCED: Add missing switchToBuildWorld method for proper build mode switching
    public void switchToBuildWorld(Player player, String worldId) {
        CreativeWorld world = getWorld(worldId);
        if (world == null) {
            player.sendMessage("¬ßc–ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        if (!world.canEdit(player)) {
            player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –º–∏—Ä–∞!");
            return;
        }
        
        // Set mode to BUILD
        world.setMode(com.megacreative.models.WorldMode.BUILD);
        
        String devWorldName = world.isDevWorld() ? world.getWorldName() : world.getDevWorldName();
        World bukkitWorld = Bukkit.getWorld(devWorldName);
        
        if (bukkitWorld == null) {
            // Create dev world if it doesn't exist
            createDevWorldIfNotExists(world);
            bukkitWorld = Bukkit.getWorld(devWorldName);
        }
        
        if (bukkitWorld != null) {
            player.teleport(bukkitWorld.getSpawnLocation());
            player.setGameMode(org.bukkit.GameMode.CREATIVE);
            player.sendMessage("¬ßa–†–µ–∂–∏–º –º–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ¬ßf¬ßl–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û¬ßa!");
            player.sendMessage("¬ß7‚ùå –ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω, —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è");
            player.sendMessage("¬ß7–ö—Ä–µ–∞—Ç–∏–≤ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π");
            
            // üéÜ ENHANCED: Track world mode switch
            if (plugin instanceof MegaCreative) {
                ((MegaCreative) plugin).getPlayerManager().trackPlayerWorldEntry(player, worldId, "BUILD");
            }
            
            saveWorld(world);
        }
    }
    
    private void createDevWorldIfNotExists(CreativeWorld world) {
        if (Bukkit.getWorld(world.getDevWorldName()) == null) {
            // Create a dev world copy with coding features enabled
            WorldCreator creator = new WorldCreator(world.getDevWorldName());
            creator.environment(world.getWorldType().getEnvironment());
            creator.copy(Bukkit.getWorld(world.getWorldName()));
            
            World devWorld = Bukkit.createWorld(creator);
            if (devWorld != null) {
                setupDevWorld(devWorld, world);
            }
        }
    }
    
    private void setupDevWorld(World devWorld, CreativeWorld creativeWorld) {
        // Enhanced setup for development world
        setupWorld(devWorld, creativeWorld);
        
        // Additional dev world specific settings
        devWorld.setGameRule(GameRule.DO_MOB_SPAWNING, false); // No mobs in dev mode
        devWorld.setGameRule(GameRule.KEEP_INVENTORY, true); // Keep items on death
        devWorld.setGameRule(GameRule.DO_IMMEDIATE_RESPAWN, true); // Instant respawn
    }
    public CreativeWorld getWorldByName(String name) {
        if (name == null || name.isEmpty()) {
            return null;
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for (CreativeWorld world : worlds.values()) {
            if (name.equalsIgnoreCase(world.getName())) {
                return world;
            }
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        for (CreativeWorld world : worlds.values()) {
            if (world.getName().toLowerCase().contains(name.toLowerCase())) {
                return world;
            }
        }
        
        return null;
    }
    
    /**
     * üéÜ ENHANCED: Finds CreativeWorld by Bukkit world with dual world architecture support
     * Handles both old-style (_dev) and new reference system-style (-world, -code) naming
     * @param bukkitWorld Bukkit-–º–∏—Ä
     * @return –ù–∞–π–¥–µ–Ω–Ω—ã–π CreativeWorld –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    public CreativeWorld findCreativeWorldByBukkit(World bukkitWorld) {
        if (bukkitWorld == null) return null;
        
        String worldName = bukkitWorld.getName();
        
        // Handle old-style megacreative_ naming
        if (worldName.startsWith("megacreative_")) {
            // üîß FIX: Remove prefix and ALL possible suffixes for dual world architecture
            String id = worldName.replace("megacreative_", "")
                                  .replace("-code", "")    // New dev world suffix
                                  .replace("-world", "")   // New play world suffix  
                                  .replace("_dev", "");    // Legacy compatibility
            return getWorld(id);
        }
        
        // üéÜ ENHANCED: Handle new reference system-style dual world naming
        // Format: worldname-code or worldname-world
        for (CreativeWorld world : worlds.values()) {
            // Check if this is the main world
            if (worldName.equals(world.getWorldName())) {
                return world;
            }
            
            // Check if this is a dev world (old style)
            if (worldName.equals(world.getDevWorldName())) {
                return world;
            }
            
            // Check reference system-style naming patterns
            if (world.getDualMode() != CreativeWorld.WorldDualMode.STANDALONE) {
                String baseName = world.getBaseName();
                
                // Check -code suffix (dev world)
                if (worldName.equals(baseName + "-code")) {
                    return world;
                }
                
                // Check -world suffix (play world)
                if (worldName.equals(baseName + "-world")) {
                    return world;
                }
            }
        }
        
        return null;
    }
    
    public List<CreativeWorld> getPlayerWorlds(Player player) {
        List<String> worldIds = playerWorlds.get(player.getUniqueId());
        if (worldIds == null) return new ArrayList<>();
        
        return worldIds.stream()
            .map(worlds::get)
            .filter(Objects::nonNull)
            .toList();
    }
    
    public List<CreativeWorld> getAllPublicWorlds() {
        return worlds.values().stream()
            .filter(world -> !world.isPrivate())
            .sorted((a, b) -> Integer.compare(b.getOnlineCount(), a.getOnlineCount()))
            .toList();
    }
    
    public int getPlayerWorldCount(Player player) {
        List<String> worldIds = playerWorlds.get(player.getUniqueId());
        return worldIds != null ? worldIds.size() : 0;
    }
    
    private String generateUniqueId() {
        String id;
        do {
            id = String.valueOf(ThreadLocalRandom.current().nextInt(100000, 999999));
        } while (worlds.containsKey(id));
        return id;
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏—Ä–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
     */
    public void saveWorldAsync(CreativeWorld world, Player player) {
        Bukkit.getScheduler().runTaskAsynchronously(getPlugin(), () -> {
            synchronized (worldSaveLock) {
                try {
                    saveWorld(world);
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    Bukkit.getScheduler().runTask(getPlugin(), () -> 
                        player.sendMessage("¬ßa–ú–∏—Ä '" + world.getName() + "' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"));
                } catch (Exception e) {
                    getPlugin().getLogger().severe("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏—Ä–∞ " + world.getId() + ": " + e.getMessage());
                    getPlugin().getLogger().severe("Stack trace: " + java.util.Arrays.toString(e.getStackTrace()));
                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    Bukkit.getScheduler().runTask(getPlugin(), () -> 
                        player.sendMessage("¬ßc–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏—Ä–∞."));
                }
            }
        });
    }
    
    public void saveWorld(CreativeWorld world) {
        File dataFolder = new File(getPlugin().getDataFolder(), "worlds");
        if (!dataFolder.exists()) {
            dataFolder.mkdirs();
        }
        
        File worldFile = new File(dataFolder, world.getId() + ".yml");
        YamlConfiguration config = new YamlConfiguration();
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é DTO —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
            String worldJson = JsonSerializer.serializeWorld(world);
            config.set("worldData", worldJson);
            config.save(worldFile);
            
            getPlugin().getLogger().fine("World " + world.getId() + " saved successfully using safe DTO serialization");
        } catch (Exception e) {
            getPlugin().getLogger().severe("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏—Ä–∞ " + world.getId() + ": " + e.getMessage());
            getPlugin().getLogger().severe("Stack trace: " + java.util.Arrays.toString(e.getStackTrace()));
        }
    }
    
    public void saveAllWorlds() {
        worlds.values().forEach(this::saveWorld);
    }
    
    private void loadWorlds() {
        File dataFolder = new File(getPlugin().getDataFolder(), "worlds");
        if (!dataFolder.exists()) {
            return;
        }
        
        File[] worldFiles = dataFolder.listFiles((dir, name) -> name.endsWith(".yml"));
        if (worldFiles == null) return;
        
        for (File worldFile : worldFiles) {
            try {
                loadWorld(worldFile);
            } catch (Exception e) {
                getPlugin().getLogger().severe("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–∞ " + worldFile.getName() + ": " + e.getMessage());
            }
        }
    }
    
    private void loadWorld(File worldFile) {
        YamlConfiguration config = YamlConfiguration.loadConfiguration(worldFile);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gson –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏—Ä–∞ –∏–∑ JSON
        String worldJson = config.getString("worldData");
        if (worldJson == null) {
            getPlugin().getLogger().warning("–§–∞–π–ª –º–∏—Ä–∞ " + worldFile.getName() + " –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö worldData");
            return;
        }
        
        try {
            CreativeWorld world = com.megacreative.utils.JsonSerializer.deserializeWorld(worldJson, (MegaCreative) getPlugin());
            if (world != null) {
                worlds.put(world.getId(), world);
                playerWorlds.computeIfAbsent(world.getOwnerId(), k -> new ArrayList<>()).add(world.getId());

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–∞ –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                World bukkitWorld = Bukkit.getWorld(world.getWorldName());
                if (bukkitWorld == null) {
                    WorldCreator creator = new WorldCreator(world.getWorldName());
                    switch (world.getWorldType()) {
                        case FLAT -> creator.type(WorldType.FLAT);
                        case VOID -> creator.generator("VoidWorld"); // –µ—Å–ª–∏ –µ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—É—Å—Ç–æ—Ç—ã
                        case OCEAN -> creator.type(WorldType.NORMAL); // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–∫–µ–∞–Ω–∞
                        case NETHER -> creator.environment(World.Environment.NETHER);
                        case END -> creator.environment(World.Environment.THE_END);
                        default -> creator.type(WorldType.NORMAL);
                    }
                    bukkitWorld = creator.createWorld();
                }
                if (bukkitWorld != null) {
                    ((MegaCreative) getPlugin()).getCodingManager().loadScriptsForWorld(world);
                }
            }
        } catch (Exception e) {
            getPlugin().getLogger().severe("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏—Ä–∞ " + worldFile.getName() + ": " + e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –º–∏—Ä–∞
     */
    private boolean isValidWorldName(String name) {
        return name != null && 
               name.length() >= 3 && 
               name.length() <= 20 && 
               name.matches("^[a-zA-Z0-9_\\s–ê-–Ø–∞-—è–Å—ë]+$");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∏—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
     */
    private boolean worldExists(String name) {
        return worlds.values().stream()
                .anyMatch(world -> world.getName().equalsIgnoreCase(name));
    }
    
    @Override
    public void shutdown() {
        // Save all worlds before shutdown
        saveAllWorlds();
        
        // Clear caches to free memory
        worlds.clear();
        playerWorlds.clear();
        
        // Any other cleanup needed for world management
    }
}