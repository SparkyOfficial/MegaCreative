package com.megacreative.managers;

import com.megacreative.MegaCreative;
import com.megacreative.coding.CodingItems;
import com.megacreative.models.CreativeWorld;
import com.megacreative.services.BlockConfigService;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerChangedWorldEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ dev-–º–∏—Ä
 */
public class DevInventoryManager implements Listener {
    
    private final MegaCreative plugin;
    private final Map<UUID, ItemStack[]> savedInventories = new HashMap<>();
    private final Set<UUID> playersInDevWorld = new HashSet<>();
    
    public DevInventoryManager(MegaCreative plugin) {
        this.plugin = plugin;
        // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        // startInventoryChecker(); // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerChangeWorld(PlayerChangedWorldEvent event) {
        Player player = event.getPlayer();
        
        if (isDevWorld(player.getWorld().getName())) {
            handleDevWorldEntry(player);
        } else if (isDevWorld(event.getFrom().getName())) {
            handleDevWorldExit(player);
        }
    }
    
    private void handleDevWorldEntry(Player player) {
        CreativeWorld creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (creativeWorld == null || !creativeWorld.canCode(player)) {
            player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–∏—Ä–µ!");
            return;
        }
        
        // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –ü–û–¢–û–ú –æ—á–∏—â–∞–µ–º!
        savedInventories.put(player.getUniqueId(), player.getInventory().getContents().clone());
        playersInDevWorld.add(player.getUniqueId());
        giveDevTools(player);
        player.sendMessage("¬ßa–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
    }
    
    private void handleDevWorldExit(Player player) {
        UUID playerId = player.getUniqueId();
        playersInDevWorld.remove(playerId);
        
        ItemStack[] savedInventory = savedInventories.remove(playerId);
        if (savedInventory != null) {
            player.getInventory().setContents(savedInventory);
            player.sendMessage("¬ßa–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
        }
    }
    
    private void giveDevTools(Player player) {
        player.getInventory().clear();
        int currentSlot = 0;

        BlockConfigService configService = plugin.getServiceRegistry().getBlockConfigService();
        if (configService == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!");
            return;
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –í–°–ï–ú –±–ª–æ–∫–∞–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤ coding_blocks.yml
        for (BlockConfigService.BlockConfig config : configService.getAllBlockConfigs()) {
            if (currentSlot >= 36) break;

            ItemStack item = new ItemStack(config.getMaterial());
            ItemMeta meta = item.getItemMeta();
            if (meta != null) {
                meta.setDisplayName("¬ßr" + config.getDisplayName());
                List<String> lore = new ArrayList<>();
                lore.add("¬ß7" + config.getDescription());
                lore.add("¬ß8–¢–∏–ø: " + config.getType());
                lore.add("¬ß8ID: " + config.getId());
                meta.setLore(lore);
                item.setItemMeta(meta);
            }
            player.getInventory().setItem(currentSlot++, item);
        }

        player.updateInventory();
    }
    
    private void startInventoryChecker() {
        new BukkitRunnable() {
            @Override
            public void run() {
                for (UUID playerId : new HashSet<>(playersInDevWorld)) {
                    Player player = Bukkit.getPlayer(playerId);
                    if (player != null && player.isOnline()) {
                        checkAndRestoreTools(player);
                    } else {
                        playersInDevWorld.remove(playerId);
                        savedInventories.remove(playerId);
                    }
                }
            }
        }.runTaskTimer(plugin, 200L, 600L); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ 5), –º–µ–Ω—å—à–µ —Å–ø–∞–º–∞
    }
    
    private void checkAndRestoreTools(Player player) {
        if (!playersInDevWorld.contains(player.getUniqueId())) return;
        
        // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞, –±—É–¥–µ–º –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
        List<String> missingItems = getMissingCodingItems(player);
        if (!missingItems.isEmpty()) {
            giveMissingItems(player, missingItems);
            player.sendMessage("¬ßa–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏—Ö –∏–º–µ–Ω–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
     */
    private List<String> getMissingCodingItems(Player player) {
        List<String> missingItems = new ArrayList<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–µ –≤—Å–µ –±–ª–æ–∫–∏ –∫–æ–¥–∞!)
        boolean hasCopier = false;
        boolean hasArrowNot = false;
        boolean hasDataCreator = false;
        boolean hasCodeMover = false;
        
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {
                String name = item.getItemMeta().getDisplayName();
                if (name.contains("–ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ –±–ª–æ–∫–æ–≤") || name.contains(CodingItems.COPIER_TOOL_NAME)) {
                    hasCopier = true;
                } else if (name.contains("–°—Ç—Ä–µ–ª–∞ –ù–ï") || name.contains(CodingItems.ARROW_NOT_NAME)) {
                    hasArrowNot = true;
                } else if (name.contains("–°–æ–∑–¥–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö") || name.contains(CodingItems.DATA_CREATOR_NAME)) {
                    hasDataCreator = true;
                } else if (name.contains("–ü–µ—Ä–µ–º–µ—â–∞—Ç–µ–ª—å –∫–æ–¥–∞") || name.contains(CodingItems.CODE_MOVER_NAME)) {
                    hasCodeMover = true;
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if (!hasCopier) missingItems.add("copier");
        if (!hasArrowNot) missingItems.add("arrow_not");
        if (!hasDataCreator) missingItems.add("data_creator");
        if (!hasCodeMover) missingItems.add("code_mover");
        
        return missingItems;
    }
    
    /**
     * –í—ã–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
     */
    private void giveMissingItems(Player player, List<String> missingItems) {
        for (String item : missingItems) {
            switch (item) {
                case "copier" -> {
                    ItemStack copier = new ItemStack(Material.GOLDEN_AXE);
                    ItemMeta copierMeta = copier.getItemMeta();
                    copierMeta.setDisplayName("¬ß6üìã –ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ –±–ª–æ–∫–æ–≤");
                    copierMeta.setLore(Arrays.asList(
                        "¬ß7–õ–ö–ú –ø–æ –±–ª–æ–∫—É - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                        "¬ß7–ü–ö–ú –ø–æ –±–ª–æ–∫—É - –≤—Å—Ç–∞–≤–∏—Ç—å"
                    ));
                    copier.setItemMeta(copierMeta);
                    player.getInventory().addItem(copier);
                }
                case "arrow_not" -> player.getInventory().addItem(CodingItems.getArrowNot());
                case "data_creator" -> player.getInventory().addItem(CodingItems.getDataCreator());
                case "code_mover" -> player.getInventory().addItem(CodingItems.getCodeMover());
            }
        }
    }
    
    private static ItemStack createDevItem(Material material, String name) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(name);
            item.setItemMeta(meta);
        }
        return item;
    }
    
    private boolean isDevWorld(String worldName) {
        return worldName.endsWith("_dev");
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–∏—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    public void savePlayerInventory(Player player) {
        if (playersInDevWorld.contains(player.getUniqueId())) {
            savedInventories.put(player.getUniqueId(), player.getInventory().getContents());
            plugin.getLogger().info("Saved dev inventory for " + player.getName());
        }
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –º–∏—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    public void restorePlayerInventory(Player player) {
        UUID playerId = player.getUniqueId();
        playersInDevWorld.remove(playerId);
        
        ItemStack[] savedInventory = savedInventories.remove(playerId);
        if (savedInventory != null) {
            player.getInventory().setContents(savedInventory);
            player.sendMessage("¬ßa–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
        }
    }
    
    public void forceRestoreTools(Player player) {
        if (playersInDevWorld.contains(player.getUniqueId())) {
            giveDevTools(player);
            player.sendMessage("¬ßa–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
        }
    }
    
    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
     */
    public void refreshTools(Player player) {
        if (!playersInDevWorld.contains(player.getUniqueId())) {
            player.sendMessage("¬ßc–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–∏—Ä–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!");
            return;
        }
        
        List<String> missingItems = getMissingCodingItems(player);
        if (!missingItems.isEmpty()) {
            giveMissingItems(player, missingItems);
            player.sendMessage("¬ßa–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
        } else {
            player.sendMessage("¬ße–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ!");
        }
    }
}