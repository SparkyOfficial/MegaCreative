package com.megacreative.managers;

import com.megacreative.MegaCreative;
import com.megacreative.coding.CodingItems;
import com.megacreative.models.CreativeWorld;
import com.megacreative.services.BlockConfigService;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerChangedWorldEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.scheduler.BukkitRunnable;

import java.util.*;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ dev-–º–∏—Ä
 */
public class DevInventoryManager implements Listener {
    
    private final MegaCreative plugin;
    private final Map<UUID, ItemStack[]> savedInventories = new HashMap<>();
    private final Set<UUID> playersInDevWorld = new HashSet<>();
    
    public DevInventoryManager(MegaCreative plugin) {
        this.plugin = plugin;
        startInventoryChecker();
    }
    
    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerChangeWorld(PlayerChangedWorldEvent event) {
        Player player = event.getPlayer();
        
        if (isDevWorld(player.getWorld().getName())) {
            handleDevWorldEntry(player);
        } else if (isDevWorld(event.getFrom().getName())) {
            handleDevWorldExit(player);
        }
    }
    
    private void handleDevWorldEntry(Player player) {
        CreativeWorld creativeWorld = plugin.getWorldManager().findCreativeWorldByBukkit(player.getWorld());
        if (creativeWorld == null || !creativeWorld.canCode(player)) {
            player.sendMessage("¬ßc–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º –º–∏—Ä–µ!");
            return;
        }
        
        savedInventories.put(player.getUniqueId(), player.getInventory().getContents().clone());
        playersInDevWorld.add(player.getUniqueId());
        giveDevTools(player);
        player.sendMessage("¬ßa–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
    }
    
    private void handleDevWorldExit(Player player) {
        UUID playerId = player.getUniqueId();
        playersInDevWorld.remove(playerId);
        
        ItemStack[] savedInventory = savedInventories.remove(playerId);
        if (savedInventory != null) {
            player.getInventory().setContents(savedInventory);
            player.sendMessage("¬ßa–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
        }
    }
    
    private void giveDevTools(Player player) {
        player.getInventory().clear();
        int currentSlot = 0;

        BlockConfigService configService = plugin.getServiceRegistry().getBlockConfigService();
        if (configService == null) {
            player.sendMessage("¬ßc–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!");
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LinkedHashMap, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        Map<Material, BlockConfigService.BlockConfig> uniqueBlocks = new LinkedHashMap<>();

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –±–ª–æ–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for (BlockConfigService.BlockConfig config : configService.getAllBlockConfigs()) {
            if (!uniqueBlocks.containsKey(config.getMaterial())) {
                uniqueBlocks.put(config.getMaterial(), config);
            }
        }
        
        // –í—ã–¥–∞–µ–º –∏–≥—Ä–æ–∫—É –ø—Ä–µ–¥–º–µ—Ç—ã
        for (BlockConfigService.BlockConfig config : uniqueBlocks.values()) {
            if (currentSlot >= 36) break; // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            
            ItemStack item = new ItemStack(config.getMaterial());
            ItemMeta meta = item.getItemMeta();
            if (meta != null) {
                meta.setDisplayName("¬ßr" + config.getDisplayName()); // ¬ßr —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—É—Ä—Å–∏–≤
                List<String> lore = new ArrayList<>();
                lore.add("¬ß7" + config.getDescription());
                lore.add("¬ß8–¢–∏–ø: " + config.getType());
                meta.setLore(lore);
                item.setItemMeta(meta);
            }
            player.getInventory().setItem(currentSlot++, item);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        player.getInventory().setItem(35, createDevItem(Material.STICK, "¬ß6üìã –ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ –±–ª–æ–∫–æ–≤"));
        
        player.updateInventory();
    }
    
    private void startInventoryChecker() {
        new BukkitRunnable() {
            @Override
            public void run() {
                for (UUID playerId : new HashSet<>(playersInDevWorld)) {
                    Player player = Bukkit.getPlayer(playerId);
                    if (player != null && player.isOnline()) {
                        checkAndRestoreTools(player);
                    } else {
                        playersInDevWorld.remove(playerId);
                        savedInventories.remove(playerId);
                    }
                }
            }
        }.runTaskTimer(plugin, 100L, 100L);
    }
    
    private void checkAndRestoreTools(Player player) {
        if (!playersInDevWorld.contains(player.getUniqueId())) return;
        
        boolean hasDevTools = false;
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {
                String name = item.getItemMeta().getDisplayName();
                if (name.contains("–ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ –±–ª–æ–∫–æ–≤") || name.contains(CodingItems.COPIER_TOOL_NAME)) {
                    hasDevTools = true;
                    break;
                }
            }
        }
        
        if (!hasDevTools) {
            giveDevTools(player);
            player.sendMessage("¬ßa–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
        }
    }
    
    private static ItemStack createDevItem(Material material, String name) {
        ItemStack item = new ItemStack(material);
        ItemMeta meta = item.getItemMeta();
        if (meta != null) {
            meta.setDisplayName(name);
            item.setItemMeta(meta);
        }
        return item;
    }
    
    private boolean isDevWorld(String worldName) {
        return worldName.endsWith("_dev");
    }
    
    public void forceRestoreTools(Player player) {
        if (playersInDevWorld.contains(player.getUniqueId())) {
            giveDevTools(player);
            player.sendMessage("¬ßa–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
        }
    }
}